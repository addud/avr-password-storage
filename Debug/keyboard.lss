
keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000332a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  0000332a  000033be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  0080009c  0080009c  000033fa  2**0
                  ALLOC
  3 .stab         00004ddc  00000000  00000000  000033fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002201  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 01 	jmp	0x258	; 0x258 <__ctors_end>
       4:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__vector_1>
       8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
       c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      10:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      14:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      18:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      1c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      20:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      24:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      28:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      2c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      30:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      34:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      38:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      3c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      40:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      44:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      48:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__vector_18>
      4c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      50:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>

00000054 <usbDescriptorString0>:
      54:	04 03 09 04                                         ....

00000058 <usbDescriptorStringVendor>:
      58:	20 03 63 00 6f 00 64 00 65 00 61 00 6e 00 64 00      .c.o.d.e.a.n.d.
      68:	6c 00 69 00 66 00 65 00 2e 00 63 00 6f 00 6d 00     l.i.f.e...c.o.m.

00000078 <usbDescriptorStringDevice>:
      78:	10 03 50 00 61 00 73 00 73 00 67 00 65 00 6e 00     ..P.a.s.s.g.e.n.

00000088 <usbDescriptorDevice>:
      88:	12 01 10 01 00 00 00 08 42 42 31 e1 00 01 01 02     ........BB1.....
      98:	00 01                                               ..

0000009a <usbDescriptorConfiguration>:
      9a:	09 02 22 00 01 01 00 80 19 09 04 00 00 01 03 01     ..".............
      aa:	01 00 09 21 01 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
      ba:	00 0a                                               ..

000000bc <usbDescriptorHidReport>:
      bc:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
      cc:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
      dc:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
      ec:	75 08 15 00 25 65 05 07 19 00 29 65 81 00 c0        u...%e....)e...

000000fb <string_1>:
      fb:	53 45 4e 44 20 50 41 53 53 00                       SEND PASS.

00000105 <string_2>:
     105:	41 44 44 20 50 41 53 53 00                          ADD PASS.

0000010e <string_3>:
     10e:	52 45 4d 4f 56 45 20 50 41 53 53 00                 REMOVE PASS.

0000011a <string_4>:
     11a:	43 48 41 4e 47 45 20 50 41 53 53 00                 CHANGE PASS.

00000126 <menu_items>:
     126:	fb 00 05 01 0e 01 1a 01                             ........

0000012e <unshifted>:
     12e:	0d 09 0e 60 15 71 16 31 1a 7a 1b 73 1c 61 1d 77     ...`.q.1.z.s.a.w
     13e:	1e 32 21 63 22 78 23 64 24 65 25 34 26 33 29 20     .2!c"x#d$e%4&3) 
     14e:	2a 76 2b 66 2c 74 2d 72 2e 35 31 6e 32 62 33 68     *v+f,t-r.51n2b3h
     15e:	34 67 35 79 36 36 3a 6d 3b 6a 3c 75 3d 37 3e 38     4g5y66:m;j<u=7>8
     16e:	41 2c 42 6b 43 69 44 6f 45 30 46 39 49 2e 4e 2d     A,BkCiDoE0F9I.N-
     17e:	4b 6c 4c 3b 4d 70 52 27 54 5b 55 3d 5a 0d 5b 5d     KlL;MpR'T[U=Z.[]
     18e:	5d 5d 61 3c 66 08 69 31 6b 34 6c 37 70 30 71 2e     ]]a<f.i1k4l7p0q.
     19e:	72 32 73 35 74 36 75 38 76 1b 79 2b 7a 33 7b 2d     r2s5t6u8v.y+z3{-
     1ae:	7c 2a 7d 39 00 00                                   |*}9..

000001b4 <shifted>:
     1b4:	0d 09 0e 7e 15 51 16 21 1a 5a 1b 53 1c 41 1d 57     ...~.Q.!.Z.S.A.W
     1c4:	1e 40 21 43 22 58 23 44 24 45 25 24 26 23 29 20     .@!C"X#D$E%$&#) 
     1d4:	2a 56 2b 46 2c 54 2d 52 2e 25 31 4e 32 42 33 48     *V+F,T-R.%1N2B3H
     1e4:	34 47 35 59 36 5e 39 4c 3a 4d 3b 4a 3c 55 3d 26     4G5Y6^9L:M;J<U=&
     1f4:	3e 2a 41 3c 42 4b 43 49 44 4f 45 29 46 28 49 3e     >*A<BKCIDOE)F(I>
     204:	4e 5f 4b 4c 4c 3a 4d 50 4a 3f 52 22 54 7b 55 2b     N_KLL:MPJ?R"T{U+
     214:	5a 0d 5b 7d 5d 7c 61 3e 66 08 69 31 6b 34 6c 37     Z.[}]|a>f.i1k4l7
     224:	70 30 71 2e 72 32 73 35 74 36 75 38 79 2b 7a 33     p0q.r2s5t6u8y+z3
     234:	7b 2d 7c 2a 7d 39 00 00                             {-|*}9..

0000023c <extended>:
     23c:	6c f0 69 f1 71 f1 70 f3 7a f4 7d f5 75 f6 72 f7     l.i.q.p.z.}.u.r.
     24c:	6b f8 74 f9 4a fa 14 fb 11 fc 00 00                 k.t.J.......

00000258 <__ctors_end>:
     258:	11 24       	eor	r1, r1
     25a:	1f be       	out	0x3f, r1	; 63
     25c:	cf e5       	ldi	r28, 0x5F	; 95
     25e:	d4 e0       	ldi	r29, 0x04	; 4
     260:	de bf       	out	0x3e, r29	; 62
     262:	cd bf       	out	0x3d, r28	; 61

00000264 <__do_copy_data>:
     264:	10 e0       	ldi	r17, 0x00	; 0
     266:	a0 e6       	ldi	r26, 0x60	; 96
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	ea e2       	ldi	r30, 0x2A	; 42
     26c:	f3 e3       	ldi	r31, 0x33	; 51
     26e:	02 c0       	rjmp	.+4      	; 0x274 <__do_copy_data+0x10>
     270:	05 90       	lpm	r0, Z+
     272:	0d 92       	st	X+, r0
     274:	ac 39       	cpi	r26, 0x9C	; 156
     276:	b1 07       	cpc	r27, r17
     278:	d9 f7       	brne	.-10     	; 0x270 <__do_copy_data+0xc>

0000027a <__do_clear_bss>:
     27a:	11 e0       	ldi	r17, 0x01	; 1
     27c:	ac e9       	ldi	r26, 0x9C	; 156
     27e:	b0 e0       	ldi	r27, 0x00	; 0
     280:	01 c0       	rjmp	.+2      	; 0x284 <.do_clear_bss_start>

00000282 <.do_clear_bss_loop>:
     282:	1d 92       	st	X+, r1

00000284 <.do_clear_bss_start>:
     284:	a6 30       	cpi	r26, 0x06	; 6
     286:	b1 07       	cpc	r27, r17
     288:	e1 f7       	brne	.-8      	; 0x282 <.do_clear_bss_loop>
     28a:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <main>
     28e:	0c 94 93 19 	jmp	0x3326	; 0x3326 <_exit>

00000292 <__bad_interrupt>:
     292:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000296 <usbResetDataToggling>:
#endif

/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
     296:	df 93       	push	r29
     298:	cf 93       	push	r28
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     29e:	8b e4       	ldi	r24, 0x4B	; 75
     2a0:	80 93 d8 00 	sts	0x00D8, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
#   endif
#endif
}
     2a4:	cf 91       	pop	r28
     2a6:	df 91       	pop	r29
     2a8:	08 95       	ret

000002aa <usbResetStall>:

static inline void  usbResetStall(void)
{
     2aa:	df 93       	push	r29
     2ac:	cf 93       	push	r28
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
        usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
        usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     2b2:	cf 91       	pop	r28
     2b4:	df 91       	pop	r29
     2b6:	08 95       	ret

000002b8 <usbGenericSetInterrupt>:
/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
{
     2b8:	df 93       	push	r29
     2ba:	cf 93       	push	r28
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	28 97       	sbiw	r28, 0x08	; 8
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	cd bf       	out	0x3d, r28	; 61
     2cc:	9d 83       	std	Y+5, r25	; 0x05
     2ce:	8c 83       	std	Y+4, r24	; 0x04
     2d0:	6e 83       	std	Y+6, r22	; 0x06
     2d2:	58 87       	std	Y+8, r21	; 0x08
     2d4:	4f 83       	std	Y+7, r20	; 0x07

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     2d6:	8f 81       	ldd	r24, Y+7	; 0x07
     2d8:	98 85       	ldd	r25, Y+8	; 0x08
     2da:	fc 01       	movw	r30, r24
     2dc:	80 81       	ld	r24, Z
     2de:	88 2f       	mov	r24, r24
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	80 71       	andi	r24, 0x10	; 16
     2e4:	90 70       	andi	r25, 0x00	; 0
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	61 f0       	breq	.+24     	; 0x302 <usbGenericSetInterrupt+0x4a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     2ea:	8f 81       	ldd	r24, Y+7	; 0x07
     2ec:	98 85       	ldd	r25, Y+8	; 0x08
     2ee:	fc 01       	movw	r30, r24
     2f0:	91 81       	ldd	r25, Z+1	; 0x01
     2f2:	88 e8       	ldi	r24, 0x88	; 136
     2f4:	29 2f       	mov	r18, r25
     2f6:	28 27       	eor	r18, r24
     2f8:	8f 81       	ldd	r24, Y+7	; 0x07
     2fa:	98 85       	ldd	r25, Y+8	; 0x08
     2fc:	fc 01       	movw	r30, r24
     2fe:	21 83       	std	Z+1, r18	; 0x01
     300:	05 c0       	rjmp	.+10     	; 0x30c <usbGenericSetInterrupt+0x54>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     302:	8f 81       	ldd	r24, Y+7	; 0x07
     304:	98 85       	ldd	r25, Y+8	; 0x08
     306:	2a e5       	ldi	r18, 0x5A	; 90
     308:	fc 01       	movw	r30, r24
     30a:	20 83       	st	Z, r18
    }
    p = txStatus->buffer + 1;
     30c:	8f 81       	ldd	r24, Y+7	; 0x07
     30e:	98 85       	ldd	r25, Y+8	; 0x08
     310:	02 96       	adiw	r24, 0x02	; 2
     312:	9a 83       	std	Y+2, r25	; 0x02
     314:	89 83       	std	Y+1, r24	; 0x01
    i = len;
     316:	8e 81       	ldd	r24, Y+6	; 0x06
     318:	8b 83       	std	Y+3, r24	; 0x03
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     31a:	8c 81       	ldd	r24, Y+4	; 0x04
     31c:	9d 81       	ldd	r25, Y+5	; 0x05
     31e:	fc 01       	movw	r30, r24
     320:	20 81       	ld	r18, Z
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	9a 81       	ldd	r25, Y+2	; 0x02
     326:	fc 01       	movw	r30, r24
     328:	20 83       	st	Z, r18
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	9a 83       	std	Y+2, r25	; 0x02
     332:	89 83       	std	Y+1, r24	; 0x01
     334:	8c 81       	ldd	r24, Y+4	; 0x04
     336:	9d 81       	ldd	r25, Y+5	; 0x05
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	9d 83       	std	Y+5, r25	; 0x05
     33c:	8c 83       	std	Y+4, r24	; 0x04
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     33e:	8b 81       	ldd	r24, Y+3	; 0x03
     340:	81 50       	subi	r24, 0x01	; 1
     342:	8b 83       	std	Y+3, r24	; 0x03
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	88 23       	and	r24, r24
     348:	41 f7       	brne	.-48     	; 0x31a <usbGenericSetInterrupt+0x62>
    usbCrc16Append(&txStatus->buffer[1], len);
     34a:	8f 81       	ldd	r24, Y+7	; 0x07
     34c:	98 85       	ldd	r25, Y+8	; 0x08
     34e:	02 96       	adiw	r24, 0x02	; 2
     350:	6e 81       	ldd	r22, Y+6	; 0x06
     352:	0e 94 73 04 	call	0x8e6	; 0x8e6 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     356:	8e 81       	ldd	r24, Y+6	; 0x06
     358:	28 2f       	mov	r18, r24
     35a:	2c 5f       	subi	r18, 0xFC	; 252
     35c:	8f 81       	ldd	r24, Y+7	; 0x07
     35e:	98 85       	ldd	r25, Y+8	; 0x08
     360:	fc 01       	movw	r30, r24
     362:	20 83       	st	Z, r18
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}
     364:	28 96       	adiw	r28, 0x08	; 8
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	cf 91       	pop	r28
     372:	df 91       	pop	r29
     374:	08 95       	ret

00000376 <usbSetInterrupt>:

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     376:	df 93       	push	r29
     378:	cf 93       	push	r28
     37a:	00 d0       	rcall	.+0      	; 0x37c <usbSetInterrupt+0x6>
     37c:	0f 92       	push	r0
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	9a 83       	std	Y+2, r25	; 0x02
     384:	89 83       	std	Y+1, r24	; 0x01
     386:	6b 83       	std	Y+3, r22	; 0x03
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	9a 81       	ldd	r25, Y+2	; 0x02
     38c:	27 ed       	ldi	r18, 0xD7	; 215
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	6b 81       	ldd	r22, Y+3	; 0x03
     392:	a9 01       	movw	r20, r18
     394:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <usbGenericSetInterrupt>
}
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	cf 91       	pop	r28
     3a0:	df 91       	pop	r29
     3a2:	08 95       	ret

000003a4 <usbDriverDescriptor>:

/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
     3a4:	df 93       	push	r29
     3a6:	cf 93       	push	r28
     3a8:	00 d0       	rcall	.+0      	; 0x3aa <usbDriverDescriptor+0x6>
     3aa:	00 d0       	rcall	.+0      	; 0x3ac <usbDriverDescriptor+0x8>
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <usbDriverDescriptor+0xa>
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	9e 83       	std	Y+6, r25	; 0x06
     3b4:	8d 83       	std	Y+5, r24	; 0x05
usbMsgLen_t len = 0;
     3b6:	19 82       	std	Y+1, r1	; 0x01
uchar       flags = USB_FLG_MSGPTR_IS_ROM;
     3b8:	80 e4       	ldi	r24, 0x40	; 64
     3ba:	8a 83       	std	Y+2, r24	; 0x02

    SWITCH_START(rq->wValue.bytes[1])
     3bc:	8d 81       	ldd	r24, Y+5	; 0x05
     3be:	9e 81       	ldd	r25, Y+6	; 0x06
     3c0:	fc 01       	movw	r30, r24
     3c2:	83 81       	ldd	r24, Z+3	; 0x03
     3c4:	8b 83       	std	Y+3, r24	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     3c6:	8b 81       	ldd	r24, Y+3	; 0x03
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	49 f4       	brne	.+18     	; 0x3de <usbDriverDescriptor+0x3a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     3cc:	82 e1       	ldi	r24, 0x12	; 18
     3ce:	89 83       	std	Y+1, r24	; 0x01
     3d0:	88 e8       	ldi	r24, 0x88	; 136
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	90 93 e7 00 	sts	0x00E7, r25
     3d8:	80 93 e6 00 	sts	0x00E6, r24
     3dc:	4f c0       	rjmp	.+158    	; 0x47c <__stack+0x1d>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     3de:	8b 81       	ldd	r24, Y+3	; 0x03
     3e0:	82 30       	cpi	r24, 0x02	; 2
     3e2:	49 f4       	brne	.+18     	; 0x3f6 <usbDriverDescriptor+0x52>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     3e4:	82 e2       	ldi	r24, 0x22	; 34
     3e6:	89 83       	std	Y+1, r24	; 0x01
     3e8:	8a e9       	ldi	r24, 0x9A	; 154
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	90 93 e7 00 	sts	0x00E7, r25
     3f0:	80 93 e6 00 	sts	0x00E6, r24
     3f4:	43 c0       	rjmp	.+134    	; 0x47c <__stack+0x1d>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     3f6:	8b 81       	ldd	r24, Y+3	; 0x03
     3f8:	83 30       	cpi	r24, 0x03	; 3
     3fa:	49 f5       	brne	.+82     	; 0x44e <usbDriverDescriptor+0xaa>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     3fc:	8d 81       	ldd	r24, Y+5	; 0x05
     3fe:	9e 81       	ldd	r25, Y+6	; 0x06
     400:	fc 01       	movw	r30, r24
     402:	82 81       	ldd	r24, Z+2	; 0x02
     404:	8c 83       	std	Y+4, r24	; 0x04
        SWITCH_CASE(0)
     406:	8c 81       	ldd	r24, Y+4	; 0x04
     408:	88 23       	and	r24, r24
     40a:	49 f4       	brne	.+18     	; 0x41e <usbDriverDescriptor+0x7a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     40c:	84 e0       	ldi	r24, 0x04	; 4
     40e:	89 83       	std	Y+1, r24	; 0x01
     410:	84 e5       	ldi	r24, 0x54	; 84
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	90 93 e7 00 	sts	0x00E7, r25
     418:	80 93 e6 00 	sts	0x00E6, r24
     41c:	2f c0       	rjmp	.+94     	; 0x47c <__stack+0x1d>
        SWITCH_CASE(1)
     41e:	8c 81       	ldd	r24, Y+4	; 0x04
     420:	81 30       	cpi	r24, 0x01	; 1
     422:	49 f4       	brne	.+18     	; 0x436 <usbDriverDescriptor+0x92>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     424:	80 e2       	ldi	r24, 0x20	; 32
     426:	89 83       	std	Y+1, r24	; 0x01
     428:	88 e5       	ldi	r24, 0x58	; 88
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	90 93 e7 00 	sts	0x00E7, r25
     430:	80 93 e6 00 	sts	0x00E6, r24
     434:	23 c0       	rjmp	.+70     	; 0x47c <__stack+0x1d>
        SWITCH_CASE(2)
     436:	8c 81       	ldd	r24, Y+4	; 0x04
     438:	82 30       	cpi	r24, 0x02	; 2
     43a:	01 f5       	brne	.+64     	; 0x47c <__stack+0x1d>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     43c:	80 e1       	ldi	r24, 0x10	; 16
     43e:	89 83       	std	Y+1, r24	; 0x01
     440:	88 e7       	ldi	r24, 0x78	; 120
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 e7 00 	sts	0x00E7, r25
     448:	80 93 e6 00 	sts	0x00E6, r24
     44c:	17 c0       	rjmp	.+46     	; 0x47c <__stack+0x1d>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
     44e:	8b 81       	ldd	r24, Y+3	; 0x03
     450:	81 32       	cpi	r24, 0x21	; 33
     452:	49 f4       	brne	.+18     	; 0x466 <__stack+0x7>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     454:	89 e0       	ldi	r24, 0x09	; 9
     456:	89 83       	std	Y+1, r24	; 0x01
     458:	8c ea       	ldi	r24, 0xAC	; 172
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	90 93 e7 00 	sts	0x00E7, r25
     460:	80 93 e6 00 	sts	0x00E6, r24
     464:	0b c0       	rjmp	.+22     	; 0x47c <__stack+0x1d>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
     466:	8b 81       	ldd	r24, Y+3	; 0x03
     468:	82 32       	cpi	r24, 0x22	; 34
     46a:	41 f4       	brne	.+16     	; 0x47c <__stack+0x1d>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     46c:	8f e3       	ldi	r24, 0x3F	; 63
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	8c eb       	ldi	r24, 0xBC	; 188
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	90 93 e7 00 	sts	0x00E7, r25
     478:	80 93 e6 00 	sts	0x00E6, r24
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	80 93 9c 00 	sts	0x009C, r24
    return len;
     482:	89 81       	ldd	r24, Y+1	; 0x01
}
     484:	26 96       	adiw	r28, 0x06	; 6
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	cf 91       	pop	r28
     492:	df 91       	pop	r29
     494:	08 95       	ret

00000496 <usbDriverSetup>:

/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
     496:	df 93       	push	r29
     498:	cf 93       	push	r28
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	28 97       	sbiw	r28, 0x08	; 8
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	98 87       	std	Y+8, r25	; 0x08
     4ac:	8f 83       	std	Y+7, r24	; 0x07
usbMsgLen_t len = 0;
     4ae:	19 82       	std	Y+1, r1	; 0x01
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     4b0:	85 ed       	ldi	r24, 0xD5	; 213
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	9b 83       	std	Y+3, r25	; 0x03
     4b6:	8a 83       	std	Y+2, r24	; 0x02
uchar   value = rq->wValue.bytes[0];
     4b8:	8f 81       	ldd	r24, Y+7	; 0x07
     4ba:	98 85       	ldd	r25, Y+8	; 0x08
     4bc:	fc 01       	movw	r30, r24
     4be:	82 81       	ldd	r24, Z+2	; 0x02
     4c0:	8c 83       	std	Y+4, r24	; 0x04
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     4c2:	8a 81       	ldd	r24, Y+2	; 0x02
     4c4:	9b 81       	ldd	r25, Y+3	; 0x03
     4c6:	fc 01       	movw	r30, r24
     4c8:	10 82       	st	Z, r1
    SWITCH_START(rq->bRequest)
     4ca:	8f 81       	ldd	r24, Y+7	; 0x07
     4cc:	98 85       	ldd	r25, Y+8	; 0x08
     4ce:	fc 01       	movw	r30, r24
     4d0:	81 81       	ldd	r24, Z+1	; 0x01
     4d2:	8d 83       	std	Y+5, r24	; 0x05
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     4d4:	8d 81       	ldd	r24, Y+5	; 0x05
     4d6:	88 23       	and	r24, r24
     4d8:	71 f4       	brne	.+28     	; 0x4f6 <usbDriverSetup+0x60>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
     4da:	8f 81       	ldd	r24, Y+7	; 0x07
     4dc:	98 85       	ldd	r25, Y+8	; 0x08
     4de:	fc 01       	movw	r30, r24
     4e0:	80 81       	ld	r24, Z
     4e2:	8f 71       	andi	r24, 0x1F	; 31
     4e4:	8e 83       	std	Y+6, r24	; 0x06
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
     4e6:	8a 81       	ldd	r24, Y+2	; 0x02
     4e8:	9b 81       	ldd	r25, Y+3	; 0x03
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	fc 01       	movw	r30, r24
     4ee:	10 82       	st	Z, r1
        len = 2;
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	89 83       	std	Y+1, r24	; 0x01
     4f4:	30 c0       	rjmp	.+96     	; 0x556 <usbDriverSetup+0xc0>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     4f6:	8d 81       	ldd	r24, Y+5	; 0x05
     4f8:	85 30       	cpi	r24, 0x05	; 5
     4fa:	21 f4       	brne	.+8      	; 0x504 <usbDriverSetup+0x6e>
        usbNewDeviceAddr = value;
     4fc:	8c 81       	ldd	r24, Y+4	; 0x04
     4fe:	80 93 e9 00 	sts	0x00E9, r24
     502:	29 c0       	rjmp	.+82     	; 0x556 <usbDriverSetup+0xc0>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     504:	8d 81       	ldd	r24, Y+5	; 0x05
     506:	86 30       	cpi	r24, 0x06	; 6
     508:	31 f4       	brne	.+12     	; 0x516 <usbDriverSetup+0x80>
        len = usbDriverDescriptor(rq);
     50a:	8f 81       	ldd	r24, Y+7	; 0x07
     50c:	98 85       	ldd	r25, Y+8	; 0x08
     50e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <usbDriverDescriptor>
     512:	89 83       	std	Y+1, r24	; 0x01
        goto skipMsgPtrAssignment;
     514:	26 c0       	rjmp	.+76     	; 0x562 <usbDriverSetup+0xcc>
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     516:	8d 81       	ldd	r24, Y+5	; 0x05
     518:	88 30       	cpi	r24, 0x08	; 8
     51a:	39 f4       	brne	.+14     	; 0x52a <usbDriverSetup+0x94>
        dataPtr = &usbConfiguration;  /* send current configuration value */
     51c:	8b ee       	ldi	r24, 0xEB	; 235
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	9b 83       	std	Y+3, r25	; 0x03
     522:	8a 83       	std	Y+2, r24	; 0x02
        len = 1;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	16 c0       	rjmp	.+44     	; 0x556 <usbDriverSetup+0xc0>
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     52a:	8d 81       	ldd	r24, Y+5	; 0x05
     52c:	89 30       	cpi	r24, 0x09	; 9
     52e:	31 f4       	brne	.+12     	; 0x53c <usbDriverSetup+0xa6>
        usbConfiguration = value;
     530:	8c 81       	ldd	r24, Y+4	; 0x04
     532:	80 93 eb 00 	sts	0x00EB, r24
        usbResetStall();
     536:	0e 94 55 01 	call	0x2aa	; 0x2aa <usbResetStall>
     53a:	0d c0       	rjmp	.+26     	; 0x556 <usbDriverSetup+0xc0>
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     53c:	8d 81       	ldd	r24, Y+5	; 0x05
     53e:	8a 30       	cpi	r24, 0x0A	; 10
     540:	19 f4       	brne	.+6      	; 0x548 <usbDriverSetup+0xb2>
        len = 1;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	07 c0       	rjmp	.+14     	; 0x556 <usbDriverSetup+0xc0>
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     548:	8d 81       	ldd	r24, Y+5	; 0x05
     54a:	8b 30       	cpi	r24, 0x0B	; 11
     54c:	21 f4       	brne	.+8      	; 0x556 <usbDriverSetup+0xc0>
        usbResetDataToggling();
     54e:	0e 94 4b 01 	call	0x296	; 0x296 <usbResetDataToggling>
        usbResetStall();
     552:	0e 94 55 01 	call	0x2aa	; 0x2aa <usbResetStall>
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
     556:	8a 81       	ldd	r24, Y+2	; 0x02
     558:	9b 81       	ldd	r25, Y+3	; 0x03
     55a:	90 93 e7 00 	sts	0x00E7, r25
     55e:	80 93 e6 00 	sts	0x00E6, r24
skipMsgPtrAssignment:
    return len;
     562:	89 81       	ldd	r24, Y+1	; 0x01
}
     564:	28 96       	adiw	r28, 0x08	; 8
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	cf 91       	pop	r28
     572:	df 91       	pop	r29
     574:	08 95       	ret

00000576 <usbProcessRx>:
/* usbProcessRx() is called for every message received by the interrupt
 * routine. It distinguishes between SETUP and DATA packets and processes
 * them accordingly.
 */
static inline void usbProcessRx(uchar *data, uchar len)
{
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	28 97       	sbiw	r28, 0x08	; 8
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	9f 83       	std	Y+7, r25	; 0x07
     58c:	8e 83       	std	Y+6, r24	; 0x06
     58e:	68 87       	std	Y+8, r22	; 0x08
usbRequest_t    *rq = (void *)data;
     590:	8e 81       	ldd	r24, Y+6	; 0x06
     592:	9f 81       	ldd	r25, Y+7	; 0x07
     594:	9b 83       	std	Y+3, r25	; 0x03
     596:	8a 83       	std	Y+2, r24	; 0x02
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     598:	80 91 e4 00 	lds	r24, 0x00E4
     59c:	8d 32       	cpi	r24, 0x2D	; 45
     59e:	09 f0       	breq	.+2      	; 0x5a2 <usbProcessRx+0x2c>
     5a0:	48 c0       	rjmp	.+144    	; 0x632 <usbProcessRx+0xbc>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     5a2:	88 85       	ldd	r24, Y+8	; 0x08
     5a4:	88 30       	cpi	r24, 0x08	; 8
     5a6:	09 f0       	breq	.+2      	; 0x5aa <usbProcessRx+0x34>
     5a8:	5b c0       	rjmp	.+182    	; 0x660 <usbProcessRx+0xea>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     5aa:	83 ec       	ldi	r24, 0xC3	; 195
     5ac:	80 93 cc 00 	sts	0x00CC, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     5b0:	8a e5       	ldi	r24, 0x5A	; 90
     5b2:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
     5b6:	10 92 9c 00 	sts	0x009C, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
     5ba:	8a 81       	ldd	r24, Y+2	; 0x02
     5bc:	9b 81       	ldd	r25, Y+3	; 0x03
     5be:	fc 01       	movw	r30, r24
     5c0:	80 81       	ld	r24, Z
     5c2:	80 76       	andi	r24, 0x60	; 96
     5c4:	8c 83       	std	Y+4, r24	; 0x04
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     5c6:	8c 81       	ldd	r24, Y+4	; 0x04
     5c8:	88 23       	and	r24, r24
     5ca:	31 f0       	breq	.+12     	; 0x5d8 <usbProcessRx+0x62>
            replyLen = usbFunctionSetup(data);
     5cc:	8e 81       	ldd	r24, Y+6	; 0x06
     5ce:	9f 81       	ldd	r25, Y+7	; 0x07
     5d0:	0e 94 b9 08 	call	0x1172	; 0x1172 <usbFunctionSetup>
     5d4:	89 83       	std	Y+1, r24	; 0x01
     5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <usbProcessRx+0x6c>
        }else{
            replyLen = usbDriverSetup(rq);
     5d8:	8a 81       	ldd	r24, Y+2	; 0x02
     5da:	9b 81       	ldd	r25, Y+3	; 0x03
     5dc:	0e 94 4b 02 	call	0x496	; 0x496 <usbDriverSetup>
     5e0:	89 83       	std	Y+1, r24	; 0x01
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	8f 3f       	cpi	r24, 0xFF	; 255
     5e6:	79 f4       	brne	.+30     	; 0x606 <usbProcessRx+0x90>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     5e8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ea:	9b 81       	ldd	r25, Y+3	; 0x03
     5ec:	fc 01       	movw	r30, r24
     5ee:	80 81       	ld	r24, Z
     5f0:	88 23       	and	r24, r24
     5f2:	2c f4       	brge	.+10     	; 0x5fe <usbProcessRx+0x88>
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     5f4:	8a 81       	ldd	r24, Y+2	; 0x02
     5f6:	9b 81       	ldd	r25, Y+3	; 0x03
     5f8:	fc 01       	movw	r30, r24
     5fa:	86 81       	ldd	r24, Z+6	; 0x06
     5fc:	89 83       	std	Y+1, r24	; 0x01
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     5fe:	80 e8       	ldi	r24, 0x80	; 128
     600:	80 93 9c 00 	sts	0x009C, r24
     604:	12 c0       	rjmp	.+36     	; 0x62a <usbProcessRx+0xb4>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     606:	8a 81       	ldd	r24, Y+2	; 0x02
     608:	9b 81       	ldd	r25, Y+3	; 0x03
     60a:	fc 01       	movw	r30, r24
     60c:	87 81       	ldd	r24, Z+7	; 0x07
     60e:	88 23       	and	r24, r24
     610:	61 f4       	brne	.+24     	; 0x62a <usbProcessRx+0xb4>
     612:	8a 81       	ldd	r24, Y+2	; 0x02
     614:	9b 81       	ldd	r25, Y+3	; 0x03
     616:	fc 01       	movw	r30, r24
     618:	96 81       	ldd	r25, Z+6	; 0x06
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	98 17       	cp	r25, r24
     61e:	28 f4       	brcc	.+10     	; 0x62a <usbProcessRx+0xb4>
                replyLen = rq->wLength.bytes[0];
     620:	8a 81       	ldd	r24, Y+2	; 0x02
     622:	9b 81       	ldd	r25, Y+3	; 0x03
     624:	fc 01       	movw	r30, r24
     626:	86 81       	ldd	r24, Z+6	; 0x06
     628:	89 83       	std	Y+1, r24	; 0x01
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	80 93 61 00 	sts	0x0061, r24
     630:	18 c0       	rjmp	.+48     	; 0x662 <usbProcessRx+0xec>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     632:	80 91 9c 00 	lds	r24, 0x009C
     636:	88 23       	and	r24, r24
     638:	a4 f4       	brge	.+40     	; 0x662 <usbProcessRx+0xec>
            uchar rval = usbFunctionWrite(data, len);
     63a:	8e 81       	ldd	r24, Y+6	; 0x06
     63c:	9f 81       	ldd	r25, Y+7	; 0x07
     63e:	68 85       	ldd	r22, Y+8	; 0x08
     640:	0e 94 18 09 	call	0x1230	; 0x1230 <usbFunctionWrite>
     644:	8d 83       	std	Y+5, r24	; 0x05
            if(rval == 0xff){   /* an error occurred */
     646:	8d 81       	ldd	r24, Y+5	; 0x05
     648:	8f 3f       	cpi	r24, 0xFF	; 255
     64a:	21 f4       	brne	.+8      	; 0x654 <usbProcessRx+0xde>
                usbTxLen = USBPID_STALL;
     64c:	8e e1       	ldi	r24, 0x1E	; 30
     64e:	80 93 60 00 	sts	0x0060, r24
     652:	07 c0       	rjmp	.+14     	; 0x662 <usbProcessRx+0xec>
            }else if(rval != 0){    /* This was the final package */
     654:	8d 81       	ldd	r24, Y+5	; 0x05
     656:	88 23       	and	r24, r24
     658:	21 f0       	breq	.+8      	; 0x662 <usbProcessRx+0xec>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     65a:	10 92 61 00 	sts	0x0061, r1
     65e:	01 c0       	rjmp	.+2      	; 0x662 <usbProcessRx+0xec>
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
     660:	00 00       	nop
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
            }
        }
#endif
    }
}
     662:	28 96       	adiw	r28, 0x08	; 8
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	cf 91       	pop	r28
     670:	df 91       	pop	r29
     672:	08 95       	ret

00000674 <usbDeviceRead>:

/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
     674:	1f 93       	push	r17
     676:	df 93       	push	r29
     678:	cf 93       	push	r28
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	2a 97       	sbiw	r28, 0x0a	; 10
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	f8 94       	cli
     684:	de bf       	out	0x3e, r29	; 62
     686:	0f be       	out	0x3f, r0	; 63
     688:	cd bf       	out	0x3d, r28	; 61
     68a:	99 87       	std	Y+9, r25	; 0x09
     68c:	88 87       	std	Y+8, r24	; 0x08
     68e:	6a 87       	std	Y+10, r22	; 0x0a
    if(len > 0){    /* don't bother app with 0 sized reads */
     690:	8a 85       	ldd	r24, Y+10	; 0x0a
     692:	88 23       	and	r24, r24
     694:	09 f4       	brne	.+2      	; 0x698 <usbDeviceRead+0x24>
     696:	4f c0       	rjmp	.+158    	; 0x736 <usbDeviceRead+0xc2>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
     698:	8a 85       	ldd	r24, Y+10	; 0x0a
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	80 91 e6 00 	lds	r24, 0x00E6
     6a0:	90 91 e7 00 	lds	r25, 0x00E7
     6a4:	9b 83       	std	Y+3, r25	; 0x03
     6a6:	8a 83       	std	Y+2, r24	; 0x02
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     6a8:	80 91 9c 00 	lds	r24, 0x009C
     6ac:	88 2f       	mov	r24, r24
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	80 74       	andi	r24, 0x40	; 64
     6b2:	90 70       	andi	r25, 0x00	; 0
     6b4:	00 97       	sbiw	r24, 0x00	; 0
     6b6:	09 f1       	breq	.+66     	; 0x6fa <usbDeviceRead+0x86>
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     6b8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ba:	9b 81       	ldd	r25, Y+3	; 0x03
     6bc:	9d 83       	std	Y+5, r25	; 0x05
     6be:	8c 83       	std	Y+4, r24	; 0x04
     6c0:	8c 81       	ldd	r24, Y+4	; 0x04
     6c2:	9d 81       	ldd	r25, Y+5	; 0x05
     6c4:	fc 01       	movw	r30, r24
     6c6:	14 91       	lpm	r17, Z+
     6c8:	1e 83       	std	Y+6, r17	; 0x06
     6ca:	8e 81       	ldd	r24, Y+6	; 0x06
     6cc:	8f 83       	std	Y+7, r24	; 0x07
                    *data++ = c;
     6ce:	88 85       	ldd	r24, Y+8	; 0x08
     6d0:	99 85       	ldd	r25, Y+9	; 0x09
     6d2:	2f 81       	ldd	r18, Y+7	; 0x07
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
     6d8:	88 85       	ldd	r24, Y+8	; 0x08
     6da:	99 85       	ldd	r25, Y+9	; 0x09
     6dc:	01 96       	adiw	r24, 0x01	; 1
     6de:	99 87       	std	Y+9, r25	; 0x09
     6e0:	88 87       	std	Y+8, r24	; 0x08
                    r++;
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	9b 81       	ldd	r25, Y+3	; 0x03
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	9b 83       	std	Y+3, r25	; 0x03
     6ea:	8a 83       	std	Y+2, r24	; 0x02
                }while(--i);
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	81 50       	subi	r24, 0x01	; 1
     6f0:	89 83       	std	Y+1, r24	; 0x01
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	88 23       	and	r24, r24
     6f6:	01 f7       	brne	.-64     	; 0x6b8 <usbDeviceRead+0x44>
     6f8:	18 c0       	rjmp	.+48     	; 0x72a <usbDeviceRead+0xb6>
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
     6fa:	8a 81       	ldd	r24, Y+2	; 0x02
     6fc:	9b 81       	ldd	r25, Y+3	; 0x03
     6fe:	fc 01       	movw	r30, r24
     700:	20 81       	ld	r18, Z
     702:	88 85       	ldd	r24, Y+8	; 0x08
     704:	99 85       	ldd	r25, Y+9	; 0x09
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18
     70a:	88 85       	ldd	r24, Y+8	; 0x08
     70c:	99 85       	ldd	r25, Y+9	; 0x09
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	99 87       	std	Y+9, r25	; 0x09
     712:	88 87       	std	Y+8, r24	; 0x08
     714:	8a 81       	ldd	r24, Y+2	; 0x02
     716:	9b 81       	ldd	r25, Y+3	; 0x03
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	9b 83       	std	Y+3, r25	; 0x03
     71c:	8a 83       	std	Y+2, r24	; 0x02
                }while(--i);
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	81 50       	subi	r24, 0x01	; 1
     722:	89 83       	std	Y+1, r24	; 0x01
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	88 23       	and	r24, r24
     728:	41 f7       	brne	.-48     	; 0x6fa <usbDeviceRead+0x86>
            }
            usbMsgPtr = r;
     72a:	8a 81       	ldd	r24, Y+2	; 0x02
     72c:	9b 81       	ldd	r25, Y+3	; 0x03
     72e:	90 93 e7 00 	sts	0x00E7, r25
     732:	80 93 e6 00 	sts	0x00E6, r24
        }
    }
    return len;
     736:	8a 85       	ldd	r24, Y+10	; 0x0a
}
     738:	2a 96       	adiw	r28, 0x0a	; 10
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	cf 91       	pop	r28
     746:	df 91       	pop	r29
     748:	1f 91       	pop	r17
     74a:	08 95       	ret

0000074c <usbBuildTxBlock>:

/* usbBuildTxBlock() is called when we have data to transmit and the
 * interrupt routine's transmit buffer is empty.
 */
static inline void usbBuildTxBlock(void)
{
     74c:	df 93       	push	r29
     74e:	cf 93       	push	r28
     750:	00 d0       	rcall	.+0      	; 0x752 <usbBuildTxBlock+0x6>
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
     756:	80 91 61 00 	lds	r24, 0x0061
     75a:	89 83       	std	Y+1, r24	; 0x01
    if(wantLen > 8)
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	89 30       	cpi	r24, 0x09	; 9
     760:	10 f0       	brcs	.+4      	; 0x766 <usbBuildTxBlock+0x1a>
        wantLen = 8;
     762:	88 e0       	ldi	r24, 0x08	; 8
     764:	89 83       	std	Y+1, r24	; 0x01
    usbMsgLen -= wantLen;
     766:	90 91 61 00 	lds	r25, 0x0061
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	29 2f       	mov	r18, r25
     76e:	28 1b       	sub	r18, r24
     770:	82 2f       	mov	r24, r18
     772:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     776:	90 91 cc 00 	lds	r25, 0x00CC
     77a:	88 e8       	ldi	r24, 0x88	; 136
     77c:	89 27       	eor	r24, r25
     77e:	80 93 cc 00 	sts	0x00CC, r24
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
     782:	8d ec       	ldi	r24, 0xCD	; 205
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	69 81       	ldd	r22, Y+1	; 0x01
     788:	0e 94 3a 03 	call	0x674	; 0x674 <usbDeviceRead>
     78c:	8a 83       	std	Y+2, r24	; 0x02
    if(len <= 8){           /* valid data packet */
     78e:	8a 81       	ldd	r24, Y+2	; 0x02
     790:	89 30       	cpi	r24, 0x09	; 9
     792:	78 f4       	brcc	.+30     	; 0x7b2 <usbBuildTxBlock+0x66>
        usbCrc16Append(&usbTxBuf[1], len);
     794:	8d ec       	ldi	r24, 0xCD	; 205
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	6a 81       	ldd	r22, Y+2	; 0x02
     79a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     79e:	8a 81       	ldd	r24, Y+2	; 0x02
     7a0:	8c 5f       	subi	r24, 0xFC	; 252
     7a2:	8a 83       	std	Y+2, r24	; 0x02
        if(len < 12)        /* a partial package identifies end of message */
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
     7a6:	8c 30       	cpi	r24, 0x0C	; 12
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <usbBuildTxBlock+0x70>
            usbMsgLen = USB_NO_MSG;
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	80 93 61 00 	sts	0x0061, r24
     7b0:	05 c0       	rjmp	.+10     	; 0x7bc <usbBuildTxBlock+0x70>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
     7b2:	8e e1       	ldi	r24, 0x1E	; 30
     7b4:	8a 83       	std	Y+2, r24	; 0x02
        usbMsgLen = USB_NO_MSG;
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	80 93 61 00 	sts	0x0061, r24
    }
    usbTxLen = len;
     7bc:	8a 81       	ldd	r24, Y+2	; 0x02
     7be:	80 93 60 00 	sts	0x0060, r24
    DBG2(0x20, usbTxBuf, len-1);
}
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	08 95       	ret

000007cc <usbHandleResetHook>:

/* ------------------------------------------------------------------------- */

static inline void usbHandleResetHook(uchar notResetState)
{
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	0f 92       	push	r0
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	89 83       	std	Y+1, r24	; 0x01
        wasReset = isReset;
    }
#else
    notResetState = notResetState;  // avoid compiler warning
#endif
}
     7d8:	0f 90       	pop	r0
     7da:	cf 91       	pop	r28
     7dc:	df 91       	pop	r29
     7de:	08 95       	ret

000007e0 <usbPoll>:

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     7e0:	df 93       	push	r29
     7e2:	cf 93       	push	r28
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <usbPoll+0x6>
     7e6:	0f 92       	push	r0
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
schar   len;
uchar   i;

    len = usbRxLen - 3;
     7ec:	80 91 e8 00 	lds	r24, 0x00E8
     7f0:	83 50       	subi	r24, 0x03	; 3
     7f2:	8a 83       	std	Y+2, r24	; 0x02
    if(len >= 0){
     7f4:	8a 81       	ldd	r24, Y+2	; 0x02
     7f6:	88 23       	and	r24, r24
     7f8:	94 f0       	brlt	.+36     	; 0x81e <usbPoll+0x3e>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     7fa:	80 91 e5 00 	lds	r24, 0x00E5
     7fe:	88 2f       	mov	r24, r24
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	2c e0       	ldi	r18, 0x0C	; 12
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	a9 01       	movw	r20, r18
     808:	48 1b       	sub	r20, r24
     80a:	59 0b       	sbc	r21, r25
     80c:	ca 01       	movw	r24, r20
     80e:	84 51       	subi	r24, 0x14	; 20
     810:	9f 4f       	sbci	r25, 0xFF	; 255
     812:	2a 81       	ldd	r18, Y+2	; 0x02
     814:	62 2f       	mov	r22, r18
     816:	0e 94 bb 02 	call	0x576	; 0x576 <usbProcessRx>
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     81a:	10 92 e8 00 	sts	0x00E8, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     81e:	80 91 60 00 	lds	r24, 0x0060
     822:	88 2f       	mov	r24, r24
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	80 71       	andi	r24, 0x10	; 16
     828:	90 70       	andi	r25, 0x00	; 0
     82a:	00 97       	sbiw	r24, 0x00	; 0
     82c:	31 f0       	breq	.+12     	; 0x83a <usbPoll+0x5a>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     82e:	80 91 61 00 	lds	r24, 0x0061
     832:	8f 3f       	cpi	r24, 0xFF	; 255
     834:	11 f0       	breq	.+4      	; 0x83a <usbPoll+0x5a>
            usbBuildTxBlock();
     836:	0e 94 a6 03 	call	0x74c	; 0x74c <usbBuildTxBlock>
        }
    }
    for(i = 20; i > 0; i--){
     83a:	84 e1       	ldi	r24, 0x14	; 20
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	0c c0       	rjmp	.+24     	; 0x858 <usbPoll+0x78>
        uchar usbLineStatus = USBIN & USBMASK;
     840:	80 e3       	ldi	r24, 0x30	; 48
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	fc 01       	movw	r30, r24
     846:	80 81       	ld	r24, Z
     848:	8c 70       	andi	r24, 0x0C	; 12
     84a:	8b 83       	std	Y+3, r24	; 0x03
        if(usbLineStatus != 0)  /* SE0 has ended */
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	88 23       	and	r24, r24
     850:	69 f4       	brne	.+26     	; 0x86c <usbPoll+0x8c>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	81 50       	subi	r24, 0x01	; 1
     856:	89 83       	std	Y+1, r24	; 0x01
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	88 23       	and	r24, r24
     85c:	89 f7       	brne	.-30     	; 0x840 <usbPoll+0x60>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     85e:	10 92 e9 00 	sts	0x00E9, r1
    usbDeviceAddr = 0;
     862:	10 92 e3 00 	sts	0x00E3, r1
    usbResetStall();
     866:	0e 94 55 01 	call	0x2aa	; 0x2aa <usbResetStall>
     86a:	01 c0       	rjmp	.+2      	; 0x86e <usbPoll+0x8e>
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
     86c:	00 00       	nop
    usbNewDeviceAddr = 0;
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	0e 94 e6 03 	call	0x7cc	; 0x7cc <usbHandleResetHook>
}
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	cf 91       	pop	r28
     87c:	df 91       	pop	r29
     87e:	08 95       	ret

00000880 <usbInit>:

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
     880:	df 93       	push	r29
     882:	cf 93       	push	r28
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     888:	85 e5       	ldi	r24, 0x55	; 85
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	25 e5       	ldi	r18, 0x55	; 85
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	f9 01       	movw	r30, r18
     892:	20 81       	ld	r18, Z
     894:	22 60       	ori	r18, 0x02	; 2
     896:	fc 01       	movw	r30, r24
     898:	20 83       	st	Z, r18
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     89a:	8b e5       	ldi	r24, 0x5B	; 91
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	2b e5       	ldi	r18, 0x5B	; 91
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	f9 01       	movw	r30, r18
     8a4:	20 81       	ld	r18, Z
     8a6:	20 64       	ori	r18, 0x40	; 64
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
    usbResetDataToggling();
     8ac:	0e 94 4b 01 	call	0x296	; 0x296 <usbResetDataToggling>
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
     8b0:	8a e5       	ldi	r24, 0x5A	; 90
     8b2:	80 93 d7 00 	sts	0x00D7, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     8b6:	cf 91       	pop	r28
     8b8:	df 91       	pop	r29
     8ba:	08 95       	ret

000008bc <usbCrc16>:
     8bc:	a8 2f       	mov	r26, r24
     8be:	b9 2f       	mov	r27, r25
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	41 e0       	ldi	r20, 0x01	; 1
     8c6:	50 ea       	ldi	r21, 0xA0	; 160
     8c8:	60 95       	com	r22
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <usbCrcLoopEntry>

000008ce <usbCrcByteLoop>:
     8ce:	2d 91       	ld	r18, X+
     8d0:	82 27       	eor	r24, r18

000008d2 <usbCrcBitLoop>:
     8d2:	97 95       	ror	r25
     8d4:	87 95       	ror	r24
     8d6:	10 f0       	brcs	.+4      	; 0x8dc <usbCrcNoXor>
     8d8:	84 27       	eor	r24, r20
     8da:	95 27       	eor	r25, r21

000008dc <usbCrcNoXor>:
     8dc:	30 5e       	subi	r19, 0xE0	; 224
     8de:	c8 f3       	brcs	.-14     	; 0x8d2 <usbCrcBitLoop>

000008e0 <usbCrcLoopEntry>:
     8e0:	6f 5f       	subi	r22, 0xFF	; 255
     8e2:	a8 f3       	brcs	.-22     	; 0x8ce <usbCrcByteLoop>

000008e4 <usbCrcReady>:
     8e4:	08 95       	ret

000008e6 <usbCrc16Append>:
     8e6:	ea df       	rcall	.-44     	; 0x8bc <usbCrc16>
     8e8:	8d 93       	st	X+, r24
     8ea:	9d 93       	st	X+, r25
     8ec:	08 95       	ret

000008ee <__vector_1>:
     8ee:	cf 93       	push	r28
     8f0:	cf b7       	in	r28, 0x3f	; 63
     8f2:	cf 93       	push	r28

000008f4 <waitForJ>:
     8f4:	c3 95       	inc	r28
     8f6:	83 9b       	sbis	0x10, 3	; 16
     8f8:	e9 f7       	brne	.-6      	; 0x8f4 <waitForJ>

000008fa <waitForK>:
     8fa:	83 9b       	sbis	0x10, 3	; 16
     8fc:	09 c0       	rjmp	.+18     	; 0x910 <foundK>
     8fe:	83 9b       	sbis	0x10, 3	; 16
     900:	07 c0       	rjmp	.+14     	; 0x910 <foundK>
     902:	83 9b       	sbis	0x10, 3	; 16
     904:	05 c0       	rjmp	.+10     	; 0x910 <foundK>
     906:	83 9b       	sbis	0x10, 3	; 16
     908:	03 c0       	rjmp	.+6      	; 0x910 <foundK>
     90a:	83 9b       	sbis	0x10, 3	; 16
     90c:	01 c0       	rjmp	.+2      	; 0x910 <foundK>
     90e:	a3 c0       	rjmp	.+326    	; 0xa56 <sofError>

00000910 <foundK>:
     910:	df 93       	push	r29
     912:	c0 91 e5 00 	lds	r28, 0x00E5
     916:	dd 27       	eor	r29, r29
     918:	c4 51       	subi	r28, 0x14	; 20
     91a:	df 4f       	sbci	r29, 0xFF	; 255
     91c:	83 9b       	sbis	0x10, 3	; 16
     91e:	02 c0       	rjmp	.+4      	; 0x924 <haveTwoBitsK>
     920:	df 91       	pop	r29
     922:	eb cf       	rjmp	.-42     	; 0x8fa <waitForK>

00000924 <haveTwoBitsK>:
     924:	2f 93       	push	r18
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	00 b3       	in	r16, 0x10	; 16
     92c:	2f ef       	ldi	r18, 0xFF	; 255
     92e:	03 fb       	bst	r16, 3
     930:	20 f9       	bld	r18, 0
     932:	4f 93       	push	r20
     934:	3f 93       	push	r19
     936:	10 b3       	in	r17, 0x10	; 16
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	01 27       	eor	r16, r17
     93c:	03 fb       	bst	r16, 3
     93e:	21 f9       	bld	r18, 1
     940:	3b e0       	ldi	r19, 0x0B	; 11
     942:	31 c0       	rjmp	.+98     	; 0x9a6 <rxbit2>

00000944 <unstuff0>:
     944:	4e 7f       	andi	r20, 0xFE	; 254
     946:	01 2f       	mov	r16, r17
     948:	10 b3       	in	r17, 0x10	; 16
     94a:	21 60       	ori	r18, 0x01	; 1
     94c:	28 c0       	rjmp	.+80     	; 0x99e <didUnstuff0>

0000094e <unstuff1>:
     94e:	10 2f       	mov	r17, r16
     950:	4d 7f       	andi	r20, 0xFD	; 253
     952:	22 60       	ori	r18, 0x02	; 2
     954:	00 00       	nop
     956:	00 b3       	in	r16, 0x10	; 16
     958:	29 c0       	rjmp	.+82     	; 0x9ac <didUnstuff1>

0000095a <unstuff2>:
     95a:	4b 7f       	andi	r20, 0xFB	; 251
     95c:	24 60       	ori	r18, 0x04	; 4
     95e:	01 2f       	mov	r16, r17
     960:	00 00       	nop
     962:	10 b3       	in	r17, 0x10	; 16
     964:	2b c0       	rjmp	.+86     	; 0x9bc <didUnstuff2>

00000966 <unstuff3>:
     966:	10 b3       	in	r17, 0x10	; 16
     968:	47 7f       	andi	r20, 0xF7	; 247
     96a:	28 60       	ori	r18, 0x08	; 8
     96c:	2a c0       	rjmp	.+84     	; 0x9c2 <didUnstuff3>

0000096e <unstuff4>:
     96e:	4f 7e       	andi	r20, 0xEF	; 239
     970:	00 b3       	in	r16, 0x10	; 16
     972:	20 61       	ori	r18, 0x10	; 16
     974:	2c c0       	rjmp	.+88     	; 0x9ce <didUnstuff4>

00000976 <unstuff5>:
     976:	4f 7d       	andi	r20, 0xDF	; 223
     978:	10 b3       	in	r17, 0x10	; 16
     97a:	20 62       	ori	r18, 0x20	; 32
     97c:	2f c0       	rjmp	.+94     	; 0x9dc <didUnstuff5>

0000097e <unstuff6>:
     97e:	4f 7b       	andi	r20, 0xBF	; 191
     980:	00 b3       	in	r16, 0x10	; 16
     982:	20 64       	ori	r18, 0x40	; 64
     984:	32 c0       	rjmp	.+100    	; 0x9ea <didUnstuff6>

00000986 <rxLoop>:
     986:	42 27       	eor	r20, r18
     988:	00 b3       	in	r16, 0x10	; 16
     98a:	49 93       	st	Y+, r20
     98c:	4f ef       	ldi	r20, 0xFF	; 255
     98e:	00 00       	nop
     990:	10 27       	eor	r17, r16
     992:	13 fb       	bst	r17, 3
     994:	20 f9       	bld	r18, 0
     996:	10 b3       	in	r17, 0x10	; 16
     998:	1c 70       	andi	r17, 0x0C	; 12
     99a:	c9 f1       	breq	.+114    	; 0xa0e <se0>
     99c:	29 7f       	andi	r18, 0xF9	; 249

0000099e <didUnstuff0>:
     99e:	91 f2       	breq	.-92     	; 0x944 <unstuff0>
     9a0:	01 27       	eor	r16, r17
     9a2:	03 fb       	bst	r16, 3
     9a4:	21 f9       	bld	r18, 1

000009a6 <rxbit2>:
     9a6:	00 b3       	in	r16, 0x10	; 16
     9a8:	23 7f       	andi	r18, 0xF3	; 243
     9aa:	89 f2       	breq	.-94     	; 0x94e <unstuff1>

000009ac <didUnstuff1>:
     9ac:	31 50       	subi	r19, 0x01	; 1
     9ae:	58 f1       	brcs	.+86     	; 0xa06 <overflow>
     9b0:	10 27       	eor	r17, r16
     9b2:	13 fb       	bst	r17, 3
     9b4:	22 f9       	bld	r18, 2
     9b6:	10 b3       	in	r17, 0x10	; 16
     9b8:	27 7e       	andi	r18, 0xE7	; 231
     9ba:	79 f2       	breq	.-98     	; 0x95a <unstuff2>

000009bc <didUnstuff2>:
     9bc:	01 27       	eor	r16, r17
     9be:	03 fb       	bst	r16, 3
     9c0:	23 f9       	bld	r18, 3

000009c2 <didUnstuff3>:
     9c2:	2f 7c       	andi	r18, 0xCF	; 207
     9c4:	81 f2       	breq	.-96     	; 0x966 <unstuff3>
     9c6:	00 b3       	in	r16, 0x10	; 16
     9c8:	10 27       	eor	r17, r16
     9ca:	13 fb       	bst	r17, 3
     9cc:	24 f9       	bld	r18, 4

000009ce <didUnstuff4>:
     9ce:	2f 79       	andi	r18, 0x9F	; 159
     9d0:	71 f2       	breq	.-100    	; 0x96e <unstuff4>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <didUnstuff4+0x6>
     9d4:	10 b3       	in	r17, 0x10	; 16
     9d6:	01 27       	eor	r16, r17
     9d8:	03 fb       	bst	r16, 3
     9da:	25 f9       	bld	r18, 5

000009dc <didUnstuff5>:
     9dc:	2f 73       	andi	r18, 0x3F	; 63
     9de:	59 f2       	breq	.-106    	; 0x976 <unstuff5>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <didUnstuff5+0x6>
     9e2:	00 b3       	in	r16, 0x10	; 16
     9e4:	10 27       	eor	r17, r16
     9e6:	13 fb       	bst	r17, 3
     9e8:	26 f9       	bld	r18, 6

000009ea <didUnstuff6>:
     9ea:	22 30       	cpi	r18, 0x02	; 2
     9ec:	40 f2       	brcs	.-112    	; 0x97e <unstuff6>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <didUnstuff6+0x6>
     9f0:	10 b3       	in	r17, 0x10	; 16
     9f2:	01 27       	eor	r16, r17
     9f4:	03 fb       	bst	r16, 3
     9f6:	27 f9       	bld	r18, 7

000009f8 <didUnstuff7>:
     9f8:	24 30       	cpi	r18, 0x04	; 4
     9fa:	28 f6       	brcc	.-118    	; 0x986 <rxLoop>

000009fc <unstuff7>:
     9fc:	4f 77       	andi	r20, 0x7F	; 127
     9fe:	20 68       	ori	r18, 0x80	; 128
     a00:	10 b3       	in	r17, 0x10	; 16
     a02:	00 00       	nop
     a04:	f9 cf       	rjmp	.-14     	; 0x9f8 <didUnstuff7>

00000a06 <overflow>:
     a06:	10 e4       	ldi	r17, 0x40	; 64
     a08:	1a bf       	out	0x3a, r17	; 58

00000a0a <ignorePacket>:
     a0a:	00 27       	eor	r16, r16
     a0c:	19 c0       	rjmp	.+50     	; 0xa40 <handleSetupOrOut>

00000a0e <se0>:
     a0e:	3b 50       	subi	r19, 0x0B	; 11
     a10:	31 95       	neg	r19
     a12:	c3 1b       	sub	r28, r19
     a14:	d0 40       	sbci	r29, 0x00	; 0
     a16:	10 e4       	ldi	r17, 0x40	; 64
     a18:	1a bf       	out	0x3a, r17	; 58
     a1a:	08 81       	ld	r16, Y
     a1c:	03 3c       	cpi	r16, 0xC3	; 195
     a1e:	f9 f0       	breq	.+62     	; 0xa5e <handleData>
     a20:	0b 34       	cpi	r16, 0x4B	; 75
     a22:	e9 f0       	breq	.+58     	; 0xa5e <handleData>
     a24:	20 91 e3 00 	lds	r18, 0x00E3
     a28:	19 81       	ldd	r17, Y+1	; 0x01
     a2a:	11 0f       	add	r17, r17
     a2c:	12 13       	cpse	r17, r18
     a2e:	ed cf       	rjmp	.-38     	; 0xa0a <ignorePacket>
     a30:	4a 81       	ldd	r20, Y+2	; 0x02
     a32:	44 1f       	adc	r20, r20
     a34:	09 36       	cpi	r16, 0x69	; 105
     a36:	41 f1       	breq	.+80     	; 0xa88 <handleIn>
     a38:	0d 32       	cpi	r16, 0x2D	; 45
     a3a:	11 f0       	breq	.+4      	; 0xa40 <handleSetupOrOut>
     a3c:	01 3e       	cpi	r16, 0xE1	; 225
     a3e:	29 f7       	brne	.-54     	; 0xa0a <ignorePacket>

00000a40 <handleSetupOrOut>:
     a40:	00 93 ea 00 	sts	0x00EA, r16

00000a44 <doReturn>:
     a44:	3f 91       	pop	r19
     a46:	4f 91       	pop	r20
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	2f 91       	pop	r18
     a4e:	df 91       	pop	r29
     a50:	ca b7       	in	r28, 0x3a	; 58
     a52:	c6 fd       	sbrc	r28, 6
     a54:	4f cf       	rjmp	.-354    	; 0x8f4 <waitForJ>

00000a56 <sofError>:
     a56:	cf 91       	pop	r28
     a58:	cf bf       	out	0x3f, r28	; 63
     a5a:	cf 91       	pop	r28
     a5c:	18 95       	reti

00000a5e <handleData>:
     a5e:	20 91 ea 00 	lds	r18, 0x00EA
     a62:	22 23       	and	r18, r18
     a64:	79 f3       	breq	.-34     	; 0xa44 <doReturn>
     a66:	10 91 e8 00 	lds	r17, 0x00E8
     a6a:	11 23       	and	r17, r17
     a6c:	69 f5       	brne	.+90     	; 0xac8 <sendNakAndReti>
     a6e:	34 30       	cpi	r19, 0x04	; 4
     a70:	6a f1       	brmi	.+90     	; 0xacc <sendAckAndReti>
     a72:	30 93 e8 00 	sts	0x00E8, r19
     a76:	20 93 e4 00 	sts	0x00E4, r18
     a7a:	10 91 e5 00 	lds	r17, 0x00E5
     a7e:	3b e0       	ldi	r19, 0x0B	; 11
     a80:	31 1b       	sub	r19, r17
     a82:	30 93 e5 00 	sts	0x00E5, r19
     a86:	22 c0       	rjmp	.+68     	; 0xacc <sendAckAndReti>

00000a88 <handleIn>:
     a88:	00 91 e8 00 	lds	r16, 0x00E8
     a8c:	01 30       	cpi	r16, 0x01	; 1
     a8e:	e4 f4       	brge	.+56     	; 0xac8 <sendNakAndReti>
     a90:	0a e5       	ldi	r16, 0x5A	; 90
     a92:	4f 70       	andi	r20, 0x0F	; 15
     a94:	49 f4       	brne	.+18     	; 0xaa8 <handleIn1>
     a96:	30 91 60 00 	lds	r19, 0x0060
     a9a:	34 fd       	sbrc	r19, 4
     a9c:	19 c0       	rjmp	.+50     	; 0xad0 <sendCntAndReti>
     a9e:	00 93 60 00 	sts	0x0060, r16
     aa2:	cc ec       	ldi	r28, 0xCC	; 204
     aa4:	d0 e0       	ldi	r29, 0x00	; 0
     aa6:	18 c0       	rjmp	.+48     	; 0xad8 <usbSendAndReti>

00000aa8 <handleIn1>:
     aa8:	30 91 d7 00 	lds	r19, 0x00D7
     aac:	34 fd       	sbrc	r19, 4
     aae:	10 c0       	rjmp	.+32     	; 0xad0 <sendCntAndReti>
     ab0:	00 93 d7 00 	sts	0x00D7, r16
     ab4:	c8 ed       	ldi	r28, 0xD8	; 216
     ab6:	d0 e0       	ldi	r29, 0x00	; 0
     ab8:	0f c0       	rjmp	.+30     	; 0xad8 <usbSendAndReti>

00000aba <stuffN1Delay>:
     aba:	27 95       	ror	r18
     abc:	a8 f4       	brcc	.+42     	; 0xae8 <doExorN1>
     abe:	51 50       	subi	r21, 0x01	; 1
     ac0:	a9 f4       	brne	.+42     	; 0xaec <commonN1>
     ac2:	22 0f       	add	r18, r18
     ac4:	00 00       	nop
     ac6:	f9 cf       	rjmp	.-14     	; 0xaba <stuffN1Delay>

00000ac8 <sendNakAndReti>:
     ac8:	4a e5       	ldi	r20, 0x5A	; 90
     aca:	03 c0       	rjmp	.+6      	; 0xad2 <usbSendX3>

00000acc <sendAckAndReti>:
     acc:	42 ed       	ldi	r20, 0xD2	; 210
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <usbSendX3>

00000ad0 <sendCntAndReti>:
     ad0:	43 2f       	mov	r20, r19

00000ad2 <usbSendX3>:
     ad2:	c4 e1       	ldi	r28, 0x14	; 20
     ad4:	d0 e0       	ldi	r29, 0x00	; 0
     ad6:	32 e0       	ldi	r19, 0x02	; 2

00000ad8 <usbSendAndReti>:
     ad8:	11 b3       	in	r17, 0x11	; 17
     ada:	1c 60       	ori	r17, 0x0C	; 12
     adc:	93 9a       	sbi	0x12, 3	; 18
     ade:	11 bb       	out	0x11, r17	; 17
     ae0:	02 b3       	in	r16, 0x12	; 18
     ae2:	20 e4       	ldi	r18, 0x40	; 64
     ae4:	1c e0       	ldi	r17, 0x0C	; 12
     ae6:	5f 93       	push	r21

00000ae8 <doExorN1>:
     ae8:	01 27       	eor	r16, r17
     aea:	56 e0       	ldi	r21, 0x06	; 6

00000aec <commonN1>:
     aec:	02 bb       	out	0x12, r16	; 18
     aee:	27 95       	ror	r18
     af0:	20 f4       	brcc	.+8      	; 0xafa <doExorN2>
     af2:	51 50       	subi	r21, 0x01	; 1
     af4:	21 f4       	brne	.+8      	; 0xafe <commonN2>
     af6:	22 0f       	add	r18, r18
     af8:	f9 cf       	rjmp	.-14     	; 0xaec <commonN1>

00000afa <doExorN2>:
     afa:	01 27       	eor	r16, r17
     afc:	56 e0       	ldi	r21, 0x06	; 6

00000afe <commonN2>:
     afe:	00 00       	nop
     b00:	3b 5a       	subi	r19, 0xAB	; 171
     b02:	02 bb       	out	0x12, r16	; 18
     b04:	d0 f2       	brcs	.-76     	; 0xaba <stuffN1Delay>

00000b06 <stuff6Delay>:
     b06:	27 95       	ror	r18
     b08:	28 f4       	brcc	.+10     	; 0xb14 <doExor6>
     b0a:	51 50       	subi	r21, 0x01	; 1
     b0c:	29 f4       	brne	.+10     	; 0xb18 <common6>
     b0e:	22 0f       	add	r18, r18
     b10:	00 00       	nop
     b12:	f9 cf       	rjmp	.-14     	; 0xb06 <stuff6Delay>

00000b14 <doExor6>:
     b14:	01 27       	eor	r16, r17
     b16:	56 e0       	ldi	r21, 0x06	; 6

00000b18 <common6>:
     b18:	27 95       	ror	r18
     b1a:	02 bb       	out	0x12, r16	; 18
     b1c:	20 f4       	brcc	.+8      	; 0xb26 <doExor7>
     b1e:	51 50       	subi	r21, 0x01	; 1
     b20:	21 f4       	brne	.+8      	; 0xb2a <common7>
     b22:	22 0f       	add	r18, r18
     b24:	f9 cf       	rjmp	.-14     	; 0xb18 <common6>

00000b26 <doExor7>:
     b26:	01 27       	eor	r16, r17
     b28:	56 e0       	ldi	r21, 0x06	; 6

00000b2a <common7>:
     b2a:	29 91       	ld	r18, Y+
     b2c:	33 23       	and	r19, r19
     b2e:	02 bb       	out	0x12, r16	; 18
     b30:	21 f6       	brne	.-120    	; 0xaba <stuffN1Delay>
     b32:	03 7f       	andi	r16, 0xF3	; 243
     b34:	10 91 e9 00 	lds	r17, 0x00E9
     b38:	11 0f       	add	r17, r17
     b3a:	c6 51       	subi	r28, 0x16	; 22
     b3c:	d0 40       	sbci	r29, 0x00	; 0
     b3e:	02 bb       	out	0x12, r16	; 18
     b40:	11 f0       	breq	.+4      	; 0xb46 <skipAddrAssign>
     b42:	10 93 e3 00 	sts	0x00E3, r17

00000b46 <skipAddrAssign>:
     b46:	10 e4       	ldi	r17, 0x40	; 64
     b48:	1a bf       	out	0x3a, r17	; 58
     b4a:	08 60       	ori	r16, 0x08	; 8
     b4c:	11 b3       	in	r17, 0x11	; 17
     b4e:	13 7f       	andi	r17, 0xF3	; 243
     b50:	40 2f       	mov	r20, r16
     b52:	43 7f       	andi	r20, 0xF3	; 243
     b54:	5f 91       	pop	r21
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <skipAddrAssign+0x12>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <skipAddrAssign+0x14>
     b5a:	02 bb       	out	0x12, r16	; 18
     b5c:	11 bb       	out	0x11, r17	; 17
     b5e:	42 bb       	out	0x12, r20	; 18
     b60:	71 cf       	rjmp	.-286    	; 0xa44 <doReturn>

00000b62 <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	00 d0       	rcall	.+0      	; 0xb68 <_delayFourCycles+0x6>
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	9a 83       	std	Y+2, r25	; 0x02
     b6e:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	11 f4       	brne	.+4      	; 0xb7c <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <_delayFourCycles+0x18>
     b7a:	06 c0       	rjmp	.+12     	; 0xb88 <_delayFourCycles+0x26>
    else
        __asm__ __volatile__ (
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	9a 81       	ldd	r25, Y+2	; 0x02
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <_delayFourCycles+0x1e>
     b84:	9a 83       	std	Y+2, r25	; 0x02
     b86:	89 83       	std	Y+1, r24	; 0x01
    	    "1: sbiw %0,1" "\n\t"                  
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
}
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <toggle_e>:


#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
    lcd_e_high();
     b9a:	8b e3       	ldi	r24, 0x3B	; 59
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	2b e3       	ldi	r18, 0x3B	; 59
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	f9 01       	movw	r30, r18
     ba4:	20 81       	ld	r18, Z
     ba6:	20 64       	ori	r18, 0x40	; 64
     ba8:	fc 01       	movw	r30, r24
     baa:	20 83       	st	Z, r18
    lcd_e_delay();
     bac:	00 c0       	rjmp	.+0      	; 0xbae <toggle_e+0x1c>
    lcd_e_low();
     bae:	8b e3       	ldi	r24, 0x3B	; 59
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	2b e3       	ldi	r18, 0x3B	; 59
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	f9 01       	movw	r30, r18
     bb8:	20 81       	ld	r18, Z
     bba:	2f 7b       	andi	r18, 0xBF	; 191
     bbc:	fc 01       	movw	r30, r24
     bbe:	20 83       	st	Z, r18
}
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	00 d0       	rcall	.+0      	; 0xbcc <lcd_write+0x6>
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	8a 83       	std	Y+2, r24	; 0x02
     bd4:	6b 83       	std	Y+3, r22	; 0x03
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	88 23       	and	r24, r24
     bda:	51 f0       	breq	.+20     	; 0xbf0 <lcd_write+0x2a>
       lcd_rs_high();
     bdc:	8b e3       	ldi	r24, 0x3B	; 59
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	2b e3       	ldi	r18, 0x3B	; 59
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	f9 01       	movw	r30, r18
     be6:	20 81       	ld	r18, Z
     be8:	20 61       	ori	r18, 0x10	; 16
     bea:	fc 01       	movw	r30, r24
     bec:	20 83       	st	Z, r18
     bee:	09 c0       	rjmp	.+18     	; 0xc02 <lcd_write+0x3c>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     bf0:	8b e3       	ldi	r24, 0x3B	; 59
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	2b e3       	ldi	r18, 0x3B	; 59
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	f9 01       	movw	r30, r18
     bfa:	20 81       	ld	r18, Z
     bfc:	2f 7e       	andi	r18, 0xEF	; 239
     bfe:	fc 01       	movw	r30, r24
     c00:	20 83       	st	Z, r18
    }
    lcd_rw_low();
     c02:	8b e3       	ldi	r24, 0x3B	; 59
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	2b e3       	ldi	r18, 0x3B	; 59
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	f9 01       	movw	r30, r18
     c0c:	20 81       	ld	r18, Z
     c0e:	2f 7d       	andi	r18, 0xDF	; 223
     c10:	fc 01       	movw	r30, r24
     c12:	20 83       	st	Z, r18

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     c14:	8a e3       	ldi	r24, 0x3A	; 58
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	2a e3       	ldi	r18, 0x3A	; 58
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	f9 01       	movw	r30, r18
     c1e:	20 81       	ld	r18, Z
     c20:	2f 60       	ori	r18, 0x0F	; 15
     c22:	fc 01       	movw	r30, r24
     c24:	20 83       	st	Z, r18

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
     c26:	8b e3       	ldi	r24, 0x3B	; 59
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	fc 01       	movw	r30, r24
     c2c:	80 81       	ld	r24, Z
     c2e:	80 7f       	andi	r24, 0xF0	; 240
     c30:	89 83       	std	Y+1, r24	; 0x01
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
     c32:	8b e3       	ldi	r24, 0x3B	; 59
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	2a 81       	ldd	r18, Y+2	; 0x02
     c38:	22 95       	swap	r18
     c3a:	2f 70       	andi	r18, 0x0F	; 15
     c3c:	32 2f       	mov	r19, r18
     c3e:	29 81       	ldd	r18, Y+1	; 0x01
     c40:	23 2b       	or	r18, r19
     c42:	fc 01       	movw	r30, r24
     c44:	20 83       	st	Z, r18
        lcd_e_toggle();
     c46:	0e 94 c9 05 	call	0xb92	; 0xb92 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
     c4a:	8b e3       	ldi	r24, 0x3B	; 59
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	2a 81       	ldd	r18, Y+2	; 0x02
     c50:	32 2f       	mov	r19, r18
     c52:	3f 70       	andi	r19, 0x0F	; 15
     c54:	29 81       	ldd	r18, Y+1	; 0x01
     c56:	23 2b       	or	r18, r19
     c58:	fc 01       	movw	r30, r24
     c5a:	20 83       	st	Z, r18
        lcd_e_toggle();
     c5c:	0e 94 c9 05 	call	0xb92	; 0xb92 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
     c60:	8b e3       	ldi	r24, 0x3B	; 59
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	29 81       	ldd	r18, Y+1	; 0x01
     c66:	2f 60       	ori	r18, 0x0F	; 15
     c68:	fc 01       	movw	r30, r24
     c6a:	20 83       	st	Z, r18
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	08 95       	ret

00000c78 <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <lcd_read+0x6>
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    
    
    if (rs)
     c84:	8a 81       	ldd	r24, Y+2	; 0x02
     c86:	88 23       	and	r24, r24
     c88:	51 f0       	breq	.+20     	; 0xc9e <lcd_read+0x26>
        lcd_rs_high();                       /* RS=1: read data      */
     c8a:	8b e3       	ldi	r24, 0x3B	; 59
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	2b e3       	ldi	r18, 0x3B	; 59
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	f9 01       	movw	r30, r18
     c94:	20 81       	ld	r18, Z
     c96:	20 61       	ori	r18, 0x10	; 16
     c98:	fc 01       	movw	r30, r24
     c9a:	20 83       	st	Z, r18
     c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <lcd_read+0x38>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     c9e:	8b e3       	ldi	r24, 0x3B	; 59
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	2b e3       	ldi	r18, 0x3B	; 59
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	f9 01       	movw	r30, r18
     ca8:	20 81       	ld	r18, Z
     caa:	2f 7e       	andi	r18, 0xEF	; 239
     cac:	fc 01       	movw	r30, r24
     cae:	20 83       	st	Z, r18
    lcd_rw_high();                           /* RW=1  read mode      */
     cb0:	8b e3       	ldi	r24, 0x3B	; 59
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	2b e3       	ldi	r18, 0x3B	; 59
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	f9 01       	movw	r30, r18
     cba:	20 81       	ld	r18, Z
     cbc:	20 62       	ori	r18, 0x20	; 32
     cbe:	fc 01       	movw	r30, r24
     cc0:	20 83       	st	Z, r18
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
     cc2:	8a e3       	ldi	r24, 0x3A	; 58
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	2a e3       	ldi	r18, 0x3A	; 58
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	f9 01       	movw	r30, r18
     ccc:	20 81       	ld	r18, Z
     cce:	20 7f       	andi	r18, 0xF0	; 240
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 83       	st	Z, r18
        
        lcd_e_high();
     cd4:	8b e3       	ldi	r24, 0x3B	; 59
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	2b e3       	ldi	r18, 0x3B	; 59
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	f9 01       	movw	r30, r18
     cde:	20 81       	ld	r18, Z
     ce0:	20 64       	ori	r18, 0x40	; 64
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18
        lcd_e_delay();        
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <lcd_read+0x70>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
     ce8:	89 e3       	ldi	r24, 0x39	; 57
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	fc 01       	movw	r30, r24
     cee:	80 81       	ld	r24, Z
     cf0:	82 95       	swap	r24
     cf2:	80 7f       	andi	r24, 0xF0	; 240
     cf4:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
     cf6:	8b e3       	ldi	r24, 0x3B	; 59
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	2b e3       	ldi	r18, 0x3B	; 59
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	f9 01       	movw	r30, r18
     d00:	20 81       	ld	r18, Z
     d02:	2f 7b       	andi	r18, 0xBF	; 191
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18
        
        lcd_e_delay();                       /* Enable 500ns low       */
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <lcd_read+0x92>
        
        lcd_e_high();
     d0a:	8b e3       	ldi	r24, 0x3B	; 59
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	2b e3       	ldi	r18, 0x3B	; 59
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	f9 01       	movw	r30, r18
     d14:	20 81       	ld	r18, Z
     d16:	20 64       	ori	r18, 0x40	; 64
     d18:	fc 01       	movw	r30, r24
     d1a:	20 83       	st	Z, r18
        lcd_e_delay();
     d1c:	00 c0       	rjmp	.+0      	; 0xd1e <lcd_read+0xa6>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
     d1e:	89 e3       	ldi	r24, 0x39	; 57
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	fc 01       	movw	r30, r24
     d24:	80 81       	ld	r24, Z
     d26:	98 2f       	mov	r25, r24
     d28:	9f 70       	andi	r25, 0x0F	; 15
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	89 2b       	or	r24, r25
     d2e:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
     d30:	8b e3       	ldi	r24, 0x3B	; 59
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	2b e3       	ldi	r18, 0x3B	; 59
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	f9 01       	movw	r30, r18
     d3a:	20 81       	ld	r18, Z
     d3c:	2f 7b       	andi	r18, 0xBF	; 191
     d3e:	fc 01       	movw	r30, r24
     d40:	20 83       	st	Z, r18
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
     d42:	89 81       	ldd	r24, Y+1	; 0x01
}
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <lcd_waitbusy>:
/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
     d4e:	1f 93       	push	r17
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	0e 94 3c 06 	call	0xc78	; 0xc78 <lcd_read>
     d5e:	18 2f       	mov	r17, r24
     d60:	81 2f       	mov	r24, r17
     d62:	88 23       	and	r24, r24
     d64:	cc f3       	brlt	.-14     	; 0xd58 <lcd_waitbusy+0xa>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);
     d66:	86 e0       	ldi	r24, 0x06	; 6
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 b1 05 	call	0xb62	; 0xb62 <_delayFourCycles>

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0e 94 3c 06 	call	0xc78	; 0xc78 <lcd_read>
    
}/* lcd_waitbusy */
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	1f 91       	pop	r17
     d7a:	08 95       	ret

00000d7c <lcd_newline>:
/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
     d7c:	1f 93       	push	r17
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	0f 92       	push	r0
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	89 83       	std	Y+1, r24	; 0x01

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	80 34       	cpi	r24, 0x40	; 64
     d8e:	10 f4       	brcc	.+4      	; 0xd94 <lcd_newline+0x18>
        addressCounter = LCD_START_LINE2;
     d90:	10 e4       	ldi	r17, 0x40	; 64
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <lcd_newline+0x1a>
    else
        addressCounter = LCD_START_LINE1;
     d94:	10 e0       	ldi	r17, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     d96:	81 2f       	mov	r24, r17
     d98:	80 58       	subi	r24, 0x80	; 128
     d9a:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_command>

}/* lcd_newline */
     d9e:	0f 90       	pop	r0
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	1f 91       	pop	r17
     da6:	08 95       	ret

00000da8 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	0f 92       	push	r0
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
     db4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <lcd_waitbusy>
    lcd_write(cmd,0);
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <lcd_write>
}
     dc0:	0f 90       	pop	r0
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
     dd4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <lcd_waitbusy>
    lcd_write(data,1);
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <lcd_write>
}
     de0:	0f 90       	pop	r0
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	00 d0       	rcall	.+0      	; 0xdee <lcd_gotoxy+0x6>
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	6a 83       	std	Y+2, r22	; 0x02
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	88 23       	and	r24, r24
     dfa:	29 f4       	brne	.+10     	; 0xe06 <lcd_gotoxy+0x1e>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	80 58       	subi	r24, 0x80	; 128
     e00:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_command>
     e04:	04 c0       	rjmp	.+8      	; 0xe0e <lcd_gotoxy+0x26>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	80 54       	subi	r24, 0x40	; 64
     e0a:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_command>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <lcd_getxy>:


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
    return lcd_waitbusy();
     e20:	0e 94 a7 06 	call	0xd4e	; 0xd4e <lcd_waitbusy>
     e24:	88 2f       	mov	r24, r24
     e26:	90 e0       	ldi	r25, 0x00	; 0
}
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <lcd_clrscr>:

/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_CLR);
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_command>
}
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <lcd_home>:

/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_HOME);
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_command>
}
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <lcd_putc+0x6>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     e62:	0e 94 a7 06 	call	0xd4e	; 0xd4e <lcd_waitbusy>
     e66:	89 83       	std	Y+1, r24	; 0x01
    if (c=='\n')
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	8a 30       	cpi	r24, 0x0A	; 10
     e6c:	21 f4       	brne	.+8      	; 0xe76 <lcd_putc+0x20>
    {
        lcd_newline(pos);
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	0e 94 be 06 	call	0xd7c	; 0xd7c <lcd_newline>
     e74:	15 c0       	rjmp	.+42     	; 0xea0 <lcd_putc+0x4a>
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	80 31       	cpi	r24, 0x10	; 16
     e7a:	29 f4       	brne	.+10     	; 0xe86 <lcd_putc+0x30>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
     e7c:	80 ec       	ldi	r24, 0xC0	; 192
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <lcd_write>
     e84:	07 c0       	rjmp	.+14     	; 0xe94 <lcd_putc+0x3e>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	80 35       	cpi	r24, 0x50	; 80
     e8a:	21 f4       	brne	.+8      	; 0xe94 <lcd_putc+0x3e>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
     e8c:	80 e8       	ldi	r24, 0x80	; 128
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <lcd_write>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
     e94:	0e 94 a7 06 	call	0xd4e	; 0xd4e <lcd_waitbusy>
#endif
        lcd_write(c, 1);
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <lcd_write>
    }

}/* lcd_putc */
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     eaa:	1f 93       	push	r17
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <lcd_puts+0x8>
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	9a 83       	std	Y+2, r25	; 0x02
     eb8:	89 83       	std	Y+1, r24	; 0x01
    register char c;

    while ( (c = *s++) ) {
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <lcd_puts+0x18>
        lcd_putc(c);
     ebc:	81 2f       	mov	r24, r17
     ebe:	0e 94 2b 07 	call	0xe56	; 0xe56 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	9a 81       	ldd	r25, Y+2	; 0x02
     ec6:	fc 01       	movw	r30, r24
     ec8:	10 81       	ld	r17, Z
     eca:	21 e0       	ldi	r18, 0x01	; 1
     ecc:	11 23       	and	r17, r17
     ece:	09 f4       	brne	.+2      	; 0xed2 <lcd_puts+0x28>
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	22 23       	and	r18, r18
     ede:	71 f7       	brne	.-36     	; 0xebc <lcd_puts+0x12>
        lcd_putc(c);
    }

}/* lcd_puts */
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	1f 91       	pop	r17
     eea:	08 95       	ret

00000eec <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     eec:	1f 93       	push	r17
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <lcd_puts_p+0x8>
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <lcd_puts_p+0xa>
     ef6:	0f 92       	push	r0
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	9d 83       	std	Y+5, r25	; 0x05
     efe:	8c 83       	std	Y+4, r24	; 0x04
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     f00:	03 c0       	rjmp	.+6      	; 0xf08 <lcd_puts_p+0x1c>
        lcd_putc(c);
     f02:	81 2f       	mov	r24, r17
     f04:	0e 94 2b 07 	call	0xe56	; 0xe56 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	9d 81       	ldd	r25, Y+5	; 0x05
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	9d 81       	ldd	r25, Y+5	; 0x05
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	9d 83       	std	Y+5, r25	; 0x05
     f18:	8c 83       	std	Y+4, r24	; 0x04
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	fc 01       	movw	r30, r24
     f20:	14 91       	lpm	r17, Z+
     f22:	1b 83       	std	Y+3, r17	; 0x03
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	18 2f       	mov	r17, r24
     f28:	11 23       	and	r17, r17
     f2a:	59 f7       	brne	.-42     	; 0xf02 <lcd_puts_p+0x16>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	1f 91       	pop	r17
     f3c:	08 95       	ret

00000f3e <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	0f 92       	push	r0
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	89 83       	std	Y+1, r24	; 0x01
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
     f4a:	8a e3       	ldi	r24, 0x3A	; 58
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	2a e3       	ldi	r18, 0x3A	; 58
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	f9 01       	movw	r30, r18
     f54:	20 81       	ld	r18, Z
     f56:	2f 67       	ori	r18, 0x7F	; 127
     f58:	fc 01       	movw	r30, r24
     f5a:	20 83       	st	Z, r18
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
     f5c:	80 e8       	ldi	r24, 0x80	; 128
     f5e:	9b eb       	ldi	r25, 0xBB	; 187
     f60:	0e 94 b1 05 	call	0xb62	; 0xb62 <_delayFourCycles>
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     f64:	8b e3       	ldi	r24, 0x3B	; 59
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	2b e3       	ldi	r18, 0x3B	; 59
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	f9 01       	movw	r30, r18
     f6e:	20 81       	ld	r18, Z
     f70:	22 60       	ori	r18, 0x02	; 2
     f72:	fc 01       	movw	r30, r24
     f74:	20 83       	st	Z, r18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     f76:	8b e3       	ldi	r24, 0x3B	; 59
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	2b e3       	ldi	r18, 0x3B	; 59
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	f9 01       	movw	r30, r18
     f80:	20 81       	ld	r18, Z
     f82:	21 60       	ori	r18, 0x01	; 1
     f84:	fc 01       	movw	r30, r24
     f86:	20 83       	st	Z, r18
    lcd_e_toggle();
     f88:	0e 94 c9 05 	call	0xb92	; 0xb92 <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */
     f8c:	80 e8       	ldi	r24, 0x80	; 128
     f8e:	9a e3       	ldi	r25, 0x3A	; 58
     f90:	0e 94 b1 05 	call	0xb62	; 0xb62 <_delayFourCycles>
   
    /* repeat last command */ 
    lcd_e_toggle();      
     f94:	0e 94 c9 05 	call	0xb92	; 0xb92 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
     f98:	80 ec       	ldi	r24, 0xC0	; 192
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 b1 05 	call	0xb62	; 0xb62 <_delayFourCycles>
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     fa0:	0e 94 c9 05 	call	0xb92	; 0xb92 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
     fa4:	80 ec       	ldi	r24, 0xC0	; 192
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 b1 05 	call	0xb62	; 0xb62 <_delayFourCycles>

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     fac:	8b e3       	ldi	r24, 0x3B	; 59
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	2b e3       	ldi	r18, 0x3B	; 59
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	f9 01       	movw	r30, r18
     fb6:	20 81       	ld	r18, Z
     fb8:	2e 7f       	andi	r18, 0xFE	; 254
     fba:	fc 01       	movw	r30, r24
     fbc:	20 83       	st	Z, r18
    lcd_e_toggle();
     fbe:	0e 94 c9 05 	call	0xb92	; 0xb92 <toggle_e>
    delay(64);           /* some displays need this additional delay */
     fc2:	80 ec       	ldi	r24, 0xC0	; 192
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 b1 05 	call	0xb62	; 0xb62 <_delayFourCycles>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     fca:	88 e2       	ldi	r24, 0x28	; 40
     fcc:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     fd0:	88 e0       	ldi	r24, 0x08	; 8
     fd2:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     fd6:	0e 94 17 07 	call	0xe2e	; 0xe2e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     fda:	86 e0       	ldi	r24, 0x06	; 6
     fdc:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_command>

}/* lcd_init */
     fe6:	0f 90       	pop	r0
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <init>:

static uint8_t pass_no;

static uint8_t mode;

void init(void) {
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	2e 97       	sbiw	r28, 0x0e	; 14
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
	PORTD |= _BV(SELECT);
    1006:	82 e3       	ldi	r24, 0x32	; 50
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	22 e3       	ldi	r18, 0x32	; 50
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	f9 01       	movw	r30, r18
    1010:	20 81       	ld	r18, Z
    1012:	20 62       	ori	r18, 0x20	; 32
    1014:	fc 01       	movw	r30, r24
    1016:	20 83       	st	Z, r18
	PORTD |= _BV(NEXT);
    1018:	82 e3       	ldi	r24, 0x32	; 50
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	22 e3       	ldi	r18, 0x32	; 50
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	f9 01       	movw	r30, r18
    1022:	20 81       	ld	r18, Z
    1024:	20 61       	ori	r18, 0x10	; 16
    1026:	fc 01       	movw	r30, r24
    1028:	20 83       	st	Z, r18
	PORTD |= _BV(MENU);
    102a:	82 e3       	ldi	r24, 0x32	; 50
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	22 e3       	ldi	r18, 0x32	; 50
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	f9 01       	movw	r30, r18
    1034:	20 81       	ld	r18, Z
    1036:	20 64       	ori	r18, 0x40	; 64
    1038:	fc 01       	movw	r30, r24
    103a:	20 83       	st	Z, r18

	DDRB = 1 << PB0; // PB0 as output
    103c:	87 e3       	ldi	r24, 0x37	; 55
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	21 e0       	ldi	r18, 0x01	; 1
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18

	kb_init();
    1046:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <kb_init>
	usbInit();
    104a:	0e 94 40 04 	call	0x880	; 0x880 <usbInit>
	// initialize LCD
	lcd_init(LCD_DISP_ON);
    104e:	8c e0       	ldi	r24, 0x0C	; 12
    1050:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_init>
	lcd_puts("select..");
    1054:	85 e7       	ldi	r24, 0x75	; 117
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 55 07 	call	0xeaa	; 0xeaa <lcd_puts>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a0 ea       	ldi	r26, 0xA0	; 160
    1062:	b1 e4       	ldi	r27, 0x41	; 65
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	ab 83       	std	Y+3, r26	; 0x03
    106a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    106c:	69 81       	ldd	r22, Y+1	; 0x01
    106e:	7a 81       	ldd	r23, Y+2	; 0x02
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e8       	ldi	r19, 0x80	; 128
    1078:	4b e3       	ldi	r20, 0x3B	; 59
    107a:	55 e4       	ldi	r21, 0x45	; 69
    107c:	0e 94 c6 13 	call	0x278c	; 0x278c <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8d 83       	std	Y+5, r24	; 0x05
    1086:	9e 83       	std	Y+6, r25	; 0x06
    1088:	af 83       	std	Y+7, r26	; 0x07
    108a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    108c:	11 e0       	ldi	r17, 0x01	; 1
    108e:	6d 81       	ldd	r22, Y+5	; 0x05
    1090:	7e 81       	ldd	r23, Y+6	; 0x06
    1092:	8f 81       	ldd	r24, Y+7	; 0x07
    1094:	98 85       	ldd	r25, Y+8	; 0x08
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e8       	ldi	r20, 0x80	; 128
    109c:	5f e3       	ldi	r21, 0x3F	; 63
    109e:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__ltsf2>
    10a2:	88 23       	and	r24, r24
    10a4:	0c f0       	brlt	.+2      	; 0x10a8 <init+0xba>
    10a6:	10 e0       	ldi	r17, 0x00	; 0
    10a8:	11 23       	and	r17, r17
    10aa:	29 f0       	breq	.+10     	; 0x10b6 <init+0xc8>
		__ticks = 1;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	9a 87       	std	Y+10, r25	; 0x0a
    10b2:	89 87       	std	Y+9, r24	; 0x09
    10b4:	46 c0       	rjmp	.+140    	; 0x1142 <init+0x154>
	else if (__tmp > 65535)
    10b6:	11 e0       	ldi	r17, 0x01	; 1
    10b8:	6d 81       	ldd	r22, Y+5	; 0x05
    10ba:	7e 81       	ldd	r23, Y+6	; 0x06
    10bc:	8f 81       	ldd	r24, Y+7	; 0x07
    10be:	98 85       	ldd	r25, Y+8	; 0x08
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	3f ef       	ldi	r19, 0xFF	; 255
    10c4:	4f e7       	ldi	r20, 0x7F	; 127
    10c6:	57 e4       	ldi	r21, 0x47	; 71
    10c8:	0e 94 c0 14 	call	0x2980	; 0x2980 <__gtsf2>
    10cc:	18 16       	cp	r1, r24
    10ce:	0c f0       	brlt	.+2      	; 0x10d2 <init+0xe4>
    10d0:	10 e0       	ldi	r17, 0x00	; 0
    10d2:	11 23       	and	r17, r17
    10d4:	61 f1       	breq	.+88     	; 0x112e <init+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d6:	69 81       	ldd	r22, Y+1	; 0x01
    10d8:	7a 81       	ldd	r23, Y+2	; 0x02
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e2       	ldi	r20, 0x20	; 32
    10e4:	51 e4       	ldi	r21, 0x41	; 65
    10e6:	0e 94 c6 13 	call	0x278c	; 0x278c <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	bc 01       	movw	r22, r24
    10f0:	cd 01       	movw	r24, r26
    10f2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9a 87       	std	Y+10, r25	; 0x0a
    10fc:	89 87       	std	Y+9, r24	; 0x09
    10fe:	12 c0       	rjmp	.+36     	; 0x1124 <init+0x136>
    1100:	8c e2       	ldi	r24, 0x2C	; 44
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	9c 87       	std	Y+12, r25	; 0x0c
    1106:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1108:	8b 85       	ldd	r24, Y+11	; 0x0b
    110a:	9c 85       	ldd	r25, Y+12	; 0x0c
    110c:	8c 01       	movw	r16, r24
    110e:	c8 01       	movw	r24, r16
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	f1 f7       	brne	.-4      	; 0x1110 <init+0x122>
    1114:	8c 01       	movw	r16, r24
    1116:	1c 87       	std	Y+12, r17	; 0x0c
    1118:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111a:	89 85       	ldd	r24, Y+9	; 0x09
    111c:	9a 85       	ldd	r25, Y+10	; 0x0a
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	9a 87       	std	Y+10, r25	; 0x0a
    1122:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1124:	89 85       	ldd	r24, Y+9	; 0x09
    1126:	9a 85       	ldd	r25, Y+10	; 0x0a
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	51 f7       	brne	.-44     	; 0x1100 <init+0x112>
    112c:	17 c0       	rjmp	.+46     	; 0x115c <init+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    112e:	6d 81       	ldd	r22, Y+5	; 0x05
    1130:	7e 81       	ldd	r23, Y+6	; 0x06
    1132:	8f 81       	ldd	r24, Y+7	; 0x07
    1134:	98 85       	ldd	r25, Y+8	; 0x08
    1136:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__fixunssfsi>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	9a 87       	std	Y+10, r25	; 0x0a
    1140:	89 87       	std	Y+9, r24	; 0x09
    1142:	89 85       	ldd	r24, Y+9	; 0x09
    1144:	9a 85       	ldd	r25, Y+10	; 0x0a
    1146:	9e 87       	std	Y+14, r25	; 0x0e
    1148:	8d 87       	std	Y+13, r24	; 0x0d
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	8c 01       	movw	r16, r24
    1150:	f8 01       	movw	r30, r16
    1152:	31 97       	sbiw	r30, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <init+0x164>
    1156:	8f 01       	movw	r16, r30
    1158:	1e 87       	std	Y+14, r17	; 0x0e
    115a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);

}
    115c:	2e 96       	adiw	r28, 0x0e	; 14
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	08 95       	ret

00001172 <usbFunctionSetup>:

usbMsgLen_t usbFunctionSetup(uchar data[8]) {
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <usbFunctionSetup+0x6>
    1178:	00 d0       	rcall	.+0      	; 0x117a <usbFunctionSetup+0x8>
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	8b 83       	std	Y+3, r24	; 0x03
	usbRequest_t *rq = (void *) data;
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	89 83       	std	Y+1, r24	; 0x01

	if ((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS) {
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	fc 01       	movw	r30, r24
    1190:	80 81       	ld	r24, Z
    1192:	88 2f       	mov	r24, r24
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	80 76       	andi	r24, 0x60	; 96
    1198:	90 70       	andi	r25, 0x00	; 0
    119a:	80 32       	cpi	r24, 0x20	; 32
    119c:	91 05       	cpc	r25, r1
    119e:	09 f0       	breq	.+2      	; 0x11a2 <usbFunctionSetup+0x30>
    11a0:	3f c0       	rjmp	.+126    	; 0x1220 <usbFunctionSetup+0xae>
		switch (rq->bRequest) {
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	fc 01       	movw	r30, r24
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	91 05       	cpc	r25, r1
    11b2:	31 f1       	breq	.+76     	; 0x1200 <usbFunctionSetup+0x8e>
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	91 05       	cpc	r25, r1
    11b8:	24 f4       	brge	.+8      	; 0x11c2 <usbFunctionSetup+0x50>
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	91 05       	cpc	r25, r1
    11be:	41 f0       	breq	.+16     	; 0x11d0 <usbFunctionSetup+0x5e>
    11c0:	2f c0       	rjmp	.+94     	; 0x1220 <usbFunctionSetup+0xae>
    11c2:	89 30       	cpi	r24, 0x09	; 9
    11c4:	91 05       	cpc	r25, r1
    11c6:	81 f0       	breq	.+32     	; 0x11e8 <usbFunctionSetup+0x76>
    11c8:	8a 30       	cpi	r24, 0x0A	; 10
    11ca:	91 05       	cpc	r25, r1
    11cc:	09 f1       	breq	.+66     	; 0x1210 <usbFunctionSetup+0x9e>
    11ce:	28 c0       	rjmp	.+80     	; 0x1220 <usbFunctionSetup+0xae>
		case USBRQ_HID_GET_REPORT: // send "no keys pressed" if asked here
			// wValue: ReportType (highbyte), ReportID (lowbyte)
			usbMsgPtr = (void *) &keyboard_report; // we only have this one
    11d0:	8f e9       	ldi	r24, 0x9F	; 159
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	90 93 e7 00 	sts	0x00E7, r25
    11d8:	80 93 e6 00 	sts	0x00E6, r24
			keyboard_report.modifier = 0;
    11dc:	10 92 9f 00 	sts	0x009F, r1
			keyboard_report.keycode[0] = 0;
    11e0:	10 92 a1 00 	sts	0x00A1, r1
			return sizeof(keyboard_report);
    11e4:	88 e0       	ldi	r24, 0x08	; 8
    11e6:	1d c0       	rjmp	.+58     	; 0x1222 <usbFunctionSetup+0xb0>
		case USBRQ_HID_SET_REPORT: // if wLength == 1, should be LED state
			return (rq->wLength.word == 1) ? USB_NO_MSG : 0;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	fc 01       	movw	r30, r24
    11ee:	86 81       	ldd	r24, Z+6	; 0x06
    11f0:	97 81       	ldd	r25, Z+7	; 0x07
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	91 05       	cpc	r25, r1
    11f6:	11 f4       	brne	.+4      	; 0x11fc <usbFunctionSetup+0x8a>
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <usbFunctionSetup+0x8c>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	11 c0       	rjmp	.+34     	; 0x1222 <usbFunctionSetup+0xb0>
		case USBRQ_HID_GET_IDLE: // send idle rate to PC as required by spec
			usbMsgPtr = &idleRate;
    1200:	87 ea       	ldi	r24, 0xA7	; 167
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	90 93 e7 00 	sts	0x00E7, r25
    1208:	80 93 e6 00 	sts	0x00E6, r24
			return 1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <usbFunctionSetup+0xb0>
		case USBRQ_HID_SET_IDLE: // save idle rate as required by spec
			idleRate = rq->wValue.bytes[1];
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	fc 01       	movw	r30, r24
    1216:	83 81       	ldd	r24, Z+3	; 0x03
    1218:	80 93 a7 00 	sts	0x00A7, r24
			return 0;
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	01 c0       	rjmp	.+2      	; 0x1222 <usbFunctionSetup+0xb0>
		}
	}

	return 0; // by default don't return any data
    1220:	80 e0       	ldi	r24, 0x00	; 0
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <usbFunctionWrite>:

usbMsgLen_t usbFunctionWrite(uint8_t * data, uchar len) {
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	00 d0       	rcall	.+0      	; 0x1236 <usbFunctionWrite+0x6>
    1236:	0f 92       	push	r0
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	9a 83       	std	Y+2, r25	; 0x02
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	6b 83       	std	Y+3, r22	; 0x03
	if (data[0] == LED_state)
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	9a 81       	ldd	r25, Y+2	; 0x02
    1246:	fc 01       	movw	r30, r24
    1248:	90 81       	ld	r25, Z
    124a:	80 91 62 00 	lds	r24, 0x0062
    124e:	98 17       	cp	r25, r24
    1250:	11 f4       	brne	.+4      	; 0x1256 <usbFunctionWrite+0x26>
		return 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	22 c0       	rjmp	.+68     	; 0x129a <usbFunctionWrite+0x6a>
	else
		LED_state = data[0];
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	fc 01       	movw	r30, r24
    125c:	80 81       	ld	r24, Z
    125e:	80 93 62 00 	sts	0x0062, r24

	// LED state changed
	if (LED_state & CAPS_LOCK)
    1262:	80 91 62 00 	lds	r24, 0x0062
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	82 70       	andi	r24, 0x02	; 2
    126c:	90 70       	andi	r25, 0x00	; 0
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	51 f0       	breq	.+20     	; 0x1286 <usbFunctionWrite+0x56>
		PORTB |= 1 << PB0; // LED on
    1272:	88 e3       	ldi	r24, 0x38	; 56
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	28 e3       	ldi	r18, 0x38	; 56
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	f9 01       	movw	r30, r18
    127c:	20 81       	ld	r18, Z
    127e:	21 60       	ori	r18, 0x01	; 1
    1280:	fc 01       	movw	r30, r24
    1282:	20 83       	st	Z, r18
    1284:	09 c0       	rjmp	.+18     	; 0x1298 <usbFunctionWrite+0x68>
	else
		PORTB &= ~(1 << PB0); // LED off
    1286:	88 e3       	ldi	r24, 0x38	; 56
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	28 e3       	ldi	r18, 0x38	; 56
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	f9 01       	movw	r30, r18
    1290:	20 81       	ld	r18, Z
    1292:	2e 7f       	andi	r18, 0xFE	; 254
    1294:	fc 01       	movw	r30, r24
    1296:	20 83       	st	Z, r18

	return 1; // Data read, not expecting more
    1298:	81 e0       	ldi	r24, 0x01	; 1
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <buildReport>:

// The buildReport is called by main loop and it starts transmitting
// characters when messageState == STATE_SEND. The message is stored
// in messageBuffer and messagePtr tells the next character to send.
// Remember to reset messagePtr to 0 after populating the buffer!
uchar buildReport() {
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	0f 92       	push	r0
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
	uchar ch;

	if (messageState == STATE_DONE || messagePtr >= sizeof(stringBuffer)
    12b0:	80 91 63 00 	lds	r24, 0x0063
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	71 f0       	breq	.+28     	; 0x12d4 <buildReport+0x2e>
    12b8:	80 91 a8 00 	lds	r24, 0x00A8
    12bc:	80 31       	cpi	r24, 0x10	; 16
    12be:	50 f4       	brcc	.+20     	; 0x12d4 <buildReport+0x2e>
			|| stringBuffer[messagePtr] == 0) {
    12c0:	80 91 a8 00 	lds	r24, 0x00A8
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	8c 59       	subi	r24, 0x9C	; 156
    12ca:	9f 4f       	sbci	r25, 0xFF	; 255
    12cc:	fc 01       	movw	r30, r24
    12ce:	80 81       	ld	r24, Z
    12d0:	88 23       	and	r24, r24
    12d2:	31 f4       	brne	.+12     	; 0x12e0 <buildReport+0x3a>
		keyboard_report.modifier = 0;
    12d4:	10 92 9f 00 	sts	0x009F, r1
		keyboard_report.keycode[0] = 0;
    12d8:	10 92 a1 00 	sts	0x00A1, r1
		return STATE_DONE;
    12dc:	83 e0       	ldi	r24, 0x03	; 3
    12de:	94 c0       	rjmp	.+296    	; 0x1408 <buildReport+0x162>
	}

	if (messageCharNext) { // send a keypress
    12e0:	80 91 74 00 	lds	r24, 0x0074
    12e4:	88 23       	and	r24, r24
    12e6:	09 f4       	brne	.+2      	; 0x12ea <buildReport+0x44>
    12e8:	80 c0       	rjmp	.+256    	; 0x13ea <buildReport+0x144>
		ch = stringBuffer[messagePtr++];
    12ea:	20 91 a8 00 	lds	r18, 0x00A8
    12ee:	82 2f       	mov	r24, r18
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	8c 59       	subi	r24, 0x9C	; 156
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	fc 01       	movw	r30, r24
    12f8:	80 81       	ld	r24, Z
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	82 2f       	mov	r24, r18
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	80 93 a8 00 	sts	0x00A8, r24

		// convert character to modifier + keycode
		if (ch >= '0' && ch <= '9') {
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	80 33       	cpi	r24, 0x30	; 48
    1308:	78 f0       	brcs	.+30     	; 0x1328 <buildReport+0x82>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	8a 33       	cpi	r24, 0x3A	; 58
    130e:	60 f4       	brcc	.+24     	; 0x1328 <buildReport+0x82>
			keyboard_report.modifier = 0;
    1310:	10 92 9f 00 	sts	0x009F, r1
			keyboard_report.keycode[0] = (ch == '0') ? 39 : 30 + (ch - '1');
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	80 33       	cpi	r24, 0x30	; 48
    1318:	19 f0       	breq	.+6      	; 0x1320 <buildReport+0x7a>
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	83 51       	subi	r24, 0x13	; 19
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <buildReport+0x7c>
    1320:	87 e2       	ldi	r24, 0x27	; 39
    1322:	80 93 a1 00 	sts	0x00A1, r24
    1326:	67 c0       	rjmp	.+206    	; 0x13f6 <buildReport+0x150>
		} else if (ch >= 'a' && ch <= 'z') {
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	81 36       	cpi	r24, 0x61	; 97
    132c:	68 f0       	brcs	.+26     	; 0x1348 <buildReport+0xa2>
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	8b 37       	cpi	r24, 0x7B	; 123
    1332:	50 f4       	brcc	.+20     	; 0x1348 <buildReport+0xa2>
			keyboard_report.modifier = (LED_state & 2) ? MOD_SHIFT_LEFT : 0;
    1334:	80 91 62 00 	lds	r24, 0x0062
    1338:	82 70       	andi	r24, 0x02	; 2
    133a:	80 93 9f 00 	sts	0x009F, r24
			keyboard_report.keycode[0] = 4 + (ch - 'a');
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	8d 55       	subi	r24, 0x5D	; 93
    1342:	80 93 a1 00 	sts	0x00A1, r24
    1346:	57 c0       	rjmp	.+174    	; 0x13f6 <buildReport+0x150>
		} else if (ch >= 'A' && ch <= 'Z') {
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	81 34       	cpi	r24, 0x41	; 65
    134c:	a8 f0       	brcs	.+42     	; 0x1378 <buildReport+0xd2>
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	8b 35       	cpi	r24, 0x5B	; 91
    1352:	90 f4       	brcc	.+36     	; 0x1378 <buildReport+0xd2>
			keyboard_report.modifier = (LED_state & 2) ? 0 : MOD_SHIFT_LEFT;
    1354:	80 91 62 00 	lds	r24, 0x0062
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	82 70       	andi	r24, 0x02	; 2
    135e:	90 70       	andi	r25, 0x00	; 0
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	11 f0       	breq	.+4      	; 0x1368 <buildReport+0xc2>
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	01 c0       	rjmp	.+2      	; 0x136a <buildReport+0xc4>
    1368:	82 e0       	ldi	r24, 0x02	; 2
    136a:	80 93 9f 00 	sts	0x009F, r24
			keyboard_report.keycode[0] = 4 + (ch - 'A');
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	8d 53       	subi	r24, 0x3D	; 61
    1372:	80 93 a1 00 	sts	0x00A1, r24
    1376:	3f c0       	rjmp	.+126    	; 0x13f6 <buildReport+0x150>
		} else {
			keyboard_report.modifier = 0;
    1378:	10 92 9f 00 	sts	0x009F, r1
			keyboard_report.keycode[0] = 0;
    137c:	10 92 a1 00 	sts	0x00A1, r1
			switch (ch) {
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	8d 32       	cpi	r24, 0x2D	; 45
    1388:	91 05       	cpc	r25, r1
    138a:	f1 f0       	breq	.+60     	; 0x13c8 <buildReport+0x122>
    138c:	8e 32       	cpi	r24, 0x2E	; 46
    138e:	91 05       	cpc	r25, r1
    1390:	6c f4       	brge	.+26     	; 0x13ac <buildReport+0x106>
    1392:	80 32       	cpi	r24, 0x20	; 32
    1394:	91 05       	cpc	r25, r1
    1396:	e1 f0       	breq	.+56     	; 0x13d0 <buildReport+0x12a>
    1398:	81 32       	cpi	r24, 0x21	; 33
    139a:	91 05       	cpc	r25, r1
    139c:	5c f5       	brge	.+86     	; 0x13f4 <buildReport+0x14e>
    139e:	89 30       	cpi	r24, 0x09	; 9
    13a0:	91 05       	cpc	r25, r1
    13a2:	d1 f0       	breq	.+52     	; 0x13d8 <buildReport+0x132>
    13a4:	8a 30       	cpi	r24, 0x0A	; 10
    13a6:	91 05       	cpc	r25, r1
    13a8:	e1 f0       	breq	.+56     	; 0x13e2 <buildReport+0x13c>
			case '\t':
				keyboard_report.keycode[0] = 0x2B;
				break;
			case '\n':
				keyboard_report.keycode[0] = 0x28;
				break;
    13aa:	25 c0       	rjmp	.+74     	; 0x13f6 <buildReport+0x150>
			keyboard_report.modifier = (LED_state & 2) ? 0 : MOD_SHIFT_LEFT;
			keyboard_report.keycode[0] = 4 + (ch - 'A');
		} else {
			keyboard_report.modifier = 0;
			keyboard_report.keycode[0] = 0;
			switch (ch) {
    13ac:	8e 32       	cpi	r24, 0x2E	; 46
    13ae:	91 05       	cpc	r25, r1
    13b0:	21 f0       	breq	.+8      	; 0x13ba <buildReport+0x114>
    13b2:	8f 35       	cpi	r24, 0x5F	; 95
    13b4:	91 05       	cpc	r25, r1
    13b6:	29 f0       	breq	.+10     	; 0x13c2 <buildReport+0x11c>
			case '\t':
				keyboard_report.keycode[0] = 0x2B;
				break;
			case '\n':
				keyboard_report.keycode[0] = 0x28;
				break;
    13b8:	1e c0       	rjmp	.+60     	; 0x13f6 <buildReport+0x150>
		} else {
			keyboard_report.modifier = 0;
			keyboard_report.keycode[0] = 0;
			switch (ch) {
			case '.':
				keyboard_report.keycode[0] = 0x37;
    13ba:	87 e3       	ldi	r24, 0x37	; 55
    13bc:	80 93 a1 00 	sts	0x00A1, r24
				break;
    13c0:	1a c0       	rjmp	.+52     	; 0x13f6 <buildReport+0x150>
			case '_':
				keyboard_report.modifier = MOD_SHIFT_LEFT;
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	80 93 9f 00 	sts	0x009F, r24
			case '-':
				keyboard_report.keycode[0] = 0x2D;
    13c8:	8d e2       	ldi	r24, 0x2D	; 45
    13ca:	80 93 a1 00 	sts	0x00A1, r24
				break;
    13ce:	13 c0       	rjmp	.+38     	; 0x13f6 <buildReport+0x150>
			case ' ':
				keyboard_report.keycode[0] = 0x2C;
    13d0:	8c e2       	ldi	r24, 0x2C	; 44
    13d2:	80 93 a1 00 	sts	0x00A1, r24
				break;
    13d6:	0f c0       	rjmp	.+30     	; 0x13f6 <buildReport+0x150>
			case '\t':
				keyboard_report.keycode[0] = 0x2B;
    13d8:	8b e2       	ldi	r24, 0x2B	; 43
    13da:	80 93 a1 00 	sts	0x00A1, r24
				break;
    13de:	00 00       	nop
    13e0:	0a c0       	rjmp	.+20     	; 0x13f6 <buildReport+0x150>
			case '\n':
				keyboard_report.keycode[0] = 0x28;
    13e2:	88 e2       	ldi	r24, 0x28	; 40
    13e4:	80 93 a1 00 	sts	0x00A1, r24
				break;
    13e8:	06 c0       	rjmp	.+12     	; 0x13f6 <buildReport+0x150>
			}
		}
	} else { // key release before the next keypress!
		keyboard_report.modifier = 0;
    13ea:	10 92 9f 00 	sts	0x009F, r1
		keyboard_report.keycode[0] = 0;
    13ee:	10 92 a1 00 	sts	0x00A1, r1
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <buildReport+0x150>
			case '\t':
				keyboard_report.keycode[0] = 0x2B;
				break;
			case '\n':
				keyboard_report.keycode[0] = 0x28;
				break;
    13f4:	00 00       	nop
	} else { // key release before the next keypress!
		keyboard_report.modifier = 0;
		keyboard_report.keycode[0] = 0;
	}

	messageCharNext = !messageCharNext; // invert
    13f6:	90 91 74 00 	lds	r25, 0x0074
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	99 23       	and	r25, r25
    13fe:	09 f0       	breq	.+2      	; 0x1402 <buildReport+0x15c>
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	80 93 74 00 	sts	0x0074, r24

	return STATE_SEND;
    1406:	82 e0       	ldi	r24, 0x02	; 2
}
    1408:	0f 90       	pop	r0
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <eeprom_write_string>:

uint16_t eeprom_write_string(char* s, uint8_t* addr) {
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	00 d0       	rcall	.+0      	; 0x1416 <eeprom_write_string+0x6>
    1416:	00 d0       	rcall	.+0      	; 0x1418 <eeprom_write_string+0x8>
    1418:	00 d0       	rcall	.+0      	; 0x141a <eeprom_write_string+0xa>
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	9c 83       	std	Y+4, r25	; 0x04
    1420:	8b 83       	std	Y+3, r24	; 0x03
    1422:	7e 83       	std	Y+6, r23	; 0x06
    1424:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t cnt = 0;
    1426:	1a 82       	std	Y+2, r1	; 0x02
    1428:	19 82       	std	Y+1, r1	; 0x01
	do {
		eeprom_busy_wait();
    142a:	8c e3       	ldi	r24, 0x3C	; 60
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	fc 01       	movw	r30, r24
    1430:	80 81       	ld	r24, Z
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	82 70       	andi	r24, 0x02	; 2
    1438:	90 70       	andi	r25, 0x00	; 0
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	b1 f7       	brne	.-20     	; 0x142a <eeprom_write_string+0x1a>
		eeprom_write_byte(addr++, *s);
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	2d 81       	ldd	r18, Y+5	; 0x05
    1444:	3e 81       	ldd	r19, Y+6	; 0x06
    1446:	2f 5f       	subi	r18, 0xFF	; 255
    1448:	3f 4f       	sbci	r19, 0xFF	; 255
    144a:	3e 83       	std	Y+6, r19	; 0x06
    144c:	2d 83       	std	Y+5, r18	; 0x05
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	f9 01       	movw	r30, r18
    1454:	20 81       	ld	r18, Z
    1456:	62 2f       	mov	r22, r18
    1458:	0e 94 86 19 	call	0x330c	; 0x330c <__eewr_byte_m16>
		cnt++;
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	9a 81       	ldd	r25, Y+2	; 0x02
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	9a 83       	std	Y+2, r25	; 0x02
    1464:	89 83       	std	Y+1, r24	; 0x01
	} while (*s++ != '\0');
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	9c 81       	ldd	r25, Y+4	; 0x04
    146a:	fc 01       	movw	r30, r24
    146c:	80 81       	ld	r24, Z
    146e:	21 e0       	ldi	r18, 0x01	; 1
    1470:	88 23       	and	r24, r24
    1472:	09 f4       	brne	.+2      	; 0x1476 <eeprom_write_string+0x66>
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	9c 83       	std	Y+4, r25	; 0x04
    147e:	8b 83       	std	Y+3, r24	; 0x03
    1480:	22 23       	and	r18, r18
    1482:	99 f6       	brne	.-90     	; 0x142a <eeprom_write_string+0x1a>
	return cnt;
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1488:	26 96       	adiw	r28, 0x06	; 6
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <eeprom_read_string>:

uint16_t eeprom_read_string(char* s, uint8_t* addr) {
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <eeprom_read_string+0x6>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <eeprom_read_string+0x8>
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <eeprom_read_string+0xa>
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	9c 83       	std	Y+4, r25	; 0x04
    14aa:	8b 83       	std	Y+3, r24	; 0x03
    14ac:	7e 83       	std	Y+6, r23	; 0x06
    14ae:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t cnt = 0;
    14b0:	1a 82       	std	Y+2, r1	; 0x02
    14b2:	19 82       	std	Y+1, r1	; 0x01
	do {
		eeprom_busy_wait();
    14b4:	8c e3       	ldi	r24, 0x3C	; 60
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	fc 01       	movw	r30, r24
    14ba:	80 81       	ld	r24, Z
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	82 70       	andi	r24, 0x02	; 2
    14c2:	90 70       	andi	r25, 0x00	; 0
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	b1 f7       	brne	.-20     	; 0x14b4 <eeprom_read_string+0x1a>
		*s = eeprom_read_byte(addr++);
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	2d 81       	ldd	r18, Y+5	; 0x05
    14ce:	3e 81       	ldd	r19, Y+6	; 0x06
    14d0:	2f 5f       	subi	r18, 0xFF	; 255
    14d2:	3f 4f       	sbci	r19, 0xFF	; 255
    14d4:	3e 83       	std	Y+6, r19	; 0x06
    14d6:	2d 83       	std	Y+5, r18	; 0x05
    14d8:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__eerd_byte_m16>
    14dc:	28 2f       	mov	r18, r24
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	9c 81       	ldd	r25, Y+4	; 0x04
    14e2:	fc 01       	movw	r30, r24
    14e4:	20 83       	st	Z, r18
		cnt++;
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	9a 83       	std	Y+2, r25	; 0x02
    14ee:	89 83       	std	Y+1, r24	; 0x01
//		lcd_putc(*s);
	} while (*s++ != '\0');
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	fc 01       	movw	r30, r24
    14f6:	80 81       	ld	r24, Z
    14f8:	21 e0       	ldi	r18, 0x01	; 1
    14fa:	88 23       	and	r24, r24
    14fc:	09 f4       	brne	.+2      	; 0x1500 <eeprom_read_string+0x66>
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03
    150a:	22 23       	and	r18, r18
    150c:	99 f6       	brne	.-90     	; 0x14b4 <eeprom_read_string+0x1a>
	return cnt;
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1512:	26 96       	adiw	r28, 0x06	; 6
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <read_passwords>:

uint8_t read_passwords() {
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	27 97       	sbiw	r28, 0x07	; 7
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
	uint16_t addr = 0;
    153c:	1a 82       	std	Y+2, r1	; 0x02
    153e:	19 82       	std	Y+1, r1	; 0x01
	uint16_t i;
	uint8_t len;
	uint8_t hash;

	eeprom_busy_wait();
    1540:	8c e3       	ldi	r24, 0x3C	; 60
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	fc 01       	movw	r30, r24
    1546:	80 81       	ld	r24, Z
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	82 70       	andi	r24, 0x02	; 2
    154e:	90 70       	andi	r25, 0x00	; 0
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	b1 f7       	brne	.-20     	; 0x1540 <read_passwords+0x1c>
	hash=eeprom_read_byte((uint8_t*) (addr++));
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	29 81       	ldd	r18, Y+1	; 0x01
    155a:	3a 81       	ldd	r19, Y+2	; 0x02
    155c:	2f 5f       	subi	r18, 0xFF	; 255
    155e:	3f 4f       	sbci	r19, 0xFF	; 255
    1560:	3a 83       	std	Y+2, r19	; 0x02
    1562:	29 83       	std	Y+1, r18	; 0x01
    1564:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__eerd_byte_m16>
    1568:	8d 83       	std	Y+5, r24	; 0x05

	if (hash != EEPROM_HASH) {
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	8a 3a       	cpi	r24, 0xAA	; 170
    156e:	41 f0       	breq	.+16     	; 0x1580 <read_passwords+0x5c>
		lcd_clrscr();
    1570:	0e 94 17 07 	call	0xe2e	; 0xe2e <lcd_clrscr>
		lcd_puts("EEPROM corrupt");
    1574:	8e e7       	ldi	r24, 0x7E	; 126
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 55 07 	call	0xeaa	; 0xeaa <lcd_puts>
		return 0;
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	85 c0       	rjmp	.+266    	; 0x168a <read_passwords+0x166>
	}

	eeprom_busy_wait();
    1580:	8c e3       	ldi	r24, 0x3C	; 60
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	fc 01       	movw	r30, r24
    1586:	80 81       	ld	r24, Z
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	82 70       	andi	r24, 0x02	; 2
    158e:	90 70       	andi	r25, 0x00	; 0
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	b1 f7       	brne	.-20     	; 0x1580 <read_passwords+0x5c>
	len = eeprom_read_byte((uint8_t*) (addr++));
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	9a 81       	ldd	r25, Y+2	; 0x02
    1598:	29 81       	ldd	r18, Y+1	; 0x01
    159a:	3a 81       	ldd	r19, Y+2	; 0x02
    159c:	2f 5f       	subi	r18, 0xFF	; 255
    159e:	3f 4f       	sbci	r19, 0xFF	; 255
    15a0:	3a 83       	std	Y+2, r19	; 0x02
    15a2:	29 83       	std	Y+1, r18	; 0x01
    15a4:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__eerd_byte_m16>
    15a8:	8e 83       	std	Y+6, r24	; 0x06

	passwords = malloc(len * sizeof(char*));
    15aa:	8e 81       	ldd	r24, Y+6	; 0x06
    15ac:	88 2f       	mov	r24, r24
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <malloc>
    15b8:	90 93 9e 00 	sts	0x009E, r25
    15bc:	80 93 9d 00 	sts	0x009D, r24

	for (i = 0; i < len; i++) {
    15c0:	1c 82       	std	Y+4, r1	; 0x04
    15c2:	1b 82       	std	Y+3, r1	; 0x03
    15c4:	58 c0       	rjmp	.+176    	; 0x1676 <read_passwords+0x152>
		eeprom_busy_wait();
    15c6:	8c e3       	ldi	r24, 0x3C	; 60
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	fc 01       	movw	r30, r24
    15cc:	80 81       	ld	r24, Z
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	82 70       	andi	r24, 0x02	; 2
    15d4:	90 70       	andi	r25, 0x00	; 0
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	b1 f7       	brne	.-20     	; 0x15c6 <read_passwords+0xa2>
		uint8_t nr = eeprom_read_byte((uint8_t*) (addr++));
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	29 81       	ldd	r18, Y+1	; 0x01
    15e0:	3a 81       	ldd	r19, Y+2	; 0x02
    15e2:	2f 5f       	subi	r18, 0xFF	; 255
    15e4:	3f 4f       	sbci	r19, 0xFF	; 255
    15e6:	3a 83       	std	Y+2, r19	; 0x02
    15e8:	29 83       	std	Y+1, r18	; 0x01
    15ea:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__eerd_byte_m16>
    15ee:	8f 83       	std	Y+7, r24	; 0x07

		passwords[i] = malloc(nr * sizeof(char));
    15f0:	20 91 9d 00 	lds	r18, 0x009D
    15f4:	30 91 9e 00 	lds	r19, 0x009E
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	89 01       	movw	r16, r18
    1602:	08 0f       	add	r16, r24
    1604:	19 1f       	adc	r17, r25
    1606:	8f 81       	ldd	r24, Y+7	; 0x07
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <malloc>
    1610:	f8 01       	movw	r30, r16
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
		nr = eeprom_read_string(passwords[i], (uint8_t*) addr);
    1616:	20 91 9d 00 	lds	r18, 0x009D
    161a:	30 91 9e 00 	lds	r19, 0x009E
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	82 0f       	add	r24, r18
    1628:	93 1f       	adc	r25, r19
    162a:	fc 01       	movw	r30, r24
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	29 81       	ldd	r18, Y+1	; 0x01
    1632:	3a 81       	ldd	r19, Y+2	; 0x02
    1634:	b9 01       	movw	r22, r18
    1636:	0e 94 4d 0a 	call	0x149a	; 0x149a <eeprom_read_string>
    163a:	8f 83       	std	Y+7, r24	; 0x07
		lcd_puts(passwords[i]);
    163c:	20 91 9d 00 	lds	r18, 0x009D
    1640:	30 91 9e 00 	lds	r19, 0x009E
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	82 0f       	add	r24, r18
    164e:	93 1f       	adc	r25, r19
    1650:	fc 01       	movw	r30, r24
    1652:	80 81       	ld	r24, Z
    1654:	91 81       	ldd	r25, Z+1	; 0x01
    1656:	0e 94 55 07 	call	0xeaa	; 0xeaa <lcd_puts>
		addr += nr;
    165a:	8f 81       	ldd	r24, Y+7	; 0x07
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	29 81       	ldd	r18, Y+1	; 0x01
    1662:	3a 81       	ldd	r19, Y+2	; 0x02
    1664:	82 0f       	add	r24, r18
    1666:	93 1f       	adc	r25, r19
    1668:	9a 83       	std	Y+2, r25	; 0x02
    166a:	89 83       	std	Y+1, r24	; 0x01
	eeprom_busy_wait();
	len = eeprom_read_byte((uint8_t*) (addr++));

	passwords = malloc(len * sizeof(char*));

	for (i = 0; i < len; i++) {
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	9c 83       	std	Y+4, r25	; 0x04
    1674:	8b 83       	std	Y+3, r24	; 0x03
    1676:	8e 81       	ldd	r24, Y+6	; 0x06
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	82 17       	cp	r24, r18
    1682:	93 07       	cpc	r25, r19
    1684:	08 f4       	brcc	.+2      	; 0x1688 <read_passwords+0x164>
    1686:	9f cf       	rjmp	.-194    	; 0x15c6 <read_passwords+0xa2>
		nr = eeprom_read_string(passwords[i], (uint8_t*) addr);
		lcd_puts(passwords[i]);
		addr += nr;
	}

	return len;
    1688:	8e 81       	ldd	r24, Y+6	; 0x06
}
    168a:	27 96       	adiw	r28, 0x07	; 7
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	08 95       	ret

000016a0 <write_passwords>:

void write_passwords(uint8_t len, char** sarray) {
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	28 97       	sbiw	r28, 0x08	; 8
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	8e 83       	std	Y+6, r24	; 0x06
    16b6:	78 87       	std	Y+8, r23	; 0x08
    16b8:	6f 83       	std	Y+7, r22	; 0x07
	uint16_t addr = 0;
    16ba:	1a 82       	std	Y+2, r1	; 0x02
    16bc:	19 82       	std	Y+1, r1	; 0x01
	uint16_t i;

	eeprom_busy_wait();
    16be:	8c e3       	ldi	r24, 0x3C	; 60
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	fc 01       	movw	r30, r24
    16c4:	80 81       	ld	r24, Z
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	82 70       	andi	r24, 0x02	; 2
    16cc:	90 70       	andi	r25, 0x00	; 0
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	b1 f7       	brne	.-20     	; 0x16be <write_passwords+0x1e>
	eeprom_write_byte((uint8_t*) (addr++), EEPROM_HASH);
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	9a 81       	ldd	r25, Y+2	; 0x02
    16d6:	29 81       	ldd	r18, Y+1	; 0x01
    16d8:	3a 81       	ldd	r19, Y+2	; 0x02
    16da:	2f 5f       	subi	r18, 0xFF	; 255
    16dc:	3f 4f       	sbci	r19, 0xFF	; 255
    16de:	3a 83       	std	Y+2, r19	; 0x02
    16e0:	29 83       	std	Y+1, r18	; 0x01
    16e2:	6a ea       	ldi	r22, 0xAA	; 170
    16e4:	0e 94 86 19 	call	0x330c	; 0x330c <__eewr_byte_m16>

	eeprom_busy_wait();
    16e8:	8c e3       	ldi	r24, 0x3C	; 60
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	fc 01       	movw	r30, r24
    16ee:	80 81       	ld	r24, Z
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	82 70       	andi	r24, 0x02	; 2
    16f6:	90 70       	andi	r25, 0x00	; 0
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	b1 f7       	brne	.-20     	; 0x16e8 <write_passwords+0x48>
	eeprom_write_byte((uint8_t*) (addr++), len);
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1700:	29 81       	ldd	r18, Y+1	; 0x01
    1702:	3a 81       	ldd	r19, Y+2	; 0x02
    1704:	2f 5f       	subi	r18, 0xFF	; 255
    1706:	3f 4f       	sbci	r19, 0xFF	; 255
    1708:	3a 83       	std	Y+2, r19	; 0x02
    170a:	29 83       	std	Y+1, r18	; 0x01
    170c:	6e 81       	ldd	r22, Y+6	; 0x06
    170e:	0e 94 86 19 	call	0x330c	; 0x330c <__eewr_byte_m16>

	for (i = 0; i < len; i++) {
    1712:	1c 82       	std	Y+4, r1	; 0x04
    1714:	1b 82       	std	Y+3, r1	; 0x03
    1716:	31 c0       	rjmp	.+98     	; 0x177a <write_passwords+0xda>
		uint8_t nr = eeprom_write_string(sarray[i], (uint8_t*) (addr + 1));
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	2f 81       	ldd	r18, Y+7	; 0x07
    1722:	38 85       	ldd	r19, Y+8	; 0x08
    1724:	82 0f       	add	r24, r18
    1726:	93 1f       	adc	r25, r19
    1728:	fc 01       	movw	r30, r24
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	29 81       	ldd	r18, Y+1	; 0x01
    1730:	3a 81       	ldd	r19, Y+2	; 0x02
    1732:	2f 5f       	subi	r18, 0xFF	; 255
    1734:	3f 4f       	sbci	r19, 0xFF	; 255
    1736:	b9 01       	movw	r22, r18
    1738:	0e 94 08 0a 	call	0x1410	; 0x1410 <eeprom_write_string>
    173c:	8d 83       	std	Y+5, r24	; 0x05
		eeprom_busy_wait();
    173e:	8c e3       	ldi	r24, 0x3C	; 60
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	fc 01       	movw	r30, r24
    1744:	80 81       	ld	r24, Z
    1746:	88 2f       	mov	r24, r24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	82 70       	andi	r24, 0x02	; 2
    174c:	90 70       	andi	r25, 0x00	; 0
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	b1 f7       	brne	.-20     	; 0x173e <write_passwords+0x9e>
		eeprom_write_byte((uint8_t*) addr, nr);
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	9a 81       	ldd	r25, Y+2	; 0x02
    1756:	6d 81       	ldd	r22, Y+5	; 0x05
    1758:	0e 94 86 19 	call	0x330c	; 0x330c <__eewr_byte_m16>
		addr += 1 + nr;
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	82 0f       	add	r24, r18
    1768:	93 1f       	adc	r25, r19
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	9a 83       	std	Y+2, r25	; 0x02
    176e:	89 83       	std	Y+1, r24	; 0x01
	eeprom_write_byte((uint8_t*) (addr++), EEPROM_HASH);

	eeprom_busy_wait();
	eeprom_write_byte((uint8_t*) (addr++), len);

	for (i = 0; i < len; i++) {
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	8b 83       	std	Y+3, r24	; 0x03
    177a:	8e 81       	ldd	r24, Y+6	; 0x06
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	82 17       	cp	r24, r18
    1786:	93 07       	cpc	r25, r19
    1788:	38 f2       	brcs	.-114    	; 0x1718 <write_passwords+0x78>
		uint8_t nr = eeprom_write_string(sarray[i], (uint8_t*) (addr + 1));
		eeprom_busy_wait();
		eeprom_write_byte((uint8_t*) addr, nr);
		addr += 1 + nr;
	}
}
    178a:	28 96       	adiw	r28, 0x08	; 8
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <toggle_led>:

void toggle_led(uint8_t pin) {
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	0f 92       	push	r0
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	89 83       	std	Y+1, r24	; 0x01
	PORTB ^= _BV(pin);
    17a8:	88 e3       	ldi	r24, 0x38	; 56
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	28 e3       	ldi	r18, 0x38	; 56
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	f9 01       	movw	r30, r18
    17b2:	20 81       	ld	r18, Z
    17b4:	62 2f       	mov	r22, r18
    17b6:	29 81       	ldd	r18, Y+1	; 0x01
    17b8:	42 2f       	mov	r20, r18
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	21 e0       	ldi	r18, 0x01	; 1
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	04 2e       	mov	r0, r20
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <toggle_led+0x2c>
    17c4:	22 0f       	add	r18, r18
    17c6:	33 1f       	adc	r19, r19
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <toggle_led+0x28>
    17cc:	26 27       	eor	r18, r22
    17ce:	fc 01       	movw	r30, r24
    17d0:	20 83       	st	Z, r18
}
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <button_is_pressed>:

uint8_t button_is_pressed(uint8_t pin, uint8_t button) {
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <button_is_pressed+0x6>
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	6a 83       	std	Y+2, r22	; 0x02
	return (bit_is_clear(pin, button));
    17e8:	ce 01       	movw	r24, r28
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	fc 01       	movw	r30, r24
    17ee:	80 81       	ld	r24, Z
    17f0:	88 2f       	mov	r24, r24
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	2a 81       	ldd	r18, Y+2	; 0x02
    17f6:	22 2f       	mov	r18, r18
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <button_is_pressed+0x26>
    17fc:	95 95       	asr	r25
    17fe:	87 95       	ror	r24
    1800:	2a 95       	dec	r18
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <button_is_pressed+0x22>
    1804:	81 70       	andi	r24, 0x01	; 1
    1806:	90 70       	andi	r25, 0x00	; 0
    1808:	21 e0       	ldi	r18, 0x01	; 1
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	09 f0       	breq	.+2      	; 0x1810 <button_is_pressed+0x36>
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	82 2f       	mov	r24, r18

}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <poll_buttons>:

uint8_t poll_buttons() {
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62

	static uint8_t menu_count = 0, select_count = 0, next_count = 0;
	static uint8_t menu_state = STATE_PRESSED, select_state = STATE_PRESSED,
			next_state = STATE_PRESSED;

	if (button_is_pressed(PIND, MENU)) {
    1824:	80 e3       	ldi	r24, 0x30	; 48
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	fc 01       	movw	r30, r24
    182a:	80 81       	ld	r24, Z
    182c:	66 e0       	ldi	r22, 0x06	; 6
    182e:	0e 94 ed 0b 	call	0x17da	; 0x17da <button_is_pressed>
    1832:	88 23       	and	r24, r24
    1834:	91 f0       	breq	.+36     	; 0x185a <poll_buttons+0x3e>
		if (menu_state == STATE_RELEASED) {
    1836:	80 91 ab 00 	lds	r24, 0x00AB
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	99 f4       	brne	.+38     	; 0x1864 <poll_buttons+0x48>
			if (menu_count == DEBOUNCE_PERIOD) {
    183e:	80 91 ac 00 	lds	r24, 0x00AC
    1842:	88 3c       	cpi	r24, 0xC8	; 200
    1844:	21 f4       	brne	.+8      	; 0x184e <poll_buttons+0x32>
				menu_state = STATE_PRESSED;
    1846:	10 92 ab 00 	sts	0x00AB, r1
				return MENU;
    184a:	86 e0       	ldi	r24, 0x06	; 6
    184c:	4c c0       	rjmp	.+152    	; 0x18e6 <poll_buttons+0xca>
			} else {
				menu_count++;
    184e:	80 91 ac 00 	lds	r24, 0x00AC
    1852:	8f 5f       	subi	r24, 0xFF	; 255
    1854:	80 93 ac 00 	sts	0x00AC, r24
    1858:	05 c0       	rjmp	.+10     	; 0x1864 <poll_buttons+0x48>
			}
		}
	} else {
		menu_state = STATE_RELEASED;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	80 93 ab 00 	sts	0x00AB, r24
		menu_count = 0;
    1860:	10 92 ac 00 	sts	0x00AC, r1
	}

	if (button_is_pressed(PIND, SELECT)) {
    1864:	80 e3       	ldi	r24, 0x30	; 48
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	fc 01       	movw	r30, r24
    186a:	80 81       	ld	r24, Z
    186c:	65 e0       	ldi	r22, 0x05	; 5
    186e:	0e 94 ed 0b 	call	0x17da	; 0x17da <button_is_pressed>
    1872:	88 23       	and	r24, r24
    1874:	91 f0       	breq	.+36     	; 0x189a <poll_buttons+0x7e>
		if (select_state == STATE_RELEASED) {
    1876:	80 91 ad 00 	lds	r24, 0x00AD
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	99 f4       	brne	.+38     	; 0x18a4 <poll_buttons+0x88>
			if (select_count == DEBOUNCE_PERIOD) {
    187e:	80 91 ae 00 	lds	r24, 0x00AE
    1882:	88 3c       	cpi	r24, 0xC8	; 200
    1884:	21 f4       	brne	.+8      	; 0x188e <poll_buttons+0x72>
				select_state = STATE_PRESSED;
    1886:	10 92 ad 00 	sts	0x00AD, r1
				return SELECT;
    188a:	85 e0       	ldi	r24, 0x05	; 5
    188c:	2c c0       	rjmp	.+88     	; 0x18e6 <poll_buttons+0xca>
			} else {
				select_count++;
    188e:	80 91 ae 00 	lds	r24, 0x00AE
    1892:	8f 5f       	subi	r24, 0xFF	; 255
    1894:	80 93 ae 00 	sts	0x00AE, r24
    1898:	05 c0       	rjmp	.+10     	; 0x18a4 <poll_buttons+0x88>
			}
		}
	} else {
		select_state = STATE_RELEASED;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	80 93 ad 00 	sts	0x00AD, r24
		select_count = 0;
    18a0:	10 92 ae 00 	sts	0x00AE, r1
	}

	if (button_is_pressed(PIND, NEXT)) {
    18a4:	80 e3       	ldi	r24, 0x30	; 48
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	fc 01       	movw	r30, r24
    18aa:	80 81       	ld	r24, Z
    18ac:	64 e0       	ldi	r22, 0x04	; 4
    18ae:	0e 94 ed 0b 	call	0x17da	; 0x17da <button_is_pressed>
    18b2:	88 23       	and	r24, r24
    18b4:	91 f0       	breq	.+36     	; 0x18da <poll_buttons+0xbe>
		if (next_state == STATE_RELEASED) {
    18b6:	80 91 af 00 	lds	r24, 0x00AF
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	99 f4       	brne	.+38     	; 0x18e4 <poll_buttons+0xc8>
			if (next_count == DEBOUNCE_PERIOD) {
    18be:	80 91 b0 00 	lds	r24, 0x00B0
    18c2:	88 3c       	cpi	r24, 0xC8	; 200
    18c4:	21 f4       	brne	.+8      	; 0x18ce <poll_buttons+0xb2>
				next_state = STATE_PRESSED;
    18c6:	10 92 af 00 	sts	0x00AF, r1
				return NEXT;
    18ca:	84 e0       	ldi	r24, 0x04	; 4
    18cc:	0c c0       	rjmp	.+24     	; 0x18e6 <poll_buttons+0xca>
			} else {
				next_count++;
    18ce:	80 91 b0 00 	lds	r24, 0x00B0
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	80 93 b0 00 	sts	0x00B0, r24
    18d8:	05 c0       	rjmp	.+10     	; 0x18e4 <poll_buttons+0xc8>
			}
		}
	} else {
		next_state = STATE_RELEASED;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	80 93 af 00 	sts	0x00AF, r24
		next_count = 0;
    18e0:	10 92 b0 00 	sts	0x00B0, r1
	}

	return UINT8_MAX;
    18e4:	8f ef       	ldi	r24, 0xFF	; 255
}
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <lcd_backspace>:

uint8_t lcd_backspace(uint8_t cnt) {
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	0f 92       	push	r0
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	89 83       	std	Y+1, r24	; 0x01
	if (cnt == 0) {
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	88 23       	and	r24, r24
    18fc:	11 f4       	brne	.+4      	; 0x1902 <lcd_backspace+0x16>
		return cnt;
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	1a c0       	rjmp	.+52     	; 0x1936 <lcd_backspace+0x4a>
	}

	if (cnt != LCD_DISP_LENGTH) {
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	80 31       	cpi	r24, 0x10	; 16
    1906:	51 f0       	breq	.+20     	; 0x191c <lcd_backspace+0x30>
		lcd_command(LCD_MOVE_CURSOR_LEFT);
    1908:	80 e1       	ldi	r24, 0x10	; 16
    190a:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_command>
		lcd_putc(' ');
    190e:	80 e2       	ldi	r24, 0x20	; 32
    1910:	0e 94 2b 07 	call	0xe56	; 0xe56 <lcd_putc>
		lcd_command(LCD_MOVE_CURSOR_LEFT);
    1914:	80 e1       	ldi	r24, 0x10	; 16
    1916:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_command>
    191a:	0b c0       	rjmp	.+22     	; 0x1932 <lcd_backspace+0x46>
	} else {
		lcd_gotoxy(LCD_DISP_LENGTH - 1, 0);
    191c:	8f e0       	ldi	r24, 0x0F	; 15
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	0e 94 f4 06 	call	0xde8	; 0xde8 <lcd_gotoxy>
		lcd_putc(' ');
    1924:	80 e2       	ldi	r24, 0x20	; 32
    1926:	0e 94 2b 07 	call	0xe56	; 0xe56 <lcd_putc>
		lcd_gotoxy(LCD_DISP_LENGTH - 1, 0);
    192a:	8f e0       	ldi	r24, 0x0F	; 15
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	0e 94 f4 06 	call	0xde8	; 0xde8 <lcd_gotoxy>
	}

	return cnt - 1;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	81 50       	subi	r24, 0x01	; 1
}
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <input_password>:

uint8_t input_password() {
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	00 d0       	rcall	.+0      	; 0x1944 <input_password+0x6>
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	uint8_t cnt = 0;
    1948:	19 82       	std	Y+1, r1	; 0x01
	uchar c;

	lcd_clrscr();
    194a:	0e 94 17 07 	call	0xe2e	; 0xe2e <lcd_clrscr>

	kb_clear_buff();
    194e:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <kb_clear_buff>
	c = kb_get_char();
    1952:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <kb_get_char>
    1956:	8a 83       	std	Y+2, r24	; 0x02
	while (c != '\r') {
    1958:	24 c0       	rjmp	.+72     	; 0x19a2 <input_password+0x64>
		if (c == ESC) {
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	8b 31       	cpi	r24, 0x1B	; 27
    195e:	11 f4       	brne	.+4      	; 0x1964 <input_password+0x26>
			return 0;
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	23 c0       	rjmp	.+70     	; 0x19aa <input_password+0x6c>
		} else if (c == BACKSPACE) {
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	88 30       	cpi	r24, 0x08	; 8
    1968:	29 f4       	brne	.+10     	; 0x1974 <input_password+0x36>
			cnt = lcd_backspace(cnt);
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	0e 94 76 0c 	call	0x18ec	; 0x18ec <lcd_backspace>
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	14 c0       	rjmp	.+40     	; 0x199c <input_password+0x5e>
		} else if ((c < 0x80) && (cnt < LCD_LINES * LCD_DISP_LENGTH)) {
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	88 23       	and	r24, r24
    1978:	8c f0       	brlt	.+34     	; 0x199c <input_password+0x5e>
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	80 32       	cpi	r24, 0x20	; 32
    197e:	70 f4       	brcc	.+28     	; 0x199c <input_password+0x5e>
			//If ASCII character is printable
			lcd_putc(c);
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	0e 94 2b 07 	call	0xe56	; 0xe56 <lcd_putc>
			stringBuffer[cnt++] = c;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	8c 59       	subi	r24, 0x9C	; 156
    198e:	9f 4f       	sbci	r25, 0xFF	; 255
    1990:	2a 81       	ldd	r18, Y+2	; 0x02
    1992:	fc 01       	movw	r30, r24
    1994:	20 83       	st	Z, r18
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	8f 5f       	subi	r24, 0xFF	; 255
    199a:	89 83       	std	Y+1, r24	; 0x01
		}
		c = kb_get_char();
    199c:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <kb_get_char>
    19a0:	8a 83       	std	Y+2, r24	; 0x02

	lcd_clrscr();

	kb_clear_buff();
	c = kb_get_char();
	while (c != '\r') {
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	8d 30       	cpi	r24, 0x0D	; 13
    19a6:	c9 f6       	brne	.-78     	; 0x195a <input_password+0x1c>
			lcd_putc(c);
			stringBuffer[cnt++] = c;
		}
		c = kb_get_char();
	}
	return cnt;
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <main>:

int main() {
    19b4:	ef 92       	push	r14
    19b6:	ff 92       	push	r15
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	69 97       	sbiw	r28, 0x19	; 25
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
	uint8_t index;
	uint8_t menulen;
	uint8_t button_pressed = UINT8_MAX - 1;
    19d0:	8e ef       	ldi	r24, 0xFE	; 254
    19d2:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	uint8_t pass_len;

//	wdt_enable(WDTO_1S); // enable 1s watchdog timer

	init();
    19d4:	0e 94 f7 07 	call	0xfee	; 0xfee <init>

	for (i = 0; i < sizeof(keyboard_report); i++) // clear report initially
    19d8:	1d 82       	std	Y+5, r1	; 0x05
    19da:	1c 82       	std	Y+4, r1	; 0x04
    19dc:	0b c0       	rjmp	.+22     	; 0x19f4 <main+0x40>
		((uchar *) &keyboard_report)[i] = 0;
    19de:	8c 81       	ldd	r24, Y+4	; 0x04
    19e0:	9d 81       	ldd	r25, Y+5	; 0x05
    19e2:	81 56       	subi	r24, 0x61	; 97
    19e4:	9f 4f       	sbci	r25, 0xFF	; 255
    19e6:	fc 01       	movw	r30, r24
    19e8:	10 82       	st	Z, r1

//	wdt_enable(WDTO_1S); // enable 1s watchdog timer

	init();

	for (i = 0; i < sizeof(keyboard_report); i++) // clear report initially
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	9d 81       	ldd	r25, Y+5	; 0x05
    19ee:	01 96       	adiw	r24, 0x01	; 1
    19f0:	9d 83       	std	Y+5, r25	; 0x05
    19f2:	8c 83       	std	Y+4, r24	; 0x04
    19f4:	8c 81       	ldd	r24, Y+4	; 0x04
    19f6:	9d 81       	ldd	r25, Y+5	; 0x05
    19f8:	88 30       	cpi	r24, 0x08	; 8
    19fa:	91 05       	cpc	r25, r1
    19fc:	80 f3       	brcs	.-32     	; 0x19de <main+0x2a>
		((uchar *) &keyboard_report)[i] = 0;

	usbDeviceDisconnect(); // enforce re-enumeration
    19fe:	81 e3       	ldi	r24, 0x31	; 49
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	21 e3       	ldi	r18, 0x31	; 49
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	f9 01       	movw	r30, r18
    1a08:	20 81       	ld	r18, Z
    1a0a:	28 60       	ori	r18, 0x08	; 8
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	20 83       	st	Z, r18
	for (i = 0; i < 250; i++) { // wait 500 ms
    1a10:	1d 82       	std	Y+5, r1	; 0x05
    1a12:	1c 82       	std	Y+4, r1	; 0x04
    1a14:	86 c0       	rjmp	.+268    	; 0x1b22 <main+0x16e>
		wdt_reset();
    1a16:	a8 95       	wdr
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	a0 e0       	ldi	r26, 0x00	; 0
    1a1e:	b0 e4       	ldi	r27, 0x40	; 64
    1a20:	8c 87       	std	Y+12, r24	; 0x0c
    1a22:	9d 87       	std	Y+13, r25	; 0x0d
    1a24:	ae 87       	std	Y+14, r26	; 0x0e
    1a26:	bf 87       	std	Y+15, r27	; 0x0f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a28:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e8       	ldi	r19, 0x80	; 128
    1a34:	4b e3       	ldi	r20, 0x3B	; 59
    1a36:	55 e4       	ldi	r21, 0x45	; 69
    1a38:	0e 94 c6 13 	call	0x278c	; 0x278c <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	88 8b       	std	Y+16, r24	; 0x10
    1a42:	99 8b       	std	Y+17, r25	; 0x11
    1a44:	aa 8b       	std	Y+18, r26	; 0x12
    1a46:	bb 8b       	std	Y+19, r27	; 0x13
	if (__tmp < 1.0)
    1a48:	11 e0       	ldi	r17, 0x01	; 1
    1a4a:	68 89       	ldd	r22, Y+16	; 0x10
    1a4c:	79 89       	ldd	r23, Y+17	; 0x11
    1a4e:	8a 89       	ldd	r24, Y+18	; 0x12
    1a50:	9b 89       	ldd	r25, Y+19	; 0x13
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	5f e3       	ldi	r21, 0x3F	; 63
    1a5a:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__ltsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	0c f0       	brlt	.+2      	; 0x1a64 <main+0xb0>
    1a62:	10 e0       	ldi	r17, 0x00	; 0
    1a64:	11 23       	and	r17, r17
    1a66:	29 f0       	breq	.+10     	; 0x1a72 <main+0xbe>
		__ticks = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9d 8b       	std	Y+21, r25	; 0x15
    1a6e:	8c 8b       	std	Y+20, r24	; 0x14
    1a70:	46 c0       	rjmp	.+140    	; 0x1afe <main+0x14a>
	else if (__tmp > 65535)
    1a72:	11 e0       	ldi	r17, 0x01	; 1
    1a74:	68 89       	ldd	r22, Y+16	; 0x10
    1a76:	79 89       	ldd	r23, Y+17	; 0x11
    1a78:	8a 89       	ldd	r24, Y+18	; 0x12
    1a7a:	9b 89       	ldd	r25, Y+19	; 0x13
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	3f ef       	ldi	r19, 0xFF	; 255
    1a80:	4f e7       	ldi	r20, 0x7F	; 127
    1a82:	57 e4       	ldi	r21, 0x47	; 71
    1a84:	0e 94 c0 14 	call	0x2980	; 0x2980 <__gtsf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	0c f0       	brlt	.+2      	; 0x1a8e <main+0xda>
    1a8c:	10 e0       	ldi	r17, 0x00	; 0
    1a8e:	11 23       	and	r17, r17
    1a90:	61 f1       	breq	.+88     	; 0x1aea <main+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a92:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a94:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a96:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a98:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	0e 94 c6 13 	call	0x278c	; 0x278c <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9d 8b       	std	Y+21, r25	; 0x15
    1ab8:	8c 8b       	std	Y+20, r24	; 0x14
    1aba:	12 c0       	rjmp	.+36     	; 0x1ae0 <main+0x12c>
    1abc:	8c e2       	ldi	r24, 0x2C	; 44
    1abe:	91 e0       	ldi	r25, 0x01	; 1
    1ac0:	9f 8b       	std	Y+23, r25	; 0x17
    1ac2:	8e 8b       	std	Y+22, r24	; 0x16
    1ac4:	8e 89       	ldd	r24, Y+22	; 0x16
    1ac6:	9f 89       	ldd	r25, Y+23	; 0x17
    1ac8:	8c 01       	movw	r16, r24
    1aca:	c8 01       	movw	r24, r16
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <main+0x118>
    1ad0:	8c 01       	movw	r16, r24
    1ad2:	1f 8b       	std	Y+23, r17	; 0x17
    1ad4:	0e 8b       	std	Y+22, r16	; 0x16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ad8:	9d 89       	ldd	r25, Y+21	; 0x15
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	9d 8b       	std	Y+21, r25	; 0x15
    1ade:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ae2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	51 f7       	brne	.-44     	; 0x1abc <main+0x108>
    1ae8:	17 c0       	rjmp	.+46     	; 0x1b18 <main+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aea:	68 89       	ldd	r22, Y+16	; 0x10
    1aec:	79 89       	ldd	r23, Y+17	; 0x11
    1aee:	8a 89       	ldd	r24, Y+18	; 0x12
    1af0:	9b 89       	ldd	r25, Y+19	; 0x13
    1af2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9d 8b       	std	Y+21, r25	; 0x15
    1afc:	8c 8b       	std	Y+20, r24	; 0x14
    1afe:	8c 89       	ldd	r24, Y+20	; 0x14
    1b00:	9d 89       	ldd	r25, Y+21	; 0x15
    1b02:	99 8f       	std	Y+25, r25	; 0x19
    1b04:	88 8f       	std	Y+24, r24	; 0x18
    1b06:	88 8d       	ldd	r24, Y+24	; 0x18
    1b08:	99 8d       	ldd	r25, Y+25	; 0x19
    1b0a:	8c 01       	movw	r16, r24
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	31 97       	sbiw	r30, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <main+0x15a>
    1b12:	8f 01       	movw	r16, r30
    1b14:	19 8f       	std	Y+25, r17	; 0x19
    1b16:	08 8f       	std	Y+24, r16	; 0x18

	for (i = 0; i < sizeof(keyboard_report); i++) // clear report initially
		((uchar *) &keyboard_report)[i] = 0;

	usbDeviceDisconnect(); // enforce re-enumeration
	for (i = 0; i < 250; i++) { // wait 500 ms
    1b18:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1c:	01 96       	adiw	r24, 0x01	; 1
    1b1e:	9d 83       	std	Y+5, r25	; 0x05
    1b20:	8c 83       	std	Y+4, r24	; 0x04
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	8a 3f       	cpi	r24, 0xFA	; 250
    1b28:	91 05       	cpc	r25, r1
    1b2a:	08 f4       	brcc	.+2      	; 0x1b2e <main+0x17a>
    1b2c:	74 cf       	rjmp	.-280    	; 0x1a16 <main+0x62>
		wdt_reset();
		// keep the watchdog happy
		_delay_ms(2);
	}
	usbDeviceConnect();
    1b2e:	81 e3       	ldi	r24, 0x31	; 49
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	21 e3       	ldi	r18, 0x31	; 49
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	f9 01       	movw	r30, r18
    1b38:	20 81       	ld	r18, Z
    1b3a:	27 7f       	andi	r18, 0xF7	; 247
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	20 83       	st	Z, r18

	TCCR1B |= (1 << CS01); // timer 0 at clk/8 will generate randomness
    1b40:	8e e4       	ldi	r24, 0x4E	; 78
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	2e e4       	ldi	r18, 0x4E	; 78
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	f9 01       	movw	r30, r18
    1b4a:	20 81       	ld	r18, Z
    1b4c:	22 60       	ori	r18, 0x02	; 2
    1b4e:	fc 01       	movw	r30, r24
    1b50:	20 83       	st	Z, r18

	// Enable interrupts after re-enumeration
	sei();
    1b52:	78 94       	sei

//	eeprom_write_byte(0,0);

	pass_no = read_passwords();
    1b54:	0e 94 92 0a 	call	0x1524	; 0x1524 <read_passwords>
    1b58:	80 93 a9 00 	sts	0x00A9, r24
	index = 0;
    1b5c:	19 82       	std	Y+1, r1	; 0x01
	mode = MODE_MENU;
    1b5e:	84 e0       	ldi	r24, 0x04	; 4
    1b60:	80 93 aa 00 	sts	0x00AA, r24
	menulen = MENU_LENGTH;
    1b64:	84 e0       	ldi	r24, 0x04	; 4
    1b66:	8a 83       	std	Y+2, r24	; 0x02
    1b68:	05 c0       	rjmp	.+10     	; 0x1b74 <main+0x1c0>
		if (usbInterruptIsReady() && messageState == STATE_SEND
				&& LED_state != 0xff) {
			messageState = buildReport();
			usbSetInterrupt((void *) &keyboard_report, sizeof(keyboard_report));
		}
	}
    1b6a:	00 00       	nop
    1b6c:	03 c0       	rjmp	.+6      	; 0x1b74 <main+0x1c0>
    1b6e:	00 00       	nop
    1b70:	01 c0       	rjmp	.+2      	; 0x1b74 <main+0x1c0>
    1b72:	00 00       	nop
//		}
//		lcd_putc(c);
//	}

	while (1) {
		wdt_reset();
    1b74:	a8 95       	wdr
		// keep the watchdog happy
		usbPoll();
    1b76:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <usbPoll>

		if (button_pressed != UINT8_MAX) {
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b7e:	b9 f1       	breq	.+110    	; 0x1bee <main+0x23a>
			lcd_clrscr();
    1b80:	0e 94 17 07 	call	0xe2e	; 0xe2e <lcd_clrscr>
			if (mode == MODE_MENU) {
    1b84:	80 91 aa 00 	lds	r24, 0x00AA
    1b88:	84 30       	cpi	r24, 0x04	; 4
    1b8a:	09 f5       	brne	.+66     	; 0x1bce <main+0x21a>
				strcpy_P(stringBuffer,
						(PGM_P) pgm_read_word(&(menu_items[index])));
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	88 2f       	mov	r24, r24
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	8a 5d       	subi	r24, 0xDA	; 218
    1b98:	9e 4f       	sbci	r25, 0xFE	; 254
    1b9a:	9f 83       	std	Y+7, r25	; 0x07
    1b9c:	8e 83       	std	Y+6, r24	; 0x06
    1b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba2:	8c 01       	movw	r16, r24
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	e5 90       	lpm	r14, Z+
    1ba8:	f4 90       	lpm	r15, Z+
    1baa:	8f 01       	movw	r16, r30
    1bac:	f9 86       	std	Y+9, r15	; 0x09
    1bae:	e8 86       	std	Y+8, r14	; 0x08
    1bb0:	1f 83       	std	Y+7, r17	; 0x07
    1bb2:	0e 83       	std	Y+6, r16	; 0x06
    1bb4:	88 85       	ldd	r24, Y+8	; 0x08
    1bb6:	99 85       	ldd	r25, Y+9	; 0x09
		usbPoll();

		if (button_pressed != UINT8_MAX) {
			lcd_clrscr();
			if (mode == MODE_MENU) {
				strcpy_P(stringBuffer,
    1bb8:	9c 01       	movw	r18, r24
    1bba:	84 e6       	ldi	r24, 0x64	; 100
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	b9 01       	movw	r22, r18
    1bc0:	0e 94 67 19 	call	0x32ce	; 0x32ce <strcpy_P>
						(PGM_P) pgm_read_word(&(menu_items[index])));
				lcd_puts(stringBuffer);
    1bc4:	84 e6       	ldi	r24, 0x64	; 100
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	0e 94 55 07 	call	0xeaa	; 0xeaa <lcd_puts>
    1bcc:	10 c0       	rjmp	.+32     	; 0x1bee <main+0x23a>
			} else {
				lcd_puts(passwords[index]);
    1bce:	20 91 9d 00 	lds	r18, 0x009D
    1bd2:	30 91 9e 00 	lds	r19, 0x009E
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	82 0f       	add	r24, r18
    1be2:	93 1f       	adc	r25, r19
    1be4:	fc 01       	movw	r30, r24
    1be6:	80 81       	ld	r24, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	0e 94 55 07 	call	0xeaa	; 0xeaa <lcd_puts>
			}
		}

		button_pressed = poll_buttons();
    1bee:	0e 94 0e 0c 	call	0x181c	; 0x181c <poll_buttons>
    1bf2:	8b 83       	std	Y+3, r24	; 0x03

		switch (button_pressed) {
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	88 2f       	mov	r24, r24
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	85 30       	cpi	r24, 0x05	; 5
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	31 f1       	breq	.+76     	; 0x1c4c <main+0x298>
    1c00:	86 30       	cpi	r24, 0x06	; 6
    1c02:	91 05       	cpc	r25, r1
    1c04:	21 f0       	breq	.+8      	; 0x1c0e <main+0x25a>
    1c06:	84 30       	cpi	r24, 0x04	; 4
    1c08:	91 05       	cpc	r25, r1
    1c0a:	59 f0       	breq	.+22     	; 0x1c22 <main+0x26e>
    1c0c:	77 c1       	rjmp	.+750    	; 0x1efc <main+0x548>
		case MENU:

			mode = MODE_MENU;
    1c0e:	84 e0       	ldi	r24, 0x04	; 4
    1c10:	80 93 aa 00 	sts	0x00AA, r24
			index = 0;
    1c14:	19 82       	std	Y+1, r1	; 0x01
			menulen = MENU_LENGTH;
    1c16:	84 e0       	ldi	r24, 0x04	; 4
    1c18:	8a 83       	std	Y+2, r24	; 0x02

			toggle_led(PB0);
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	0e 94 ce 0b 	call	0x179c	; 0x179c <toggle_led>
			break;
    1c20:	6d c1       	rjmp	.+730    	; 0x1efc <main+0x548>

		case NEXT:
			if (index < menulen - 1) {
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	88 2f       	mov	r24, r24
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	28 17       	cp	r18, r24
    1c32:	39 07       	cpc	r19, r25
    1c34:	34 f4       	brge	.+12     	; 0x1c42 <main+0x28e>
				lcd_clrscr();
    1c36:	0e 94 17 07 	call	0xe2e	; 0xe2e <lcd_clrscr>
				index++;
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	8f 5f       	subi	r24, 0xFF	; 255
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	01 c0       	rjmp	.+2      	; 0x1c44 <main+0x290>
			} else {
				index = 0;
    1c42:	19 82       	std	Y+1, r1	; 0x01
			}
			toggle_led(PB0);
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	0e 94 ce 0b 	call	0x179c	; 0x179c <toggle_led>
			break;
    1c4a:	58 c1       	rjmp	.+688    	; 0x1efc <main+0x548>

		case SELECT:
			if (mode == MODE_MENU) {
    1c4c:	80 91 aa 00 	lds	r24, 0x00AA
    1c50:	84 30       	cpi	r24, 0x04	; 4
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <main+0x2a2>
    1c54:	6b c0       	rjmp	.+214    	; 0x1d2c <main+0x378>
				if (index == MODE_ADD) {
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <main+0x2aa>
    1c5c:	5f c0       	rjmp	.+190    	; 0x1d1c <main+0x368>

					uint8_t pass_len;

					pass_len = input_password();
    1c5e:	0e 94 9f 0c 	call	0x193e	; 0x193e <input_password>
    1c62:	8a 87       	std	Y+10, r24	; 0x0a

					if (pass_len > 0) {
    1c64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c66:	88 23       	and	r24, r24
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <main+0x2b8>
    1c6a:	54 c0       	rjmp	.+168    	; 0x1d14 <main+0x360>
						stringBuffer[pass_len] = '\0';
    1c6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c6e:	88 2f       	mov	r24, r24
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	8c 59       	subi	r24, 0x9C	; 156
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	fc 01       	movw	r30, r24
    1c78:	10 82       	st	Z, r1

						passwords = realloc(passwords,
    1c7a:	80 91 9d 00 	lds	r24, 0x009D
    1c7e:	90 91 9e 00 	lds	r25, 0x009E
    1c82:	20 91 a9 00 	lds	r18, 0x00A9
    1c86:	22 2f       	mov	r18, r18
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	2f 5f       	subi	r18, 0xFF	; 255
    1c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8e:	22 0f       	add	r18, r18
    1c90:	33 1f       	adc	r19, r19
    1c92:	b9 01       	movw	r22, r18
    1c94:	0e 94 9c 18 	call	0x3138	; 0x3138 <realloc>
    1c98:	90 93 9e 00 	sts	0x009E, r25
    1c9c:	80 93 9d 00 	sts	0x009D, r24
								(pass_no + 1) * sizeof(char*));
						passwords[pass_no] = malloc(pass_len * sizeof(char));
    1ca0:	20 91 9d 00 	lds	r18, 0x009D
    1ca4:	30 91 9e 00 	lds	r19, 0x009E
    1ca8:	80 91 a9 00 	lds	r24, 0x00A9
    1cac:	88 2f       	mov	r24, r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	89 01       	movw	r16, r18
    1cb6:	08 0f       	add	r16, r24
    1cb8:	19 1f       	adc	r17, r25
    1cba:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <malloc>
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	91 83       	std	Z+1, r25	; 0x01
    1cc8:	80 83       	st	Z, r24
						strcpy(passwords[pass_no], stringBuffer);
    1cca:	20 91 9d 00 	lds	r18, 0x009D
    1cce:	30 91 9e 00 	lds	r19, 0x009E
    1cd2:	80 91 a9 00 	lds	r24, 0x00A9
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	82 0f       	add	r24, r18
    1ce0:	93 1f       	adc	r25, r19
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	80 81       	ld	r24, Z
    1ce6:	91 81       	ldd	r25, Z+1	; 0x01
    1ce8:	24 e6       	ldi	r18, 0x64	; 100
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	b9 01       	movw	r22, r18
    1cee:	0e 94 77 19 	call	0x32ee	; 0x32ee <strcpy>
						pass_no++;
    1cf2:	80 91 a9 00 	lds	r24, 0x00A9
    1cf6:	8f 5f       	subi	r24, 0xFF	; 255
    1cf8:	80 93 a9 00 	sts	0x00A9, r24
						menulen = pass_no;
    1cfc:	80 91 a9 00 	lds	r24, 0x00A9
    1d00:	8a 83       	std	Y+2, r24	; 0x02
						write_passwords(pass_no, passwords);
    1d02:	80 91 a9 00 	lds	r24, 0x00A9
    1d06:	20 91 9d 00 	lds	r18, 0x009D
    1d0a:	30 91 9e 00 	lds	r19, 0x009E
    1d0e:	b9 01       	movw	r22, r18
    1d10:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <write_passwords>
					}
					toggle_led(PB0);
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	0e 94 ce 0b 	call	0x179c	; 0x179c <toggle_led>
						break;
					}
				}

			}
			break;
    1d1a:	f0 c0       	rjmp	.+480    	; 0x1efc <main+0x548>
						menulen = pass_no;
						write_passwords(pass_no, passwords);
					}
					toggle_led(PB0);
				} else {
					mode = index;
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	80 93 aa 00 	sts	0x00AA, r24
					index = 0;
    1d22:	19 82       	std	Y+1, r1	; 0x01
					menulen = pass_no;
    1d24:	80 91 a9 00 	lds	r24, 0x00A9
    1d28:	8a 83       	std	Y+2, r24	; 0x02
						break;
					}
				}

			}
			break;
    1d2a:	e8 c0       	rjmp	.+464    	; 0x1efc <main+0x548>
					index = 0;
					menulen = pass_no;
				}
			} else {
				//in SEND, REMOVE or CHANGE mode
				if (index < menulen) {
    1d2c:	99 81       	ldd	r25, Y+1	; 0x01
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	98 17       	cp	r25, r24
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <main+0x382>
    1d34:	e0 c0       	rjmp	.+448    	; 0x1ef6 <main+0x542>
					switch (mode) {
    1d36:	80 91 aa 00 	lds	r24, 0x00AA
    1d3a:	88 2f       	mov	r24, r24
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	82 30       	cpi	r24, 0x02	; 2
    1d40:	91 05       	cpc	r25, r1
    1d42:	01 f1       	breq	.+64     	; 0x1d84 <main+0x3d0>
    1d44:	83 30       	cpi	r24, 0x03	; 3
    1d46:	91 05       	cpc	r25, r1
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <main+0x398>
    1d4a:	82 c0       	rjmp	.+260    	; 0x1e50 <main+0x49c>
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <main+0x39e>
    1d50:	d4 c0       	rjmp	.+424    	; 0x1efa <main+0x546>
					case MODE_SEND:
						strcpy(stringBuffer, passwords[index]);
    1d52:	20 91 9d 00 	lds	r18, 0x009D
    1d56:	30 91 9e 00 	lds	r19, 0x009E
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	88 2f       	mov	r24, r24
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	82 0f       	add	r24, r18
    1d66:	93 1f       	adc	r25, r19
    1d68:	fc 01       	movw	r30, r24
    1d6a:	20 81       	ld	r18, Z
    1d6c:	31 81       	ldd	r19, Z+1	; 0x01
    1d6e:	84 e6       	ldi	r24, 0x64	; 100
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	b9 01       	movw	r22, r18
    1d74:	0e 94 77 19 	call	0x32ee	; 0x32ee <strcpy>
						messagePtr = 0;
    1d78:	10 92 a8 00 	sts	0x00A8, r1
						messageState = STATE_SEND;
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	80 93 63 00 	sts	0x0063, r24
						break;
    1d82:	b8 c0       	rjmp	.+368    	; 0x1ef4 <main+0x540>

					case MODE_REMOVE:
						free(passwords[index]);
    1d84:	20 91 9d 00 	lds	r18, 0x009D
    1d88:	30 91 9e 00 	lds	r19, 0x009E
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	82 0f       	add	r24, r18
    1d98:	93 1f       	adc	r25, r19
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	80 81       	ld	r24, Z
    1d9e:	91 81       	ldd	r25, Z+1	; 0x01
    1da0:	0e 94 03 18 	call	0x3006	; 0x3006 <free>
						for (i = index; i < pass_no - 1; i++) {
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	88 2f       	mov	r24, r24
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	9d 83       	std	Y+5, r25	; 0x05
    1dac:	8c 83       	std	Y+4, r24	; 0x04
    1dae:	21 c0       	rjmp	.+66     	; 0x1df2 <main+0x43e>
							passwords[i] = passwords[i + 1];
    1db0:	20 91 9d 00 	lds	r18, 0x009D
    1db4:	30 91 9e 00 	lds	r19, 0x009E
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	82 0f       	add	r24, r18
    1dc2:	93 1f       	adc	r25, r19
    1dc4:	40 91 9d 00 	lds	r20, 0x009D
    1dc8:	50 91 9e 00 	lds	r21, 0x009E
    1dcc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dce:	3d 81       	ldd	r19, Y+5	; 0x05
    1dd0:	2f 5f       	subi	r18, 0xFF	; 255
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	22 0f       	add	r18, r18
    1dd6:	33 1f       	adc	r19, r19
    1dd8:	24 0f       	add	r18, r20
    1dda:	35 1f       	adc	r19, r21
    1ddc:	f9 01       	movw	r30, r18
    1dde:	20 81       	ld	r18, Z
    1de0:	31 81       	ldd	r19, Z+1	; 0x01
    1de2:	fc 01       	movw	r30, r24
    1de4:	31 83       	std	Z+1, r19	; 0x01
    1de6:	20 83       	st	Z, r18
						messageState = STATE_SEND;
						break;

					case MODE_REMOVE:
						free(passwords[index]);
						for (i = index; i < pass_no - 1; i++) {
    1de8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dea:	9d 81       	ldd	r25, Y+5	; 0x05
    1dec:	01 96       	adiw	r24, 0x01	; 1
    1dee:	9d 83       	std	Y+5, r25	; 0x05
    1df0:	8c 83       	std	Y+4, r24	; 0x04
    1df2:	80 91 a9 00 	lds	r24, 0x00A9
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	9c 01       	movw	r18, r24
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	9d 81       	ldd	r25, Y+5	; 0x05
    1e02:	82 17       	cp	r24, r18
    1e04:	93 07       	cpc	r25, r19
    1e06:	a0 f2       	brcs	.-88     	; 0x1db0 <main+0x3fc>
							passwords[i] = passwords[i + 1];
						}
						pass_no--;
    1e08:	80 91 a9 00 	lds	r24, 0x00A9
    1e0c:	81 50       	subi	r24, 0x01	; 1
    1e0e:	80 93 a9 00 	sts	0x00A9, r24
						passwords = realloc(passwords, pass_no * sizeof(char*));
    1e12:	80 91 9d 00 	lds	r24, 0x009D
    1e16:	90 91 9e 00 	lds	r25, 0x009E
    1e1a:	20 91 a9 00 	lds	r18, 0x00A9
    1e1e:	22 2f       	mov	r18, r18
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	22 0f       	add	r18, r18
    1e24:	33 1f       	adc	r19, r19
    1e26:	b9 01       	movw	r22, r18
    1e28:	0e 94 9c 18 	call	0x3138	; 0x3138 <realloc>
    1e2c:	90 93 9e 00 	sts	0x009E, r25
    1e30:	80 93 9d 00 	sts	0x009D, r24
						index = 0;
    1e34:	19 82       	std	Y+1, r1	; 0x01
						menulen = pass_no;
    1e36:	80 91 a9 00 	lds	r24, 0x00A9
    1e3a:	8a 83       	std	Y+2, r24	; 0x02
						write_passwords(pass_no, passwords);
    1e3c:	80 91 a9 00 	lds	r24, 0x00A9
    1e40:	20 91 9d 00 	lds	r18, 0x009D
    1e44:	30 91 9e 00 	lds	r19, 0x009E
    1e48:	b9 01       	movw	r22, r18
    1e4a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <write_passwords>
						break;
    1e4e:	52 c0       	rjmp	.+164    	; 0x1ef4 <main+0x540>

					case MODE_CHANGE:
						pass_len = input_password();
    1e50:	0e 94 9f 0c 	call	0x193e	; 0x193e <input_password>
    1e54:	8b 87       	std	Y+11, r24	; 0x0b

						if (pass_len > 0) {
    1e56:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e58:	88 23       	and	r24, r24
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <main+0x4aa>
    1e5c:	46 c0       	rjmp	.+140    	; 0x1eea <main+0x536>
							stringBuffer[pass_len] = '\0';
    1e5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e60:	88 2f       	mov	r24, r24
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	8c 59       	subi	r24, 0x9C	; 156
    1e66:	9f 4f       	sbci	r25, 0xFF	; 255
    1e68:	fc 01       	movw	r30, r24
    1e6a:	10 82       	st	Z, r1

							passwords[index] = realloc(passwords[index],
    1e6c:	20 91 9d 00 	lds	r18, 0x009D
    1e70:	30 91 9e 00 	lds	r19, 0x009E
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	89 01       	movw	r16, r18
    1e80:	08 0f       	add	r16, r24
    1e82:	19 1f       	adc	r17, r25
    1e84:	20 91 9d 00 	lds	r18, 0x009D
    1e88:	30 91 9e 00 	lds	r19, 0x009E
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	88 2f       	mov	r24, r24
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	82 0f       	add	r24, r18
    1e98:	93 1f       	adc	r25, r19
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	80 81       	ld	r24, Z
    1e9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ea0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ea2:	22 2f       	mov	r18, r18
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	b9 01       	movw	r22, r18
    1ea8:	0e 94 9c 18 	call	0x3138	; 0x3138 <realloc>
    1eac:	f8 01       	movw	r30, r16
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	80 83       	st	Z, r24
									pass_len);
							strcpy(passwords[index], stringBuffer);
    1eb2:	20 91 9d 00 	lds	r18, 0x009D
    1eb6:	30 91 9e 00 	lds	r19, 0x009E
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	88 2f       	mov	r24, r24
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	82 0f       	add	r24, r18
    1ec6:	93 1f       	adc	r25, r19
    1ec8:	fc 01       	movw	r30, r24
    1eca:	80 81       	ld	r24, Z
    1ecc:	91 81       	ldd	r25, Z+1	; 0x01
    1ece:	24 e6       	ldi	r18, 0x64	; 100
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	b9 01       	movw	r22, r18
    1ed4:	0e 94 77 19 	call	0x32ee	; 0x32ee <strcpy>
							write_passwords(pass_no, passwords);
    1ed8:	80 91 a9 00 	lds	r24, 0x00A9
    1edc:	20 91 9d 00 	lds	r18, 0x009D
    1ee0:	30 91 9e 00 	lds	r19, 0x009E
    1ee4:	b9 01       	movw	r22, r18
    1ee6:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <write_passwords>
						}
//						mode = MODE_MENU;
						index=0;
    1eea:	19 82       	std	Y+1, r1	; 0x01
//						menulen = MENU_LENGTH;
						toggle_led(PB0);
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	0e 94 ce 0b 	call	0x179c	; 0x179c <toggle_led>
						break;
    1ef2:	00 00       	nop
					}
				}

			}
			break;
    1ef4:	03 c0       	rjmp	.+6      	; 0x1efc <main+0x548>
    1ef6:	00 00       	nop
    1ef8:	01 c0       	rjmp	.+2      	; 0x1efc <main+0x548>
    1efa:	00 00       	nop
		}
		// characters are sent when messageState == STATE_SEND and after receiving
		// the initial LED state from PC (good way to wait until device is recognized)
		if (usbInterruptIsReady() && messageState == STATE_SEND
    1efc:	80 91 d7 00 	lds	r24, 0x00D7
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	80 71       	andi	r24, 0x10	; 16
    1f06:	90 70       	andi	r25, 0x00	; 0
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <main+0x55a>
    1f0c:	2e ce       	rjmp	.-932    	; 0x1b6a <main+0x1b6>
    1f0e:	80 91 63 00 	lds	r24, 0x0063
    1f12:	82 30       	cpi	r24, 0x02	; 2
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <main+0x564>
    1f16:	2b ce       	rjmp	.-938    	; 0x1b6e <main+0x1ba>
				&& LED_state != 0xff) {
    1f18:	80 91 62 00 	lds	r24, 0x0062
    1f1c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <main+0x56e>
    1f20:	28 ce       	rjmp	.-944    	; 0x1b72 <main+0x1be>
			messageState = buildReport();
    1f22:	0e 94 53 09 	call	0x12a6	; 0x12a6 <buildReport>
    1f26:	80 93 63 00 	sts	0x0063, r24
			usbSetInterrupt((void *) &keyboard_report, sizeof(keyboard_report));
    1f2a:	8f e9       	ldi	r24, 0x9F	; 159
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	68 e0       	ldi	r22, 0x08	; 8
    1f30:	0e 94 bb 01 	call	0x376	; 0x376 <usbSetInterrupt>
		}
	}
    1f34:	1f ce       	rjmp	.-962    	; 0x1b74 <main+0x1c0>

00001f36 <ps2_init>:
static volatile uint8_t bitcount, toDevice;
static volatile uint8_t buffcnt = 0;
static uint8_t kb_buffer[BUFF_SIZE];
static uint8_t *inpt, *outpt;

void ps2_init(void) {
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
	bitcount = 11;
    1f3e:	8b e0       	ldi	r24, 0x0B	; 11
    1f40:	80 93 b1 00 	sts	0x00B1, r24
	toDevice = FALSE;
    1f44:	10 92 b2 00 	sts	0x00B2, r1
	//edge = 0;
	GICR |= (1 << INT2); //enable INT2 interrupt
    1f48:	8b e5       	ldi	r24, 0x5B	; 91
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	2b e5       	ldi	r18, 0x5B	; 91
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	f9 01       	movw	r30, r18
    1f52:	20 81       	ld	r18, Z
    1f54:	20 62       	ori	r18, 0x20	; 32
    1f56:	fc 01       	movw	r30, r24
    1f58:	20 83       	st	Z, r18
	MCUCSR = (0 << ISC2);   // INT2 interrupt on falling edge
    1f5a:	84 e5       	ldi	r24, 0x54	; 84
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	fc 01       	movw	r30, r24
    1f60:	10 82       	st	Z, r1
}
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <kb_init>:

void kb_init(void)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
	ps2_init();
    1f70:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <ps2_init>
	kb_clear_buff();
    1f74:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <kb_clear_buff>
}
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <kb_clear_buff>:

void kb_clear_buff(void) {
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
	inpt =  kb_buffer;                        // Initialize buffer
    1f86:	84 eb       	ldi	r24, 0xB4	; 180
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	90 93 c5 00 	sts	0x00C5, r25
    1f8e:	80 93 c4 00 	sts	0x00C4, r24
	outpt = kb_buffer;
    1f92:	84 eb       	ldi	r24, 0xB4	; 180
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	90 93 c7 00 	sts	0x00C7, r25
    1f9a:	80 93 c6 00 	sts	0x00C6, r24
	buffcnt=0;
    1f9e:	10 92 b3 00 	sts	0x00B3, r1
}
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <decode>:

void decode(unsigned char sc)
{
    1fa8:	1f 93       	push	r17
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	a6 97       	sbiw	r28, 0x26	; 38
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	8e a3       	std	Y+38, r24	; 0x26
    static unsigned char is_up = 0, shift = 0, ext=0;
    unsigned char i;

    if (!is_up)                // previous data received was the up-key identifier
    1fc0:	80 91 c9 00 	lds	r24, 0x00C9
    1fc4:	88 23       	and	r24, r24
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <decode+0x22>
    1fc8:	2f c1       	rjmp	.+606    	; 0x2228 <decode+0x280>
    {
        switch (sc)
    1fca:	8e a1       	ldd	r24, Y+38	; 0x26
    1fcc:	88 2f       	mov	r24, r24
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	89 35       	cpi	r24, 0x59	; 89
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	c9 f0       	breq	.+50     	; 0x2008 <decode+0x60>
    1fd6:	8a 35       	cpi	r24, 0x5A	; 90
    1fd8:	91 05       	cpc	r25, r1
    1fda:	24 f4       	brge	.+8      	; 0x1fe4 <decode+0x3c>
    1fdc:	82 31       	cpi	r24, 0x12	; 18
    1fde:	91 05       	cpc	r25, r1
    1fe0:	79 f0       	breq	.+30     	; 0x2000 <decode+0x58>
    1fe2:	17 c0       	rjmp	.+46     	; 0x2012 <decode+0x6a>
    1fe4:	80 3e       	cpi	r24, 0xE0	; 224
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	39 f0       	breq	.+14     	; 0x1ff8 <decode+0x50>
    1fea:	80 3f       	cpi	r24, 0xF0	; 240
    1fec:	91 05       	cpc	r25, r1
    1fee:	89 f4       	brne	.+34     	; 0x2012 <decode+0x6a>
        {
          case 0xF0 :        // The up-key identifier
            is_up = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	80 93 c9 00 	sts	0x00C9, r24
            break;
    1ff6:	32 c1       	rjmp	.+612    	; 0x225c <decode+0x2b4>

		  case 0xE0:		//do a lookup of extended keys
			ext = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	80 93 ca 00 	sts	0x00CA, r24
			break;
    1ffe:	2e c1       	rjmp	.+604    	; 0x225c <decode+0x2b4>

          case 0x12 :        // Left SHIFT
            shift = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	80 93 cb 00 	sts	0x00CB, r24
            break;
    2006:	2a c1       	rjmp	.+596    	; 0x225c <decode+0x2b4>

          case 0x59 :        // Right SHIFT
            shift = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	80 93 cb 00 	sts	0x00CB, r24
            break;
    200e:	00 00       	nop
    2010:	25 c1       	rjmp	.+586    	; 0x225c <decode+0x2b4>

          default:

			if(ext) { //extended key lookup
    2012:	80 91 ca 00 	lds	r24, 0x00CA
    2016:	88 23       	and	r24, r24
    2018:	09 f4       	brne	.+2      	; 0x201c <decode+0x74>
    201a:	56 c0       	rjmp	.+172    	; 0x20c8 <decode+0x120>

				for(i = 0; (pgm_read_byte(&extended[i][0])!=sc) && pgm_read_byte(&extended[i][0]); i++)
    201c:	19 82       	std	Y+1, r1	; 0x01
    201e:	03 c0       	rjmp	.+6      	; 0x2026 <decode+0x7e>
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	8f 5f       	subi	r24, 0xFF	; 255
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	2c e3       	ldi	r18, 0x3C	; 60
    2028:	32 e0       	ldi	r19, 0x02	; 2
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	82 0f       	add	r24, r18
    2036:	93 1f       	adc	r25, r19
    2038:	9b 83       	std	Y+3, r25	; 0x03
    203a:	8a 83       	std	Y+2, r24	; 0x02
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	9b 81       	ldd	r25, Y+3	; 0x03
    2040:	fc 01       	movw	r30, r24
    2042:	14 91       	lpm	r17, Z+
    2044:	1c 83       	std	Y+4, r17	; 0x04
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	8e a1       	ldd	r24, Y+38	; 0x26
    204a:	98 17       	cp	r25, r24
    204c:	99 f0       	breq	.+38     	; 0x2074 <decode+0xcc>
    204e:	2c e3       	ldi	r18, 0x3C	; 60
    2050:	32 e0       	ldi	r19, 0x02	; 2
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	82 0f       	add	r24, r18
    205e:	93 1f       	adc	r25, r19
    2060:	9e 83       	std	Y+6, r25	; 0x06
    2062:	8d 83       	std	Y+5, r24	; 0x05
    2064:	8d 81       	ldd	r24, Y+5	; 0x05
    2066:	9e 81       	ldd	r25, Y+6	; 0x06
    2068:	fc 01       	movw	r30, r24
    206a:	14 91       	lpm	r17, Z+
    206c:	1f 83       	std	Y+7, r17	; 0x07
    206e:	8f 81       	ldd	r24, Y+7	; 0x07
    2070:	88 23       	and	r24, r24
    2072:	b1 f6       	brne	.-84     	; 0x2020 <decode+0x78>
					;
				if (pgm_read_byte(&extended[i][0]) == sc)
    2074:	2c e3       	ldi	r18, 0x3C	; 60
    2076:	32 e0       	ldi	r19, 0x02	; 2
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	88 2f       	mov	r24, r24
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	82 0f       	add	r24, r18
    2084:	93 1f       	adc	r25, r19
    2086:	99 87       	std	Y+9, r25	; 0x09
    2088:	88 87       	std	Y+8, r24	; 0x08
    208a:	88 85       	ldd	r24, Y+8	; 0x08
    208c:	99 85       	ldd	r25, Y+9	; 0x09
    208e:	fc 01       	movw	r30, r24
    2090:	14 91       	lpm	r17, Z+
    2092:	1a 87       	std	Y+10, r17	; 0x0a
    2094:	9a 85       	ldd	r25, Y+10	; 0x0a
    2096:	8e a1       	ldd	r24, Y+38	; 0x26
    2098:	98 17       	cp	r25, r24
    209a:	09 f0       	breq	.+2      	; 0x209e <decode+0xf6>
    209c:	da c0       	rjmp	.+436    	; 0x2252 <decode+0x2aa>
					//ext_char = pgm_read_byte(&extended[i][1]);
					put_kbbuff(pgm_read_byte(&extended[i][1]));
    209e:	2c e3       	ldi	r18, 0x3C	; 60
    20a0:	32 e0       	ldi	r19, 0x02	; 2
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	01 96       	adiw	r24, 0x01	; 1
    20ae:	82 0f       	add	r24, r18
    20b0:	93 1f       	adc	r25, r19
    20b2:	9c 87       	std	Y+12, r25	; 0x0c
    20b4:	8b 87       	std	Y+11, r24	; 0x0b
    20b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    20b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    20ba:	fc 01       	movw	r30, r24
    20bc:	14 91       	lpm	r17, Z+
    20be:	1d 87       	std	Y+13, r17	; 0x0d
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	0e 94 38 11 	call	0x2270	; 0x2270 <put_kbbuff>
				else {               // If shift pressed

						for(i = 0; (pgm_read_byte(&shifted[i][0])!=sc) && pgm_read_byte(&shifted[i][0]); i++)
							;
						if (pgm_read_byte(&shifted[i][0])== sc)
							put_kbbuff(pgm_read_byte(&shifted[i][1]));
    20c6:	ca c0       	rjmp	.+404    	; 0x225c <decode+0x2b4>
					//ext_char = pgm_read_byte(&extended[i][1]);
					put_kbbuff(pgm_read_byte(&extended[i][1]));
			}
			else {

				if(!shift)           // If shift not pressed, do a table look-up
    20c8:	80 91 cb 00 	lds	r24, 0x00CB
    20cc:	88 23       	and	r24, r24
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <decode+0x12a>
    20d0:	56 c0       	rjmp	.+172    	; 0x217e <decode+0x1d6>
				{
						for(i = 0; (pgm_read_byte(&unshifted[i][0])!=sc) && pgm_read_byte(&unshifted[i][0]); i++)
    20d2:	19 82       	std	Y+1, r1	; 0x01
    20d4:	03 c0       	rjmp	.+6      	; 0x20dc <decode+0x134>
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	8f 5f       	subi	r24, 0xFF	; 255
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	2e e2       	ldi	r18, 0x2E	; 46
    20de:	31 e0       	ldi	r19, 0x01	; 1
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	88 2f       	mov	r24, r24
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	82 0f       	add	r24, r18
    20ec:	93 1f       	adc	r25, r19
    20ee:	9f 87       	std	Y+15, r25	; 0x0f
    20f0:	8e 87       	std	Y+14, r24	; 0x0e
    20f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    20f6:	fc 01       	movw	r30, r24
    20f8:	14 91       	lpm	r17, Z+
    20fa:	18 8b       	std	Y+16, r17	; 0x10
    20fc:	98 89       	ldd	r25, Y+16	; 0x10
    20fe:	8e a1       	ldd	r24, Y+38	; 0x26
    2100:	98 17       	cp	r25, r24
    2102:	99 f0       	breq	.+38     	; 0x212a <decode+0x182>
    2104:	2e e2       	ldi	r18, 0x2E	; 46
    2106:	31 e0       	ldi	r19, 0x01	; 1
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	88 2f       	mov	r24, r24
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	82 0f       	add	r24, r18
    2114:	93 1f       	adc	r25, r19
    2116:	9a 8b       	std	Y+18, r25	; 0x12
    2118:	89 8b       	std	Y+17, r24	; 0x11
    211a:	89 89       	ldd	r24, Y+17	; 0x11
    211c:	9a 89       	ldd	r25, Y+18	; 0x12
    211e:	fc 01       	movw	r30, r24
    2120:	14 91       	lpm	r17, Z+
    2122:	1b 8b       	std	Y+19, r17	; 0x13
    2124:	8b 89       	ldd	r24, Y+19	; 0x13
    2126:	88 23       	and	r24, r24
    2128:	b1 f6       	brne	.-84     	; 0x20d6 <decode+0x12e>
							;
						if (pgm_read_byte(&unshifted[i][0])== sc)
    212a:	2e e2       	ldi	r18, 0x2E	; 46
    212c:	31 e0       	ldi	r19, 0x01	; 1
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	88 2f       	mov	r24, r24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	82 0f       	add	r24, r18
    213a:	93 1f       	adc	r25, r19
    213c:	9d 8b       	std	Y+21, r25	; 0x15
    213e:	8c 8b       	std	Y+20, r24	; 0x14
    2140:	8c 89       	ldd	r24, Y+20	; 0x14
    2142:	9d 89       	ldd	r25, Y+21	; 0x15
    2144:	fc 01       	movw	r30, r24
    2146:	14 91       	lpm	r17, Z+
    2148:	1e 8b       	std	Y+22, r17	; 0x16
    214a:	9e 89       	ldd	r25, Y+22	; 0x16
    214c:	8e a1       	ldd	r24, Y+38	; 0x26
    214e:	98 17       	cp	r25, r24
    2150:	09 f0       	breq	.+2      	; 0x2154 <decode+0x1ac>
    2152:	81 c0       	rjmp	.+258    	; 0x2256 <decode+0x2ae>
							put_kbbuff(pgm_read_byte(&unshifted[i][1]));
    2154:	2e e2       	ldi	r18, 0x2E	; 46
    2156:	31 e0       	ldi	r19, 0x01	; 1
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	01 96       	adiw	r24, 0x01	; 1
    2164:	82 0f       	add	r24, r18
    2166:	93 1f       	adc	r25, r19
    2168:	98 8f       	std	Y+24, r25	; 0x18
    216a:	8f 8b       	std	Y+23, r24	; 0x17
    216c:	8f 89       	ldd	r24, Y+23	; 0x17
    216e:	98 8d       	ldd	r25, Y+24	; 0x18
    2170:	fc 01       	movw	r30, r24
    2172:	14 91       	lpm	r17, Z+
    2174:	19 8f       	std	Y+25, r17	; 0x19
    2176:	89 8d       	ldd	r24, Y+25	; 0x19
    2178:	0e 94 38 11 	call	0x2270	; 0x2270 <put_kbbuff>
				else {               // If shift pressed

						for(i = 0; (pgm_read_byte(&shifted[i][0])!=sc) && pgm_read_byte(&shifted[i][0]); i++)
							;
						if (pgm_read_byte(&shifted[i][0])== sc)
							put_kbbuff(pgm_read_byte(&shifted[i][1]));
    217c:	6f c0       	rjmp	.+222    	; 0x225c <decode+0x2b4>
							put_kbbuff(pgm_read_byte(&unshifted[i][1]));

				}
				else {               // If shift pressed

						for(i = 0; (pgm_read_byte(&shifted[i][0])!=sc) && pgm_read_byte(&shifted[i][0]); i++)
    217e:	19 82       	std	Y+1, r1	; 0x01
    2180:	03 c0       	rjmp	.+6      	; 0x2188 <decode+0x1e0>
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	8f 5f       	subi	r24, 0xFF	; 255
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	24 eb       	ldi	r18, 0xB4	; 180
    218a:	31 e0       	ldi	r19, 0x01	; 1
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	88 2f       	mov	r24, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	82 0f       	add	r24, r18
    2198:	93 1f       	adc	r25, r19
    219a:	9b 8f       	std	Y+27, r25	; 0x1b
    219c:	8a 8f       	std	Y+26, r24	; 0x1a
    219e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21a2:	fc 01       	movw	r30, r24
    21a4:	14 91       	lpm	r17, Z+
    21a6:	1c 8f       	std	Y+28, r17	; 0x1c
    21a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21aa:	8e a1       	ldd	r24, Y+38	; 0x26
    21ac:	98 17       	cp	r25, r24
    21ae:	99 f0       	breq	.+38     	; 0x21d6 <decode+0x22e>
    21b0:	24 eb       	ldi	r18, 0xB4	; 180
    21b2:	31 e0       	ldi	r19, 0x01	; 1
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	88 2f       	mov	r24, r24
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	82 0f       	add	r24, r18
    21c0:	93 1f       	adc	r25, r19
    21c2:	9e 8f       	std	Y+30, r25	; 0x1e
    21c4:	8d 8f       	std	Y+29, r24	; 0x1d
    21c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ca:	fc 01       	movw	r30, r24
    21cc:	14 91       	lpm	r17, Z+
    21ce:	1f 8f       	std	Y+31, r17	; 0x1f
    21d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d2:	88 23       	and	r24, r24
    21d4:	b1 f6       	brne	.-84     	; 0x2182 <decode+0x1da>
							;
						if (pgm_read_byte(&shifted[i][0])== sc)
    21d6:	24 eb       	ldi	r18, 0xB4	; 180
    21d8:	31 e0       	ldi	r19, 0x01	; 1
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	88 2f       	mov	r24, r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	82 0f       	add	r24, r18
    21e6:	93 1f       	adc	r25, r19
    21e8:	99 a3       	std	Y+33, r25	; 0x21
    21ea:	88 a3       	std	Y+32, r24	; 0x20
    21ec:	88 a1       	ldd	r24, Y+32	; 0x20
    21ee:	99 a1       	ldd	r25, Y+33	; 0x21
    21f0:	fc 01       	movw	r30, r24
    21f2:	14 91       	lpm	r17, Z+
    21f4:	1a a3       	std	Y+34, r17	; 0x22
    21f6:	9a a1       	ldd	r25, Y+34	; 0x22
    21f8:	8e a1       	ldd	r24, Y+38	; 0x26
    21fa:	98 17       	cp	r25, r24
    21fc:	71 f5       	brne	.+92     	; 0x225a <decode+0x2b2>
							put_kbbuff(pgm_read_byte(&shifted[i][1]));
    21fe:	24 eb       	ldi	r18, 0xB4	; 180
    2200:	31 e0       	ldi	r19, 0x01	; 1
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	88 2f       	mov	r24, r24
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	01 96       	adiw	r24, 0x01	; 1
    220e:	82 0f       	add	r24, r18
    2210:	93 1f       	adc	r25, r19
    2212:	9c a3       	std	Y+36, r25	; 0x24
    2214:	8b a3       	std	Y+35, r24	; 0x23
    2216:	8b a1       	ldd	r24, Y+35	; 0x23
    2218:	9c a1       	ldd	r25, Y+36	; 0x24
    221a:	fc 01       	movw	r30, r24
    221c:	14 91       	lpm	r17, Z+
    221e:	1d a3       	std	Y+37, r17	; 0x25
    2220:	8d a1       	ldd	r24, Y+37	; 0x25
    2222:	0e 94 38 11 	call	0x2270	; 0x2270 <put_kbbuff>
    2226:	1a c0       	rjmp	.+52     	; 0x225c <decode+0x2b4>

    }

	else {			// is_up = 1

		is_up = 0;  // Two 0xF0 in a row not allowed
    2228:	10 92 c9 00 	sts	0x00C9, r1
		ext=0;
    222c:	10 92 ca 00 	sts	0x00CA, r1
        switch (sc)
    2230:	8e a1       	ldd	r24, Y+38	; 0x26
    2232:	88 2f       	mov	r24, r24
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	82 31       	cpi	r24, 0x12	; 18
    2238:	91 05       	cpc	r25, r1
    223a:	21 f0       	breq	.+8      	; 0x2244 <decode+0x29c>
    223c:	89 35       	cpi	r24, 0x59	; 89
    223e:	91 05       	cpc	r25, r1
    2240:	21 f0       	breq	.+8      	; 0x224a <decode+0x2a2>
    2242:	0c c0       	rjmp	.+24     	; 0x225c <decode+0x2b4>
        {
          case 0x12 :                        // Left SHIFT
            shift = 0;
    2244:	10 92 cb 00 	sts	0x00CB, r1
            break;
    2248:	09 c0       	rjmp	.+18     	; 0x225c <decode+0x2b4>

          case 0x59 :                        // Right SHIFT
            shift = 0;
    224a:	10 92 cb 00 	sts	0x00CB, r1
            break;
    224e:	00 00       	nop
    2250:	05 c0       	rjmp	.+10     	; 0x225c <decode+0x2b4>
				else {               // If shift pressed

						for(i = 0; (pgm_read_byte(&shifted[i][0])!=sc) && pgm_read_byte(&shifted[i][0]); i++)
							;
						if (pgm_read_byte(&shifted[i][0])== sc)
							put_kbbuff(pgm_read_byte(&shifted[i][1]));
    2252:	00 00       	nop
    2254:	03 c0       	rjmp	.+6      	; 0x225c <decode+0x2b4>
    2256:	00 00       	nop
    2258:	01 c0       	rjmp	.+2      	; 0x225c <decode+0x2b4>
    225a:	00 00       	nop
            break;

        }
    }

}
    225c:	a6 96       	adiw	r28, 0x26	; 38
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	1f 91       	pop	r17
    226e:	08 95       	ret

00002270 <put_kbbuff>:

static void put_kbbuff(unsigned char c)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	0f 92       	push	r0
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	89 83       	std	Y+1, r24	; 0x01
    if (buffcnt<BUFF_SIZE)                        // If buffer not full
    227c:	80 91 b3 00 	lds	r24, 0x00B3
    2280:	80 31       	cpi	r24, 0x10	; 16
    2282:	20 f5       	brcc	.+72     	; 0x22cc <put_kbbuff+0x5c>
    {
        *inpt = c;                                // Put character into buffer
    2284:	80 91 c4 00 	lds	r24, 0x00C4
    2288:	90 91 c5 00 	lds	r25, 0x00C5
    228c:	29 81       	ldd	r18, Y+1	; 0x01
    228e:	fc 01       	movw	r30, r24
    2290:	20 83       	st	Z, r18
        inpt++;                                    // Increment pointer
    2292:	80 91 c4 00 	lds	r24, 0x00C4
    2296:	90 91 c5 00 	lds	r25, 0x00C5
    229a:	01 96       	adiw	r24, 0x01	; 1
    229c:	90 93 c5 00 	sts	0x00C5, r25
    22a0:	80 93 c4 00 	sts	0x00C4, r24

        buffcnt++;
    22a4:	80 91 b3 00 	lds	r24, 0x00B3
    22a8:	8f 5f       	subi	r24, 0xFF	; 255
    22aa:	80 93 b3 00 	sts	0x00B3, r24

        if (inpt >= (kb_buffer + BUFF_SIZE))        // Pointer wrapping
    22ae:	20 91 c4 00 	lds	r18, 0x00C4
    22b2:	30 91 c5 00 	lds	r19, 0x00C5
    22b6:	84 ec       	ldi	r24, 0xC4	; 196
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	28 17       	cp	r18, r24
    22bc:	39 07       	cpc	r19, r25
    22be:	30 f0       	brcs	.+12     	; 0x22cc <put_kbbuff+0x5c>
            inpt = kb_buffer;
    22c0:	84 eb       	ldi	r24, 0xB4	; 180
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	90 93 c5 00 	sts	0x00C5, r25
    22c8:	80 93 c4 00 	sts	0x00C4, r24
    }
}
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <kb_get_char>:


uint8_t kb_get_char(void)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	0f 92       	push	r0
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    uint8_t byte;
    while(buffcnt == 0);                        // Wait for data
    22de:	00 00       	nop
    22e0:	80 91 b3 00 	lds	r24, 0x00B3
    22e4:	88 23       	and	r24, r24
    22e6:	e1 f3       	breq	.-8      	; 0x22e0 <kb_get_char+0xc>

    byte = *outpt;                                // Get byte
    22e8:	80 91 c6 00 	lds	r24, 0x00C6
    22ec:	90 91 c7 00 	lds	r25, 0x00C7
    22f0:	fc 01       	movw	r30, r24
    22f2:	80 81       	ld	r24, Z
    22f4:	89 83       	std	Y+1, r24	; 0x01
    outpt++;                                    // Increment pointer
    22f6:	80 91 c6 00 	lds	r24, 0x00C6
    22fa:	90 91 c7 00 	lds	r25, 0x00C7
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	90 93 c7 00 	sts	0x00C7, r25
    2304:	80 93 c6 00 	sts	0x00C6, r24

    if ( outpt >= (kb_buffer + BUFF_SIZE) )            // Pointer wrapping
    2308:	20 91 c6 00 	lds	r18, 0x00C6
    230c:	30 91 c7 00 	lds	r19, 0x00C7
    2310:	84 ec       	ldi	r24, 0xC4	; 196
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	28 17       	cp	r18, r24
    2316:	39 07       	cpc	r19, r25
    2318:	30 f0       	brcs	.+12     	; 0x2326 <kb_get_char+0x52>
        outpt = kb_buffer;
    231a:	84 eb       	ldi	r24, 0xB4	; 180
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	90 93 c7 00 	sts	0x00C7, r25
    2322:	80 93 c6 00 	sts	0x00C6, r24

    buffcnt--;                                    // Decrement buffer count
    2326:	80 91 b3 00 	lds	r24, 0x00B3
    232a:	81 50       	subi	r24, 0x01	; 1
    232c:	80 93 b3 00 	sts	0x00B3, r24

    return byte;
    2330:	89 81       	ldd	r24, Y+1	; 0x01

}
    2332:	0f 90       	pop	r0
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <__vector_18>:



ISR(INT2_vect) {
    233a:	1f 92       	push	r1
    233c:	0f 92       	push	r0
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	0f 92       	push	r0
    2342:	11 24       	eor	r1, r1
    2344:	2f 93       	push	r18
    2346:	3f 93       	push	r19
    2348:	4f 93       	push	r20
    234a:	5f 93       	push	r21
    234c:	6f 93       	push	r22
    234e:	7f 93       	push	r23
    2350:	8f 93       	push	r24
    2352:	9f 93       	push	r25
    2354:	af 93       	push	r26
    2356:	bf 93       	push	r27
    2358:	ef 93       	push	r30
    235a:	ff 93       	push	r31
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
	static uint8_t byteIn;

	sei();
    2364:	78 94       	sei

	if (bitcount > 2 && bitcount < 11) {
    2366:	80 91 b1 00 	lds	r24, 0x00B1
    236a:	83 30       	cpi	r24, 0x03	; 3
    236c:	c0 f0       	brcs	.+48     	; 0x239e <__vector_18+0x64>
    236e:	80 91 b1 00 	lds	r24, 0x00B1
    2372:	8b 30       	cpi	r24, 0x0B	; 11
    2374:	a0 f4       	brcc	.+40     	; 0x239e <__vector_18+0x64>

		byteIn = (byteIn >> 1);
    2376:	80 91 c8 00 	lds	r24, 0x00C8
    237a:	86 95       	lsr	r24
    237c:	80 93 c8 00 	sts	0x00C8, r24
		if (PIN_DATA & (1 << DATA_PIN))
    2380:	86 e3       	ldi	r24, 0x36	; 54
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	fc 01       	movw	r30, r24
    2386:	80 81       	ld	r24, Z
    2388:	88 2f       	mov	r24, r24
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	82 70       	andi	r24, 0x02	; 2
    238e:	90 70       	andi	r25, 0x00	; 0
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	29 f0       	breq	.+10     	; 0x239e <__vector_18+0x64>
			byteIn |= 0x80;
    2394:	80 91 c8 00 	lds	r24, 0x00C8
    2398:	80 68       	ori	r24, 0x80	; 128
    239a:	80 93 c8 00 	sts	0x00C8, r24
	}

	if (--bitcount == 0) {
    239e:	80 91 b1 00 	lds	r24, 0x00B1
    23a2:	81 50       	subi	r24, 0x01	; 1
    23a4:	80 93 b1 00 	sts	0x00B1, r24
    23a8:	80 91 b1 00 	lds	r24, 0x00B1
    23ac:	88 23       	and	r24, r24
    23ae:	39 f4       	brne	.+14     	; 0x23be <__vector_18+0x84>

		decode(byteIn);
    23b0:	80 91 c8 00 	lds	r24, 0x00C8
    23b4:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <decode>
		bitcount = 11;
    23b8:	8b e0       	ldi	r24, 0x0B	; 11
    23ba:	80 93 b1 00 	sts	0x00B1, r24
	}
}
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	ff 91       	pop	r31
    23c4:	ef 91       	pop	r30
    23c6:	bf 91       	pop	r27
    23c8:	af 91       	pop	r26
    23ca:	9f 91       	pop	r25
    23cc:	8f 91       	pop	r24
    23ce:	7f 91       	pop	r23
    23d0:	6f 91       	pop	r22
    23d2:	5f 91       	pop	r21
    23d4:	4f 91       	pop	r20
    23d6:	3f 91       	pop	r19
    23d8:	2f 91       	pop	r18
    23da:	0f 90       	pop	r0
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	0f 90       	pop	r0
    23e0:	1f 90       	pop	r1
    23e2:	18 95       	reti

000023e4 <__fixunssfsi>:
    23e4:	ef 92       	push	r14
    23e6:	ff 92       	push	r15
    23e8:	0f 93       	push	r16
    23ea:	1f 93       	push	r17
    23ec:	7b 01       	movw	r14, r22
    23ee:	8c 01       	movw	r16, r24
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	5f e4       	ldi	r21, 0x4F	; 79
    23f8:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__gesf2>
    23fc:	87 fd       	sbrc	r24, 7
    23fe:	11 c0       	rjmp	.+34     	; 0x2422 <__fixunssfsi+0x3e>
    2400:	c8 01       	movw	r24, r16
    2402:	b7 01       	movw	r22, r14
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	5f e4       	ldi	r21, 0x4F	; 79
    240c:	0e 94 95 13 	call	0x272a	; 0x272a <__subsf3>
    2410:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__fixsfsi>
    2414:	9b 01       	movw	r18, r22
    2416:	ac 01       	movw	r20, r24
    2418:	20 50       	subi	r18, 0x00	; 0
    241a:	30 40       	sbci	r19, 0x00	; 0
    241c:	40 40       	sbci	r20, 0x00	; 0
    241e:	50 48       	sbci	r21, 0x80	; 128
    2420:	06 c0       	rjmp	.+12     	; 0x242e <__fixunssfsi+0x4a>
    2422:	c8 01       	movw	r24, r16
    2424:	b7 01       	movw	r22, r14
    2426:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__fixsfsi>
    242a:	9b 01       	movw	r18, r22
    242c:	ac 01       	movw	r20, r24
    242e:	b9 01       	movw	r22, r18
    2430:	ca 01       	movw	r24, r20
    2432:	1f 91       	pop	r17
    2434:	0f 91       	pop	r16
    2436:	ff 90       	pop	r15
    2438:	ef 90       	pop	r14
    243a:	08 95       	ret

0000243c <_fpadd_parts>:
    243c:	a0 e0       	ldi	r26, 0x00	; 0
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e4 e2       	ldi	r30, 0x24	; 36
    2442:	f2 e1       	ldi	r31, 0x12	; 18
    2444:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__prologue_saves__+0x8>
    2448:	fc 01       	movw	r30, r24
    244a:	ea 01       	movw	r28, r20
    244c:	80 81       	ld	r24, Z
    244e:	82 30       	cpi	r24, 0x02	; 2
    2450:	08 f4       	brcc	.+2      	; 0x2454 <_fpadd_parts+0x18>
    2452:	38 c1       	rjmp	.+624    	; 0x26c4 <_fpadd_parts+0x288>
    2454:	db 01       	movw	r26, r22
    2456:	9c 91       	ld	r25, X
    2458:	92 30       	cpi	r25, 0x02	; 2
    245a:	08 f4       	brcc	.+2      	; 0x245e <_fpadd_parts+0x22>
    245c:	30 c1       	rjmp	.+608    	; 0x26be <_fpadd_parts+0x282>
    245e:	84 30       	cpi	r24, 0x04	; 4
    2460:	59 f4       	brne	.+22     	; 0x2478 <_fpadd_parts+0x3c>
    2462:	94 30       	cpi	r25, 0x04	; 4
    2464:	09 f0       	breq	.+2      	; 0x2468 <_fpadd_parts+0x2c>
    2466:	2e c1       	rjmp	.+604    	; 0x26c4 <_fpadd_parts+0x288>
    2468:	91 81       	ldd	r25, Z+1	; 0x01
    246a:	11 96       	adiw	r26, 0x01	; 1
    246c:	8c 91       	ld	r24, X
    246e:	11 97       	sbiw	r26, 0x01	; 1
    2470:	98 17       	cp	r25, r24
    2472:	09 f0       	breq	.+2      	; 0x2476 <_fpadd_parts+0x3a>
    2474:	21 c1       	rjmp	.+578    	; 0x26b8 <_fpadd_parts+0x27c>
    2476:	26 c1       	rjmp	.+588    	; 0x26c4 <_fpadd_parts+0x288>
    2478:	94 30       	cpi	r25, 0x04	; 4
    247a:	09 f4       	brne	.+2      	; 0x247e <_fpadd_parts+0x42>
    247c:	20 c1       	rjmp	.+576    	; 0x26be <_fpadd_parts+0x282>
    247e:	92 30       	cpi	r25, 0x02	; 2
    2480:	b1 f4       	brne	.+44     	; 0x24ae <_fpadd_parts+0x72>
    2482:	82 30       	cpi	r24, 0x02	; 2
    2484:	09 f0       	breq	.+2      	; 0x2488 <_fpadd_parts+0x4c>
    2486:	1e c1       	rjmp	.+572    	; 0x26c4 <_fpadd_parts+0x288>
    2488:	ca 01       	movw	r24, r20
    248a:	af 01       	movw	r20, r30
    248c:	28 e0       	ldi	r18, 0x08	; 8
    248e:	da 01       	movw	r26, r20
    2490:	0d 90       	ld	r0, X+
    2492:	ad 01       	movw	r20, r26
    2494:	dc 01       	movw	r26, r24
    2496:	0d 92       	st	X+, r0
    2498:	cd 01       	movw	r24, r26
    249a:	21 50       	subi	r18, 0x01	; 1
    249c:	c1 f7       	brne	.-16     	; 0x248e <_fpadd_parts+0x52>
    249e:	db 01       	movw	r26, r22
    24a0:	11 96       	adiw	r26, 0x01	; 1
    24a2:	8c 91       	ld	r24, X
    24a4:	11 97       	sbiw	r26, 0x01	; 1
    24a6:	91 81       	ldd	r25, Z+1	; 0x01
    24a8:	89 23       	and	r24, r25
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	0a c1       	rjmp	.+532    	; 0x26c2 <_fpadd_parts+0x286>
    24ae:	82 30       	cpi	r24, 0x02	; 2
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <_fpadd_parts+0x78>
    24b2:	05 c1       	rjmp	.+522    	; 0x26be <_fpadd_parts+0x282>
    24b4:	c2 80       	ldd	r12, Z+2	; 0x02
    24b6:	d3 80       	ldd	r13, Z+3	; 0x03
    24b8:	db 01       	movw	r26, r22
    24ba:	12 96       	adiw	r26, 0x02	; 2
    24bc:	6d 90       	ld	r6, X+
    24be:	7c 90       	ld	r7, X
    24c0:	13 97       	sbiw	r26, 0x03	; 3
    24c2:	24 81       	ldd	r18, Z+4	; 0x04
    24c4:	35 81       	ldd	r19, Z+5	; 0x05
    24c6:	46 81       	ldd	r20, Z+6	; 0x06
    24c8:	57 81       	ldd	r21, Z+7	; 0x07
    24ca:	14 96       	adiw	r26, 0x04	; 4
    24cc:	ed 90       	ld	r14, X+
    24ce:	fd 90       	ld	r15, X+
    24d0:	0d 91       	ld	r16, X+
    24d2:	1c 91       	ld	r17, X
    24d4:	17 97       	sbiw	r26, 0x07	; 7
    24d6:	c6 01       	movw	r24, r12
    24d8:	86 19       	sub	r24, r6
    24da:	97 09       	sbc	r25, r7
    24dc:	5c 01       	movw	r10, r24
    24de:	97 ff       	sbrs	r25, 7
    24e0:	04 c0       	rjmp	.+8      	; 0x24ea <_fpadd_parts+0xae>
    24e2:	aa 24       	eor	r10, r10
    24e4:	bb 24       	eor	r11, r11
    24e6:	a8 1a       	sub	r10, r24
    24e8:	b9 0a       	sbc	r11, r25
    24ea:	b0 e2       	ldi	r27, 0x20	; 32
    24ec:	ab 16       	cp	r10, r27
    24ee:	b1 04       	cpc	r11, r1
    24f0:	0c f0       	brlt	.+2      	; 0x24f4 <_fpadd_parts+0xb8>
    24f2:	61 c0       	rjmp	.+194    	; 0x25b6 <_fpadd_parts+0x17a>
    24f4:	18 16       	cp	r1, r24
    24f6:	19 06       	cpc	r1, r25
    24f8:	6c f5       	brge	.+90     	; 0x2554 <_fpadd_parts+0x118>
    24fa:	37 01       	movw	r6, r14
    24fc:	48 01       	movw	r8, r16
    24fe:	0a 2c       	mov	r0, r10
    2500:	04 c0       	rjmp	.+8      	; 0x250a <_fpadd_parts+0xce>
    2502:	96 94       	lsr	r9
    2504:	87 94       	ror	r8
    2506:	77 94       	ror	r7
    2508:	67 94       	ror	r6
    250a:	0a 94       	dec	r0
    250c:	d2 f7       	brpl	.-12     	; 0x2502 <_fpadd_parts+0xc6>
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a0 e0       	ldi	r26, 0x00	; 0
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	0a 2c       	mov	r0, r10
    2518:	04 c0       	rjmp	.+8      	; 0x2522 <_fpadd_parts+0xe6>
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	aa 1f       	adc	r26, r26
    2520:	bb 1f       	adc	r27, r27
    2522:	0a 94       	dec	r0
    2524:	d2 f7       	brpl	.-12     	; 0x251a <_fpadd_parts+0xde>
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	a1 09       	sbc	r26, r1
    252a:	b1 09       	sbc	r27, r1
    252c:	8e 21       	and	r24, r14
    252e:	9f 21       	and	r25, r15
    2530:	a0 23       	and	r26, r16
    2532:	b1 23       	and	r27, r17
    2534:	ee 24       	eor	r14, r14
    2536:	ff 24       	eor	r15, r15
    2538:	87 01       	movw	r16, r14
    253a:	e3 94       	inc	r14
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	a1 05       	cpc	r26, r1
    2540:	b1 05       	cpc	r27, r1
    2542:	19 f4       	brne	.+6      	; 0x254a <_fpadd_parts+0x10e>
    2544:	ee 24       	eor	r14, r14
    2546:	ff 24       	eor	r15, r15
    2548:	87 01       	movw	r16, r14
    254a:	e6 28       	or	r14, r6
    254c:	f7 28       	or	r15, r7
    254e:	08 29       	or	r16, r8
    2550:	19 29       	or	r17, r9
    2552:	3c c0       	rjmp	.+120    	; 0x25cc <_fpadd_parts+0x190>
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	d1 f1       	breq	.+116    	; 0x25cc <_fpadd_parts+0x190>
    2558:	ca 0c       	add	r12, r10
    255a:	db 1c       	adc	r13, r11
    255c:	39 01       	movw	r6, r18
    255e:	4a 01       	movw	r8, r20
    2560:	0a 2c       	mov	r0, r10
    2562:	04 c0       	rjmp	.+8      	; 0x256c <_fpadd_parts+0x130>
    2564:	96 94       	lsr	r9
    2566:	87 94       	ror	r8
    2568:	77 94       	ror	r7
    256a:	67 94       	ror	r6
    256c:	0a 94       	dec	r0
    256e:	d2 f7       	brpl	.-12     	; 0x2564 <_fpadd_parts+0x128>
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	a0 e0       	ldi	r26, 0x00	; 0
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	0a 2c       	mov	r0, r10
    257a:	04 c0       	rjmp	.+8      	; 0x2584 <_fpadd_parts+0x148>
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	aa 1f       	adc	r26, r26
    2582:	bb 1f       	adc	r27, r27
    2584:	0a 94       	dec	r0
    2586:	d2 f7       	brpl	.-12     	; 0x257c <_fpadd_parts+0x140>
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	a1 09       	sbc	r26, r1
    258c:	b1 09       	sbc	r27, r1
    258e:	82 23       	and	r24, r18
    2590:	93 23       	and	r25, r19
    2592:	a4 23       	and	r26, r20
    2594:	b5 23       	and	r27, r21
    2596:	21 e0       	ldi	r18, 0x01	; 1
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	a1 05       	cpc	r26, r1
    25a2:	b1 05       	cpc	r27, r1
    25a4:	19 f4       	brne	.+6      	; 0x25ac <_fpadd_parts+0x170>
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	a9 01       	movw	r20, r18
    25ac:	26 29       	or	r18, r6
    25ae:	37 29       	or	r19, r7
    25b0:	48 29       	or	r20, r8
    25b2:	59 29       	or	r21, r9
    25b4:	0b c0       	rjmp	.+22     	; 0x25cc <_fpadd_parts+0x190>
    25b6:	6c 14       	cp	r6, r12
    25b8:	7d 04       	cpc	r7, r13
    25ba:	24 f4       	brge	.+8      	; 0x25c4 <_fpadd_parts+0x188>
    25bc:	ee 24       	eor	r14, r14
    25be:	ff 24       	eor	r15, r15
    25c0:	87 01       	movw	r16, r14
    25c2:	04 c0       	rjmp	.+8      	; 0x25cc <_fpadd_parts+0x190>
    25c4:	63 01       	movw	r12, r6
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	a9 01       	movw	r20, r18
    25cc:	81 81       	ldd	r24, Z+1	; 0x01
    25ce:	fb 01       	movw	r30, r22
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	89 17       	cp	r24, r25
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <_fpadd_parts+0x19c>
    25d6:	45 c0       	rjmp	.+138    	; 0x2662 <_fpadd_parts+0x226>
    25d8:	88 23       	and	r24, r24
    25da:	49 f0       	breq	.+18     	; 0x25ee <_fpadd_parts+0x1b2>
    25dc:	d8 01       	movw	r26, r16
    25de:	c7 01       	movw	r24, r14
    25e0:	82 1b       	sub	r24, r18
    25e2:	93 0b       	sbc	r25, r19
    25e4:	a4 0b       	sbc	r26, r20
    25e6:	b5 0b       	sbc	r27, r21
    25e8:	9c 01       	movw	r18, r24
    25ea:	ad 01       	movw	r20, r26
    25ec:	04 c0       	rjmp	.+8      	; 0x25f6 <_fpadd_parts+0x1ba>
    25ee:	2e 19       	sub	r18, r14
    25f0:	3f 09       	sbc	r19, r15
    25f2:	40 0b       	sbc	r20, r16
    25f4:	51 0b       	sbc	r21, r17
    25f6:	57 fd       	sbrc	r21, 7
    25f8:	04 c0       	rjmp	.+8      	; 0x2602 <_fpadd_parts+0x1c6>
    25fa:	19 82       	std	Y+1, r1	; 0x01
    25fc:	db 82       	std	Y+3, r13	; 0x03
    25fe:	ca 82       	std	Y+2, r12	; 0x02
    2600:	0b c0       	rjmp	.+22     	; 0x2618 <_fpadd_parts+0x1dc>
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	db 82       	std	Y+3, r13	; 0x03
    2608:	ca 82       	std	Y+2, r12	; 0x02
    260a:	50 95       	com	r21
    260c:	40 95       	com	r20
    260e:	30 95       	com	r19
    2610:	21 95       	neg	r18
    2612:	3f 4f       	sbci	r19, 0xFF	; 255
    2614:	4f 4f       	sbci	r20, 0xFF	; 255
    2616:	5f 4f       	sbci	r21, 0xFF	; 255
    2618:	2c 83       	std	Y+4, r18	; 0x04
    261a:	3d 83       	std	Y+5, r19	; 0x05
    261c:	4e 83       	std	Y+6, r20	; 0x06
    261e:	5f 83       	std	Y+7, r21	; 0x07
    2620:	0d c0       	rjmp	.+26     	; 0x263c <_fpadd_parts+0x200>
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	aa 1f       	adc	r26, r26
    2628:	bb 1f       	adc	r27, r27
    262a:	8c 83       	std	Y+4, r24	; 0x04
    262c:	9d 83       	std	Y+5, r25	; 0x05
    262e:	ae 83       	std	Y+6, r26	; 0x06
    2630:	bf 83       	std	Y+7, r27	; 0x07
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	9b 81       	ldd	r25, Y+3	; 0x03
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	9b 83       	std	Y+3, r25	; 0x03
    263a:	8a 83       	std	Y+2, r24	; 0x02
    263c:	8c 81       	ldd	r24, Y+4	; 0x04
    263e:	9d 81       	ldd	r25, Y+5	; 0x05
    2640:	ae 81       	ldd	r26, Y+6	; 0x06
    2642:	bf 81       	ldd	r27, Y+7	; 0x07
    2644:	9c 01       	movw	r18, r24
    2646:	ad 01       	movw	r20, r26
    2648:	21 50       	subi	r18, 0x01	; 1
    264a:	30 40       	sbci	r19, 0x00	; 0
    264c:	40 40       	sbci	r20, 0x00	; 0
    264e:	50 40       	sbci	r21, 0x00	; 0
    2650:	2f 3f       	cpi	r18, 0xFF	; 255
    2652:	ef ef       	ldi	r30, 0xFF	; 255
    2654:	3e 07       	cpc	r19, r30
    2656:	ef ef       	ldi	r30, 0xFF	; 255
    2658:	4e 07       	cpc	r20, r30
    265a:	ef e3       	ldi	r30, 0x3F	; 63
    265c:	5e 07       	cpc	r21, r30
    265e:	08 f3       	brcs	.-62     	; 0x2622 <_fpadd_parts+0x1e6>
    2660:	0b c0       	rjmp	.+22     	; 0x2678 <_fpadd_parts+0x23c>
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	db 82       	std	Y+3, r13	; 0x03
    2666:	ca 82       	std	Y+2, r12	; 0x02
    2668:	2e 0d       	add	r18, r14
    266a:	3f 1d       	adc	r19, r15
    266c:	40 1f       	adc	r20, r16
    266e:	51 1f       	adc	r21, r17
    2670:	2c 83       	std	Y+4, r18	; 0x04
    2672:	3d 83       	std	Y+5, r19	; 0x05
    2674:	4e 83       	std	Y+6, r20	; 0x06
    2676:	5f 83       	std	Y+7, r21	; 0x07
    2678:	83 e0       	ldi	r24, 0x03	; 3
    267a:	88 83       	st	Y, r24
    267c:	2c 81       	ldd	r18, Y+4	; 0x04
    267e:	3d 81       	ldd	r19, Y+5	; 0x05
    2680:	4e 81       	ldd	r20, Y+6	; 0x06
    2682:	5f 81       	ldd	r21, Y+7	; 0x07
    2684:	57 ff       	sbrs	r21, 7
    2686:	1d c0       	rjmp	.+58     	; 0x26c2 <_fpadd_parts+0x286>
    2688:	da 01       	movw	r26, r20
    268a:	c9 01       	movw	r24, r18
    268c:	81 70       	andi	r24, 0x01	; 1
    268e:	90 70       	andi	r25, 0x00	; 0
    2690:	a0 70       	andi	r26, 0x00	; 0
    2692:	b0 70       	andi	r27, 0x00	; 0
    2694:	56 95       	lsr	r21
    2696:	47 95       	ror	r20
    2698:	37 95       	ror	r19
    269a:	27 95       	ror	r18
    269c:	82 2b       	or	r24, r18
    269e:	93 2b       	or	r25, r19
    26a0:	a4 2b       	or	r26, r20
    26a2:	b5 2b       	or	r27, r21
    26a4:	8c 83       	std	Y+4, r24	; 0x04
    26a6:	9d 83       	std	Y+5, r25	; 0x05
    26a8:	ae 83       	std	Y+6, r26	; 0x06
    26aa:	bf 83       	std	Y+7, r27	; 0x07
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	9b 81       	ldd	r25, Y+3	; 0x03
    26b0:	01 96       	adiw	r24, 0x01	; 1
    26b2:	9b 83       	std	Y+3, r25	; 0x03
    26b4:	8a 83       	std	Y+2, r24	; 0x02
    26b6:	05 c0       	rjmp	.+10     	; 0x26c2 <_fpadd_parts+0x286>
    26b8:	ed e8       	ldi	r30, 0x8D	; 141
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	03 c0       	rjmp	.+6      	; 0x26c4 <_fpadd_parts+0x288>
    26be:	fb 01       	movw	r30, r22
    26c0:	01 c0       	rjmp	.+2      	; 0x26c4 <_fpadd_parts+0x288>
    26c2:	fe 01       	movw	r30, r28
    26c4:	cf 01       	movw	r24, r30
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	ee e0       	ldi	r30, 0x0E	; 14
    26cc:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__epilogue_restores__+0x8>

000026d0 <__addsf3>:
    26d0:	a0 e2       	ldi	r26, 0x20	; 32
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	ee e6       	ldi	r30, 0x6E	; 110
    26d6:	f3 e1       	ldi	r31, 0x13	; 19
    26d8:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x18>
    26dc:	69 83       	std	Y+1, r22	; 0x01
    26de:	7a 83       	std	Y+2, r23	; 0x02
    26e0:	8b 83       	std	Y+3, r24	; 0x03
    26e2:	9c 83       	std	Y+4, r25	; 0x04
    26e4:	2d 83       	std	Y+5, r18	; 0x05
    26e6:	3e 83       	std	Y+6, r19	; 0x06
    26e8:	4f 83       	std	Y+7, r20	; 0x07
    26ea:	58 87       	std	Y+8, r21	; 0x08
    26ec:	89 e0       	ldi	r24, 0x09	; 9
    26ee:	e8 2e       	mov	r14, r24
    26f0:	f1 2c       	mov	r15, r1
    26f2:	ec 0e       	add	r14, r28
    26f4:	fd 1e       	adc	r15, r29
    26f6:	ce 01       	movw	r24, r28
    26f8:	01 96       	adiw	r24, 0x01	; 1
    26fa:	b7 01       	movw	r22, r14
    26fc:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__unpack_f>
    2700:	8e 01       	movw	r16, r28
    2702:	0f 5e       	subi	r16, 0xEF	; 239
    2704:	1f 4f       	sbci	r17, 0xFF	; 255
    2706:	ce 01       	movw	r24, r28
    2708:	05 96       	adiw	r24, 0x05	; 5
    270a:	b8 01       	movw	r22, r16
    270c:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__unpack_f>
    2710:	c7 01       	movw	r24, r14
    2712:	b8 01       	movw	r22, r16
    2714:	ae 01       	movw	r20, r28
    2716:	47 5e       	subi	r20, 0xE7	; 231
    2718:	5f 4f       	sbci	r21, 0xFF	; 255
    271a:	0e 94 1e 12 	call	0x243c	; 0x243c <_fpadd_parts>
    271e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__pack_f>
    2722:	a0 96       	adiw	r28, 0x20	; 32
    2724:	e6 e0       	ldi	r30, 0x06	; 6
    2726:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

0000272a <__subsf3>:
    272a:	a0 e2       	ldi	r26, 0x20	; 32
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	eb e9       	ldi	r30, 0x9B	; 155
    2730:	f3 e1       	ldi	r31, 0x13	; 19
    2732:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x18>
    2736:	69 83       	std	Y+1, r22	; 0x01
    2738:	7a 83       	std	Y+2, r23	; 0x02
    273a:	8b 83       	std	Y+3, r24	; 0x03
    273c:	9c 83       	std	Y+4, r25	; 0x04
    273e:	2d 83       	std	Y+5, r18	; 0x05
    2740:	3e 83       	std	Y+6, r19	; 0x06
    2742:	4f 83       	std	Y+7, r20	; 0x07
    2744:	58 87       	std	Y+8, r21	; 0x08
    2746:	8e 01       	movw	r16, r28
    2748:	07 5f       	subi	r16, 0xF7	; 247
    274a:	1f 4f       	sbci	r17, 0xFF	; 255
    274c:	ce 01       	movw	r24, r28
    274e:	01 96       	adiw	r24, 0x01	; 1
    2750:	b8 01       	movw	r22, r16
    2752:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__unpack_f>
    2756:	91 e1       	ldi	r25, 0x11	; 17
    2758:	e9 2e       	mov	r14, r25
    275a:	f1 2c       	mov	r15, r1
    275c:	ec 0e       	add	r14, r28
    275e:	fd 1e       	adc	r15, r29
    2760:	ce 01       	movw	r24, r28
    2762:	05 96       	adiw	r24, 0x05	; 5
    2764:	b7 01       	movw	r22, r14
    2766:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__unpack_f>
    276a:	8a 89       	ldd	r24, Y+18	; 0x12
    276c:	91 e0       	ldi	r25, 0x01	; 1
    276e:	89 27       	eor	r24, r25
    2770:	8a 8b       	std	Y+18, r24	; 0x12
    2772:	c8 01       	movw	r24, r16
    2774:	b7 01       	movw	r22, r14
    2776:	ae 01       	movw	r20, r28
    2778:	47 5e       	subi	r20, 0xE7	; 231
    277a:	5f 4f       	sbci	r21, 0xFF	; 255
    277c:	0e 94 1e 12 	call	0x243c	; 0x243c <_fpadd_parts>
    2780:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__pack_f>
    2784:	a0 96       	adiw	r28, 0x20	; 32
    2786:	e6 e0       	ldi	r30, 0x06	; 6
    2788:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

0000278c <__mulsf3>:
    278c:	a0 e2       	ldi	r26, 0x20	; 32
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	ec ec       	ldi	r30, 0xCC	; 204
    2792:	f3 e1       	ldi	r31, 0x13	; 19
    2794:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__prologue_saves__>
    2798:	69 83       	std	Y+1, r22	; 0x01
    279a:	7a 83       	std	Y+2, r23	; 0x02
    279c:	8b 83       	std	Y+3, r24	; 0x03
    279e:	9c 83       	std	Y+4, r25	; 0x04
    27a0:	2d 83       	std	Y+5, r18	; 0x05
    27a2:	3e 83       	std	Y+6, r19	; 0x06
    27a4:	4f 83       	std	Y+7, r20	; 0x07
    27a6:	58 87       	std	Y+8, r21	; 0x08
    27a8:	ce 01       	movw	r24, r28
    27aa:	01 96       	adiw	r24, 0x01	; 1
    27ac:	be 01       	movw	r22, r28
    27ae:	67 5f       	subi	r22, 0xF7	; 247
    27b0:	7f 4f       	sbci	r23, 0xFF	; 255
    27b2:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__unpack_f>
    27b6:	ce 01       	movw	r24, r28
    27b8:	05 96       	adiw	r24, 0x05	; 5
    27ba:	be 01       	movw	r22, r28
    27bc:	6f 5e       	subi	r22, 0xEF	; 239
    27be:	7f 4f       	sbci	r23, 0xFF	; 255
    27c0:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__unpack_f>
    27c4:	99 85       	ldd	r25, Y+9	; 0x09
    27c6:	92 30       	cpi	r25, 0x02	; 2
    27c8:	78 f0       	brcs	.+30     	; 0x27e8 <__mulsf3+0x5c>
    27ca:	89 89       	ldd	r24, Y+17	; 0x11
    27cc:	82 30       	cpi	r24, 0x02	; 2
    27ce:	c0 f0       	brcs	.+48     	; 0x2800 <__mulsf3+0x74>
    27d0:	94 30       	cpi	r25, 0x04	; 4
    27d2:	19 f4       	brne	.+6      	; 0x27da <__mulsf3+0x4e>
    27d4:	82 30       	cpi	r24, 0x02	; 2
    27d6:	41 f4       	brne	.+16     	; 0x27e8 <__mulsf3+0x5c>
    27d8:	cb c0       	rjmp	.+406    	; 0x2970 <__mulsf3+0x1e4>
    27da:	84 30       	cpi	r24, 0x04	; 4
    27dc:	19 f4       	brne	.+6      	; 0x27e4 <__mulsf3+0x58>
    27de:	92 30       	cpi	r25, 0x02	; 2
    27e0:	79 f4       	brne	.+30     	; 0x2800 <__mulsf3+0x74>
    27e2:	c6 c0       	rjmp	.+396    	; 0x2970 <__mulsf3+0x1e4>
    27e4:	92 30       	cpi	r25, 0x02	; 2
    27e6:	51 f4       	brne	.+20     	; 0x27fc <__mulsf3+0x70>
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	2a 85       	ldd	r18, Y+10	; 0x0a
    27ec:	9a 89       	ldd	r25, Y+18	; 0x12
    27ee:	29 17       	cp	r18, r25
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <__mulsf3+0x68>
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	8a 87       	std	Y+10, r24	; 0x0a
    27f6:	ce 01       	movw	r24, r28
    27f8:	09 96       	adiw	r24, 0x09	; 9
    27fa:	bc c0       	rjmp	.+376    	; 0x2974 <__mulsf3+0x1e8>
    27fc:	82 30       	cpi	r24, 0x02	; 2
    27fe:	51 f4       	brne	.+20     	; 0x2814 <__mulsf3+0x88>
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	2a 85       	ldd	r18, Y+10	; 0x0a
    2804:	9a 89       	ldd	r25, Y+18	; 0x12
    2806:	29 17       	cp	r18, r25
    2808:	09 f4       	brne	.+2      	; 0x280c <__mulsf3+0x80>
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	8a 8b       	std	Y+18, r24	; 0x12
    280e:	ce 01       	movw	r24, r28
    2810:	41 96       	adiw	r24, 0x11	; 17
    2812:	b0 c0       	rjmp	.+352    	; 0x2974 <__mulsf3+0x1e8>
    2814:	6d 84       	ldd	r6, Y+13	; 0x0d
    2816:	7e 84       	ldd	r7, Y+14	; 0x0e
    2818:	8f 84       	ldd	r8, Y+15	; 0x0f
    281a:	98 88       	ldd	r9, Y+16	; 0x10
    281c:	ed 88       	ldd	r14, Y+21	; 0x15
    281e:	fe 88       	ldd	r15, Y+22	; 0x16
    2820:	0f 89       	ldd	r16, Y+23	; 0x17
    2822:	18 8d       	ldd	r17, Y+24	; 0x18
    2824:	e0 e2       	ldi	r30, 0x20	; 32
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	dc 01       	movw	r26, r24
    282e:	aa 24       	eor	r10, r10
    2830:	bb 24       	eor	r11, r11
    2832:	65 01       	movw	r12, r10
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	a9 01       	movw	r20, r18
    283a:	b3 01       	movw	r22, r6
    283c:	61 70       	andi	r22, 0x01	; 1
    283e:	70 70       	andi	r23, 0x00	; 0
    2840:	61 15       	cp	r22, r1
    2842:	71 05       	cpc	r23, r1
    2844:	d1 f0       	breq	.+52     	; 0x287a <__mulsf3+0xee>
    2846:	2e 0d       	add	r18, r14
    2848:	3f 1d       	adc	r19, r15
    284a:	40 1f       	adc	r20, r16
    284c:	51 1f       	adc	r21, r17
    284e:	15 01       	movw	r2, r10
    2850:	26 01       	movw	r4, r12
    2852:	28 0e       	add	r2, r24
    2854:	39 1e       	adc	r3, r25
    2856:	4a 1e       	adc	r4, r26
    2858:	5b 1e       	adc	r5, r27
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	a0 e0       	ldi	r26, 0x00	; 0
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	2e 15       	cp	r18, r14
    2864:	3f 05       	cpc	r19, r15
    2866:	40 07       	cpc	r20, r16
    2868:	51 07       	cpc	r21, r17
    286a:	18 f0       	brcs	.+6      	; 0x2872 <__mulsf3+0xe6>
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	dc 01       	movw	r26, r24
    2872:	82 0d       	add	r24, r2
    2874:	93 1d       	adc	r25, r3
    2876:	a4 1d       	adc	r26, r4
    2878:	b5 1d       	adc	r27, r5
    287a:	aa 0c       	add	r10, r10
    287c:	bb 1c       	adc	r11, r11
    287e:	cc 1c       	adc	r12, r12
    2880:	dd 1c       	adc	r13, r13
    2882:	17 ff       	sbrs	r17, 7
    2884:	09 c0       	rjmp	.+18     	; 0x2898 <__mulsf3+0x10c>
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	26 2e       	mov	r2, r22
    288a:	31 2c       	mov	r3, r1
    288c:	41 2c       	mov	r4, r1
    288e:	51 2c       	mov	r5, r1
    2890:	a2 28       	or	r10, r2
    2892:	b3 28       	or	r11, r3
    2894:	c4 28       	or	r12, r4
    2896:	d5 28       	or	r13, r5
    2898:	31 97       	sbiw	r30, 0x01	; 1
    289a:	49 f0       	breq	.+18     	; 0x28ae <__mulsf3+0x122>
    289c:	ee 0c       	add	r14, r14
    289e:	ff 1c       	adc	r15, r15
    28a0:	00 1f       	adc	r16, r16
    28a2:	11 1f       	adc	r17, r17
    28a4:	96 94       	lsr	r9
    28a6:	87 94       	ror	r8
    28a8:	77 94       	ror	r7
    28aa:	67 94       	ror	r6
    28ac:	c6 cf       	rjmp	.-116    	; 0x283a <__mulsf3+0xae>
    28ae:	6b 89       	ldd	r22, Y+19	; 0x13
    28b0:	7c 89       	ldd	r23, Y+20	; 0x14
    28b2:	eb 85       	ldd	r30, Y+11	; 0x0b
    28b4:	fc 85       	ldd	r31, Y+12	; 0x0c
    28b6:	6e 0f       	add	r22, r30
    28b8:	7f 1f       	adc	r23, r31
    28ba:	6e 5f       	subi	r22, 0xFE	; 254
    28bc:	7f 4f       	sbci	r23, 0xFF	; 255
    28be:	7c 8f       	std	Y+28, r23	; 0x1c
    28c0:	6b 8f       	std	Y+27, r22	; 0x1b
    28c2:	61 e0       	ldi	r22, 0x01	; 1
    28c4:	ea 85       	ldd	r30, Y+10	; 0x0a
    28c6:	7a 89       	ldd	r23, Y+18	; 0x12
    28c8:	e7 17       	cp	r30, r23
    28ca:	09 f4       	brne	.+2      	; 0x28ce <__mulsf3+0x142>
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	6a 8f       	std	Y+26, r22	; 0x1a
    28d0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    28d2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    28d4:	10 c0       	rjmp	.+32     	; 0x28f6 <__mulsf3+0x16a>
    28d6:	fc 01       	movw	r30, r24
    28d8:	e1 70       	andi	r30, 0x01	; 1
    28da:	f0 70       	andi	r31, 0x00	; 0
    28dc:	30 97       	sbiw	r30, 0x00	; 0
    28de:	29 f0       	breq	.+10     	; 0x28ea <__mulsf3+0x15e>
    28e0:	56 95       	lsr	r21
    28e2:	47 95       	ror	r20
    28e4:	37 95       	ror	r19
    28e6:	27 95       	ror	r18
    28e8:	50 68       	ori	r21, 0x80	; 128
    28ea:	b6 95       	lsr	r27
    28ec:	a7 95       	ror	r26
    28ee:	97 95       	ror	r25
    28f0:	87 95       	ror	r24
    28f2:	6f 5f       	subi	r22, 0xFF	; 255
    28f4:	7f 4f       	sbci	r23, 0xFF	; 255
    28f6:	b7 fd       	sbrc	r27, 7
    28f8:	ee cf       	rjmp	.-36     	; 0x28d6 <__mulsf3+0x14a>
    28fa:	0c c0       	rjmp	.+24     	; 0x2914 <__mulsf3+0x188>
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	aa 1f       	adc	r26, r26
    2902:	bb 1f       	adc	r27, r27
    2904:	57 fd       	sbrc	r21, 7
    2906:	81 60       	ori	r24, 0x01	; 1
    2908:	22 0f       	add	r18, r18
    290a:	33 1f       	adc	r19, r19
    290c:	44 1f       	adc	r20, r20
    290e:	55 1f       	adc	r21, r21
    2910:	61 50       	subi	r22, 0x01	; 1
    2912:	70 40       	sbci	r23, 0x00	; 0
    2914:	80 30       	cpi	r24, 0x00	; 0
    2916:	e0 e0       	ldi	r30, 0x00	; 0
    2918:	9e 07       	cpc	r25, r30
    291a:	e0 e0       	ldi	r30, 0x00	; 0
    291c:	ae 07       	cpc	r26, r30
    291e:	e0 e4       	ldi	r30, 0x40	; 64
    2920:	be 07       	cpc	r27, r30
    2922:	60 f3       	brcs	.-40     	; 0x28fc <__mulsf3+0x170>
    2924:	6b 8f       	std	Y+27, r22	; 0x1b
    2926:	7c 8f       	std	Y+28, r23	; 0x1c
    2928:	6f e7       	ldi	r22, 0x7F	; 127
    292a:	e6 2e       	mov	r14, r22
    292c:	f1 2c       	mov	r15, r1
    292e:	01 2d       	mov	r16, r1
    2930:	11 2d       	mov	r17, r1
    2932:	e8 22       	and	r14, r24
    2934:	f9 22       	and	r15, r25
    2936:	0a 23       	and	r16, r26
    2938:	1b 23       	and	r17, r27
    293a:	60 e4       	ldi	r22, 0x40	; 64
    293c:	e6 16       	cp	r14, r22
    293e:	f1 04       	cpc	r15, r1
    2940:	01 05       	cpc	r16, r1
    2942:	11 05       	cpc	r17, r1
    2944:	61 f4       	brne	.+24     	; 0x295e <__mulsf3+0x1d2>
    2946:	87 fd       	sbrc	r24, 7
    2948:	0a c0       	rjmp	.+20     	; 0x295e <__mulsf3+0x1d2>
    294a:	21 15       	cp	r18, r1
    294c:	31 05       	cpc	r19, r1
    294e:	41 05       	cpc	r20, r1
    2950:	51 05       	cpc	r21, r1
    2952:	29 f0       	breq	.+10     	; 0x295e <__mulsf3+0x1d2>
    2954:	80 5c       	subi	r24, 0xC0	; 192
    2956:	9f 4f       	sbci	r25, 0xFF	; 255
    2958:	af 4f       	sbci	r26, 0xFF	; 255
    295a:	bf 4f       	sbci	r27, 0xFF	; 255
    295c:	80 78       	andi	r24, 0x80	; 128
    295e:	8d 8f       	std	Y+29, r24	; 0x1d
    2960:	9e 8f       	std	Y+30, r25	; 0x1e
    2962:	af 8f       	std	Y+31, r26	; 0x1f
    2964:	b8 a3       	std	Y+32, r27	; 0x20
    2966:	83 e0       	ldi	r24, 0x03	; 3
    2968:	89 8f       	std	Y+25, r24	; 0x19
    296a:	ce 01       	movw	r24, r28
    296c:	49 96       	adiw	r24, 0x19	; 25
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <__mulsf3+0x1e8>
    2970:	8d e8       	ldi	r24, 0x8D	; 141
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__pack_f>
    2978:	a0 96       	adiw	r28, 0x20	; 32
    297a:	e2 e1       	ldi	r30, 0x12	; 18
    297c:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__epilogue_restores__>

00002980 <__gtsf2>:
    2980:	a8 e1       	ldi	r26, 0x18	; 24
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	e6 ec       	ldi	r30, 0xC6	; 198
    2986:	f4 e1       	ldi	r31, 0x14	; 20
    2988:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x18>
    298c:	69 83       	std	Y+1, r22	; 0x01
    298e:	7a 83       	std	Y+2, r23	; 0x02
    2990:	8b 83       	std	Y+3, r24	; 0x03
    2992:	9c 83       	std	Y+4, r25	; 0x04
    2994:	2d 83       	std	Y+5, r18	; 0x05
    2996:	3e 83       	std	Y+6, r19	; 0x06
    2998:	4f 83       	std	Y+7, r20	; 0x07
    299a:	58 87       	std	Y+8, r21	; 0x08
    299c:	8e 01       	movw	r16, r28
    299e:	07 5f       	subi	r16, 0xF7	; 247
    29a0:	1f 4f       	sbci	r17, 0xFF	; 255
    29a2:	ce 01       	movw	r24, r28
    29a4:	01 96       	adiw	r24, 0x01	; 1
    29a6:	b8 01       	movw	r22, r16
    29a8:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__unpack_f>
    29ac:	81 e1       	ldi	r24, 0x11	; 17
    29ae:	e8 2e       	mov	r14, r24
    29b0:	f1 2c       	mov	r15, r1
    29b2:	ec 0e       	add	r14, r28
    29b4:	fd 1e       	adc	r15, r29
    29b6:	ce 01       	movw	r24, r28
    29b8:	05 96       	adiw	r24, 0x05	; 5
    29ba:	b7 01       	movw	r22, r14
    29bc:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__unpack_f>
    29c0:	89 85       	ldd	r24, Y+9	; 0x09
    29c2:	82 30       	cpi	r24, 0x02	; 2
    29c4:	40 f0       	brcs	.+16     	; 0x29d6 <__gtsf2+0x56>
    29c6:	89 89       	ldd	r24, Y+17	; 0x11
    29c8:	82 30       	cpi	r24, 0x02	; 2
    29ca:	28 f0       	brcs	.+10     	; 0x29d6 <__gtsf2+0x56>
    29cc:	c8 01       	movw	r24, r16
    29ce:	b7 01       	movw	r22, r14
    29d0:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__fpcmp_parts_f>
    29d4:	01 c0       	rjmp	.+2      	; 0x29d8 <__gtsf2+0x58>
    29d6:	8f ef       	ldi	r24, 0xFF	; 255
    29d8:	68 96       	adiw	r28, 0x18	; 24
    29da:	e6 e0       	ldi	r30, 0x06	; 6
    29dc:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

000029e0 <__gesf2>:
    29e0:	a8 e1       	ldi	r26, 0x18	; 24
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	e6 ef       	ldi	r30, 0xF6	; 246
    29e6:	f4 e1       	ldi	r31, 0x14	; 20
    29e8:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x18>
    29ec:	69 83       	std	Y+1, r22	; 0x01
    29ee:	7a 83       	std	Y+2, r23	; 0x02
    29f0:	8b 83       	std	Y+3, r24	; 0x03
    29f2:	9c 83       	std	Y+4, r25	; 0x04
    29f4:	2d 83       	std	Y+5, r18	; 0x05
    29f6:	3e 83       	std	Y+6, r19	; 0x06
    29f8:	4f 83       	std	Y+7, r20	; 0x07
    29fa:	58 87       	std	Y+8, r21	; 0x08
    29fc:	8e 01       	movw	r16, r28
    29fe:	07 5f       	subi	r16, 0xF7	; 247
    2a00:	1f 4f       	sbci	r17, 0xFF	; 255
    2a02:	ce 01       	movw	r24, r28
    2a04:	01 96       	adiw	r24, 0x01	; 1
    2a06:	b8 01       	movw	r22, r16
    2a08:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__unpack_f>
    2a0c:	81 e1       	ldi	r24, 0x11	; 17
    2a0e:	e8 2e       	mov	r14, r24
    2a10:	f1 2c       	mov	r15, r1
    2a12:	ec 0e       	add	r14, r28
    2a14:	fd 1e       	adc	r15, r29
    2a16:	ce 01       	movw	r24, r28
    2a18:	05 96       	adiw	r24, 0x05	; 5
    2a1a:	b7 01       	movw	r22, r14
    2a1c:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__unpack_f>
    2a20:	89 85       	ldd	r24, Y+9	; 0x09
    2a22:	82 30       	cpi	r24, 0x02	; 2
    2a24:	40 f0       	brcs	.+16     	; 0x2a36 <__gesf2+0x56>
    2a26:	89 89       	ldd	r24, Y+17	; 0x11
    2a28:	82 30       	cpi	r24, 0x02	; 2
    2a2a:	28 f0       	brcs	.+10     	; 0x2a36 <__gesf2+0x56>
    2a2c:	c8 01       	movw	r24, r16
    2a2e:	b7 01       	movw	r22, r14
    2a30:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__fpcmp_parts_f>
    2a34:	01 c0       	rjmp	.+2      	; 0x2a38 <__gesf2+0x58>
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	68 96       	adiw	r28, 0x18	; 24
    2a3a:	e6 e0       	ldi	r30, 0x06	; 6
    2a3c:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

00002a40 <__ltsf2>:
    2a40:	a8 e1       	ldi	r26, 0x18	; 24
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	e6 e2       	ldi	r30, 0x26	; 38
    2a46:	f5 e1       	ldi	r31, 0x15	; 21
    2a48:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x18>
    2a4c:	69 83       	std	Y+1, r22	; 0x01
    2a4e:	7a 83       	std	Y+2, r23	; 0x02
    2a50:	8b 83       	std	Y+3, r24	; 0x03
    2a52:	9c 83       	std	Y+4, r25	; 0x04
    2a54:	2d 83       	std	Y+5, r18	; 0x05
    2a56:	3e 83       	std	Y+6, r19	; 0x06
    2a58:	4f 83       	std	Y+7, r20	; 0x07
    2a5a:	58 87       	std	Y+8, r21	; 0x08
    2a5c:	8e 01       	movw	r16, r28
    2a5e:	07 5f       	subi	r16, 0xF7	; 247
    2a60:	1f 4f       	sbci	r17, 0xFF	; 255
    2a62:	ce 01       	movw	r24, r28
    2a64:	01 96       	adiw	r24, 0x01	; 1
    2a66:	b8 01       	movw	r22, r16
    2a68:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__unpack_f>
    2a6c:	81 e1       	ldi	r24, 0x11	; 17
    2a6e:	e8 2e       	mov	r14, r24
    2a70:	f1 2c       	mov	r15, r1
    2a72:	ec 0e       	add	r14, r28
    2a74:	fd 1e       	adc	r15, r29
    2a76:	ce 01       	movw	r24, r28
    2a78:	05 96       	adiw	r24, 0x05	; 5
    2a7a:	b7 01       	movw	r22, r14
    2a7c:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__unpack_f>
    2a80:	89 85       	ldd	r24, Y+9	; 0x09
    2a82:	82 30       	cpi	r24, 0x02	; 2
    2a84:	40 f0       	brcs	.+16     	; 0x2a96 <__ltsf2+0x56>
    2a86:	89 89       	ldd	r24, Y+17	; 0x11
    2a88:	82 30       	cpi	r24, 0x02	; 2
    2a8a:	28 f0       	brcs	.+10     	; 0x2a96 <__ltsf2+0x56>
    2a8c:	c8 01       	movw	r24, r16
    2a8e:	b7 01       	movw	r22, r14
    2a90:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__fpcmp_parts_f>
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <__ltsf2+0x58>
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	68 96       	adiw	r28, 0x18	; 24
    2a9a:	e6 e0       	ldi	r30, 0x06	; 6
    2a9c:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

00002aa0 <__fixsfsi>:
    2aa0:	ac e0       	ldi	r26, 0x0C	; 12
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e6 e5       	ldi	r30, 0x56	; 86
    2aa6:	f5 e1       	ldi	r31, 0x15	; 21
    2aa8:	0c 94 42 17 	jmp	0x2e84	; 0x2e84 <__prologue_saves__+0x20>
    2aac:	69 83       	std	Y+1, r22	; 0x01
    2aae:	7a 83       	std	Y+2, r23	; 0x02
    2ab0:	8b 83       	std	Y+3, r24	; 0x03
    2ab2:	9c 83       	std	Y+4, r25	; 0x04
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	01 96       	adiw	r24, 0x01	; 1
    2ab8:	be 01       	movw	r22, r28
    2aba:	6b 5f       	subi	r22, 0xFB	; 251
    2abc:	7f 4f       	sbci	r23, 0xFF	; 255
    2abe:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__unpack_f>
    2ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac4:	82 30       	cpi	r24, 0x02	; 2
    2ac6:	81 f1       	breq	.+96     	; 0x2b28 <__fixsfsi+0x88>
    2ac8:	82 30       	cpi	r24, 0x02	; 2
    2aca:	70 f1       	brcs	.+92     	; 0x2b28 <__fixsfsi+0x88>
    2acc:	84 30       	cpi	r24, 0x04	; 4
    2ace:	21 f4       	brne	.+8      	; 0x2ad8 <__fixsfsi+0x38>
    2ad0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad2:	88 23       	and	r24, r24
    2ad4:	69 f1       	breq	.+90     	; 0x2b30 <__fixsfsi+0x90>
    2ad6:	0a c0       	rjmp	.+20     	; 0x2aec <__fixsfsi+0x4c>
    2ad8:	2f 81       	ldd	r18, Y+7	; 0x07
    2ada:	38 85       	ldd	r19, Y+8	; 0x08
    2adc:	37 fd       	sbrc	r19, 7
    2ade:	24 c0       	rjmp	.+72     	; 0x2b28 <__fixsfsi+0x88>
    2ae0:	6e 81       	ldd	r22, Y+6	; 0x06
    2ae2:	2f 31       	cpi	r18, 0x1F	; 31
    2ae4:	31 05       	cpc	r19, r1
    2ae6:	3c f0       	brlt	.+14     	; 0x2af6 <__fixsfsi+0x56>
    2ae8:	66 23       	and	r22, r22
    2aea:	11 f1       	breq	.+68     	; 0x2b30 <__fixsfsi+0x90>
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	50 e8       	ldi	r21, 0x80	; 128
    2af4:	21 c0       	rjmp	.+66     	; 0x2b38 <__fixsfsi+0x98>
    2af6:	8e e1       	ldi	r24, 0x1E	; 30
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	82 1b       	sub	r24, r18
    2afc:	93 0b       	sbc	r25, r19
    2afe:	29 85       	ldd	r18, Y+9	; 0x09
    2b00:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b02:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b04:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b06:	04 c0       	rjmp	.+8      	; 0x2b10 <__fixsfsi+0x70>
    2b08:	56 95       	lsr	r21
    2b0a:	47 95       	ror	r20
    2b0c:	37 95       	ror	r19
    2b0e:	27 95       	ror	r18
    2b10:	8a 95       	dec	r24
    2b12:	d2 f7       	brpl	.-12     	; 0x2b08 <__fixsfsi+0x68>
    2b14:	66 23       	and	r22, r22
    2b16:	81 f0       	breq	.+32     	; 0x2b38 <__fixsfsi+0x98>
    2b18:	50 95       	com	r21
    2b1a:	40 95       	com	r20
    2b1c:	30 95       	com	r19
    2b1e:	21 95       	neg	r18
    2b20:	3f 4f       	sbci	r19, 0xFF	; 255
    2b22:	4f 4f       	sbci	r20, 0xFF	; 255
    2b24:	5f 4f       	sbci	r21, 0xFF	; 255
    2b26:	08 c0       	rjmp	.+16     	; 0x2b38 <__fixsfsi+0x98>
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	a9 01       	movw	r20, r18
    2b2e:	04 c0       	rjmp	.+8      	; 0x2b38 <__fixsfsi+0x98>
    2b30:	2f ef       	ldi	r18, 0xFF	; 255
    2b32:	3f ef       	ldi	r19, 0xFF	; 255
    2b34:	4f ef       	ldi	r20, 0xFF	; 255
    2b36:	5f e7       	ldi	r21, 0x7F	; 127
    2b38:	b9 01       	movw	r22, r18
    2b3a:	ca 01       	movw	r24, r20
    2b3c:	2c 96       	adiw	r28, 0x0c	; 12
    2b3e:	e2 e0       	ldi	r30, 0x02	; 2
    2b40:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__epilogue_restores__+0x20>

00002b44 <__pack_f>:
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	fc 01       	movw	r30, r24
    2b52:	24 81       	ldd	r18, Z+4	; 0x04
    2b54:	35 81       	ldd	r19, Z+5	; 0x05
    2b56:	46 81       	ldd	r20, Z+6	; 0x06
    2b58:	57 81       	ldd	r21, Z+7	; 0x07
    2b5a:	61 81       	ldd	r22, Z+1	; 0x01
    2b5c:	80 81       	ld	r24, Z
    2b5e:	82 30       	cpi	r24, 0x02	; 2
    2b60:	20 f4       	brcc	.+8      	; 0x2b6a <__pack_f+0x26>
    2b62:	40 61       	ori	r20, 0x10	; 16
    2b64:	ef ef       	ldi	r30, 0xFF	; 255
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	a3 c0       	rjmp	.+326    	; 0x2cb0 <__pack_f+0x16c>
    2b6a:	84 30       	cpi	r24, 0x04	; 4
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <__pack_f+0x2c>
    2b6e:	9b c0       	rjmp	.+310    	; 0x2ca6 <__pack_f+0x162>
    2b70:	82 30       	cpi	r24, 0x02	; 2
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <__pack_f+0x32>
    2b74:	92 c0       	rjmp	.+292    	; 0x2c9a <__pack_f+0x156>
    2b76:	21 15       	cp	r18, r1
    2b78:	31 05       	cpc	r19, r1
    2b7a:	41 05       	cpc	r20, r1
    2b7c:	51 05       	cpc	r21, r1
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <__pack_f+0x3e>
    2b80:	8f c0       	rjmp	.+286    	; 0x2ca0 <__pack_f+0x15c>
    2b82:	02 80       	ldd	r0, Z+2	; 0x02
    2b84:	f3 81       	ldd	r31, Z+3	; 0x03
    2b86:	e0 2d       	mov	r30, r0
    2b88:	8f ef       	ldi	r24, 0xFF	; 255
    2b8a:	e2 38       	cpi	r30, 0x82	; 130
    2b8c:	f8 07       	cpc	r31, r24
    2b8e:	0c f0       	brlt	.+2      	; 0x2b92 <__pack_f+0x4e>
    2b90:	5a c0       	rjmp	.+180    	; 0x2c46 <__pack_f+0x102>
    2b92:	c2 e8       	ldi	r28, 0x82	; 130
    2b94:	df ef       	ldi	r29, 0xFF	; 255
    2b96:	ce 1b       	sub	r28, r30
    2b98:	df 0b       	sbc	r29, r31
    2b9a:	ca 31       	cpi	r28, 0x1A	; 26
    2b9c:	d1 05       	cpc	r29, r1
    2b9e:	6c f5       	brge	.+90     	; 0x2bfa <__pack_f+0xb6>
    2ba0:	79 01       	movw	r14, r18
    2ba2:	8a 01       	movw	r16, r20
    2ba4:	0c 2e       	mov	r0, r28
    2ba6:	04 c0       	rjmp	.+8      	; 0x2bb0 <__pack_f+0x6c>
    2ba8:	16 95       	lsr	r17
    2baa:	07 95       	ror	r16
    2bac:	f7 94       	ror	r15
    2bae:	e7 94       	ror	r14
    2bb0:	0a 94       	dec	r0
    2bb2:	d2 f7       	brpl	.-12     	; 0x2ba8 <__pack_f+0x64>
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	a0 e0       	ldi	r26, 0x00	; 0
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	0c 2e       	mov	r0, r28
    2bbe:	04 c0       	rjmp	.+8      	; 0x2bc8 <__pack_f+0x84>
    2bc0:	88 0f       	add	r24, r24
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	aa 1f       	adc	r26, r26
    2bc6:	bb 1f       	adc	r27, r27
    2bc8:	0a 94       	dec	r0
    2bca:	d2 f7       	brpl	.-12     	; 0x2bc0 <__pack_f+0x7c>
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	a1 09       	sbc	r26, r1
    2bd0:	b1 09       	sbc	r27, r1
    2bd2:	82 23       	and	r24, r18
    2bd4:	93 23       	and	r25, r19
    2bd6:	a4 23       	and	r26, r20
    2bd8:	b5 23       	and	r27, r21
    2bda:	21 e0       	ldi	r18, 0x01	; 1
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	50 e0       	ldi	r21, 0x00	; 0
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	a1 05       	cpc	r26, r1
    2be6:	b1 05       	cpc	r27, r1
    2be8:	19 f4       	brne	.+6      	; 0x2bf0 <__pack_f+0xac>
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	a9 01       	movw	r20, r18
    2bf0:	2e 29       	or	r18, r14
    2bf2:	3f 29       	or	r19, r15
    2bf4:	40 2b       	or	r20, r16
    2bf6:	51 2b       	or	r21, r17
    2bf8:	03 c0       	rjmp	.+6      	; 0x2c00 <__pack_f+0xbc>
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	a9 01       	movw	r20, r18
    2c00:	da 01       	movw	r26, r20
    2c02:	c9 01       	movw	r24, r18
    2c04:	8f 77       	andi	r24, 0x7F	; 127
    2c06:	90 70       	andi	r25, 0x00	; 0
    2c08:	a0 70       	andi	r26, 0x00	; 0
    2c0a:	b0 70       	andi	r27, 0x00	; 0
    2c0c:	80 34       	cpi	r24, 0x40	; 64
    2c0e:	91 05       	cpc	r25, r1
    2c10:	a1 05       	cpc	r26, r1
    2c12:	b1 05       	cpc	r27, r1
    2c14:	39 f4       	brne	.+14     	; 0x2c24 <__pack_f+0xe0>
    2c16:	27 ff       	sbrs	r18, 7
    2c18:	09 c0       	rjmp	.+18     	; 0x2c2c <__pack_f+0xe8>
    2c1a:	20 5c       	subi	r18, 0xC0	; 192
    2c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1e:	4f 4f       	sbci	r20, 0xFF	; 255
    2c20:	5f 4f       	sbci	r21, 0xFF	; 255
    2c22:	04 c0       	rjmp	.+8      	; 0x2c2c <__pack_f+0xe8>
    2c24:	21 5c       	subi	r18, 0xC1	; 193
    2c26:	3f 4f       	sbci	r19, 0xFF	; 255
    2c28:	4f 4f       	sbci	r20, 0xFF	; 255
    2c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c2c:	e1 e0       	ldi	r30, 0x01	; 1
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	20 30       	cpi	r18, 0x00	; 0
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	38 07       	cpc	r19, r24
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	48 07       	cpc	r20, r24
    2c3a:	80 e4       	ldi	r24, 0x40	; 64
    2c3c:	58 07       	cpc	r21, r24
    2c3e:	28 f5       	brcc	.+74     	; 0x2c8a <__pack_f+0x146>
    2c40:	e0 e0       	ldi	r30, 0x00	; 0
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	22 c0       	rjmp	.+68     	; 0x2c8a <__pack_f+0x146>
    2c46:	e0 38       	cpi	r30, 0x80	; 128
    2c48:	f1 05       	cpc	r31, r1
    2c4a:	6c f5       	brge	.+90     	; 0x2ca6 <__pack_f+0x162>
    2c4c:	e1 58       	subi	r30, 0x81	; 129
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	da 01       	movw	r26, r20
    2c52:	c9 01       	movw	r24, r18
    2c54:	8f 77       	andi	r24, 0x7F	; 127
    2c56:	90 70       	andi	r25, 0x00	; 0
    2c58:	a0 70       	andi	r26, 0x00	; 0
    2c5a:	b0 70       	andi	r27, 0x00	; 0
    2c5c:	80 34       	cpi	r24, 0x40	; 64
    2c5e:	91 05       	cpc	r25, r1
    2c60:	a1 05       	cpc	r26, r1
    2c62:	b1 05       	cpc	r27, r1
    2c64:	39 f4       	brne	.+14     	; 0x2c74 <__pack_f+0x130>
    2c66:	27 ff       	sbrs	r18, 7
    2c68:	09 c0       	rjmp	.+18     	; 0x2c7c <__pack_f+0x138>
    2c6a:	20 5c       	subi	r18, 0xC0	; 192
    2c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6e:	4f 4f       	sbci	r20, 0xFF	; 255
    2c70:	5f 4f       	sbci	r21, 0xFF	; 255
    2c72:	04 c0       	rjmp	.+8      	; 0x2c7c <__pack_f+0x138>
    2c74:	21 5c       	subi	r18, 0xC1	; 193
    2c76:	3f 4f       	sbci	r19, 0xFF	; 255
    2c78:	4f 4f       	sbci	r20, 0xFF	; 255
    2c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c7c:	57 ff       	sbrs	r21, 7
    2c7e:	05 c0       	rjmp	.+10     	; 0x2c8a <__pack_f+0x146>
    2c80:	56 95       	lsr	r21
    2c82:	47 95       	ror	r20
    2c84:	37 95       	ror	r19
    2c86:	27 95       	ror	r18
    2c88:	31 96       	adiw	r30, 0x01	; 1
    2c8a:	87 e0       	ldi	r24, 0x07	; 7
    2c8c:	56 95       	lsr	r21
    2c8e:	47 95       	ror	r20
    2c90:	37 95       	ror	r19
    2c92:	27 95       	ror	r18
    2c94:	8a 95       	dec	r24
    2c96:	d1 f7       	brne	.-12     	; 0x2c8c <__pack_f+0x148>
    2c98:	0b c0       	rjmp	.+22     	; 0x2cb0 <__pack_f+0x16c>
    2c9a:	e0 e0       	ldi	r30, 0x00	; 0
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	05 c0       	rjmp	.+10     	; 0x2caa <__pack_f+0x166>
    2ca0:	e0 e0       	ldi	r30, 0x00	; 0
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	05 c0       	rjmp	.+10     	; 0x2cb0 <__pack_f+0x16c>
    2ca6:	ef ef       	ldi	r30, 0xFF	; 255
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	a9 01       	movw	r20, r18
    2cb0:	8e 2f       	mov	r24, r30
    2cb2:	87 95       	ror	r24
    2cb4:	88 27       	eor	r24, r24
    2cb6:	87 95       	ror	r24
    2cb8:	94 2f       	mov	r25, r20
    2cba:	9f 77       	andi	r25, 0x7F	; 127
    2cbc:	67 95       	ror	r22
    2cbe:	66 27       	eor	r22, r22
    2cc0:	67 95       	ror	r22
    2cc2:	e6 95       	lsr	r30
    2cc4:	e2 2e       	mov	r14, r18
    2cc6:	a9 2f       	mov	r26, r25
    2cc8:	a8 2b       	or	r26, r24
    2cca:	fe 2f       	mov	r31, r30
    2ccc:	f6 2b       	or	r31, r22
    2cce:	62 2f       	mov	r22, r18
    2cd0:	73 2f       	mov	r23, r19
    2cd2:	8a 2f       	mov	r24, r26
    2cd4:	9f 2f       	mov	r25, r31
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	e6 e0       	ldi	r30, 0x06	; 6
    2cdc:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

00002ce0 <__unpack_f>:
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	fb 01       	movw	r30, r22
    2ce4:	2c 91       	ld	r18, X
    2ce6:	11 96       	adiw	r26, 0x01	; 1
    2ce8:	3c 91       	ld	r19, X
    2cea:	11 97       	sbiw	r26, 0x01	; 1
    2cec:	12 96       	adiw	r26, 0x02	; 2
    2cee:	8c 91       	ld	r24, X
    2cf0:	12 97       	sbiw	r26, 0x02	; 2
    2cf2:	48 2f       	mov	r20, r24
    2cf4:	4f 77       	andi	r20, 0x7F	; 127
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	98 2f       	mov	r25, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	99 27       	eor	r25, r25
    2cfe:	99 1f       	adc	r25, r25
    2d00:	13 96       	adiw	r26, 0x03	; 3
    2d02:	6c 91       	ld	r22, X
    2d04:	13 97       	sbiw	r26, 0x03	; 3
    2d06:	86 2f       	mov	r24, r22
    2d08:	88 0f       	add	r24, r24
    2d0a:	89 2b       	or	r24, r25
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	66 1f       	adc	r22, r22
    2d10:	66 27       	eor	r22, r22
    2d12:	66 1f       	adc	r22, r22
    2d14:	61 83       	std	Z+1, r22	; 0x01
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	39 f5       	brne	.+78     	; 0x2d68 <__unpack_f+0x88>
    2d1a:	21 15       	cp	r18, r1
    2d1c:	31 05       	cpc	r19, r1
    2d1e:	41 05       	cpc	r20, r1
    2d20:	51 05       	cpc	r21, r1
    2d22:	11 f4       	brne	.+4      	; 0x2d28 <__unpack_f+0x48>
    2d24:	82 e0       	ldi	r24, 0x02	; 2
    2d26:	29 c0       	rjmp	.+82     	; 0x2d7a <__unpack_f+0x9a>
    2d28:	82 e8       	ldi	r24, 0x82	; 130
    2d2a:	9f ef       	ldi	r25, 0xFF	; 255
    2d2c:	93 83       	std	Z+3, r25	; 0x03
    2d2e:	82 83       	std	Z+2, r24	; 0x02
    2d30:	67 e0       	ldi	r22, 0x07	; 7
    2d32:	22 0f       	add	r18, r18
    2d34:	33 1f       	adc	r19, r19
    2d36:	44 1f       	adc	r20, r20
    2d38:	55 1f       	adc	r21, r21
    2d3a:	6a 95       	dec	r22
    2d3c:	d1 f7       	brne	.-12     	; 0x2d32 <__unpack_f+0x52>
    2d3e:	83 e0       	ldi	r24, 0x03	; 3
    2d40:	80 83       	st	Z, r24
    2d42:	09 c0       	rjmp	.+18     	; 0x2d56 <__unpack_f+0x76>
    2d44:	22 0f       	add	r18, r18
    2d46:	33 1f       	adc	r19, r19
    2d48:	44 1f       	adc	r20, r20
    2d4a:	55 1f       	adc	r21, r21
    2d4c:	82 81       	ldd	r24, Z+2	; 0x02
    2d4e:	93 81       	ldd	r25, Z+3	; 0x03
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	93 83       	std	Z+3, r25	; 0x03
    2d54:	82 83       	std	Z+2, r24	; 0x02
    2d56:	20 30       	cpi	r18, 0x00	; 0
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	38 07       	cpc	r19, r24
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	48 07       	cpc	r20, r24
    2d60:	80 e4       	ldi	r24, 0x40	; 64
    2d62:	58 07       	cpc	r21, r24
    2d64:	78 f3       	brcs	.-34     	; 0x2d44 <__unpack_f+0x64>
    2d66:	20 c0       	rjmp	.+64     	; 0x2da8 <__unpack_f+0xc8>
    2d68:	8f 3f       	cpi	r24, 0xFF	; 255
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	79 f4       	brne	.+30     	; 0x2d8c <__unpack_f+0xac>
    2d6e:	21 15       	cp	r18, r1
    2d70:	31 05       	cpc	r19, r1
    2d72:	41 05       	cpc	r20, r1
    2d74:	51 05       	cpc	r21, r1
    2d76:	19 f4       	brne	.+6      	; 0x2d7e <__unpack_f+0x9e>
    2d78:	84 e0       	ldi	r24, 0x04	; 4
    2d7a:	80 83       	st	Z, r24
    2d7c:	08 95       	ret
    2d7e:	44 ff       	sbrs	r20, 4
    2d80:	03 c0       	rjmp	.+6      	; 0x2d88 <__unpack_f+0xa8>
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	80 83       	st	Z, r24
    2d86:	10 c0       	rjmp	.+32     	; 0x2da8 <__unpack_f+0xc8>
    2d88:	10 82       	st	Z, r1
    2d8a:	0e c0       	rjmp	.+28     	; 0x2da8 <__unpack_f+0xc8>
    2d8c:	8f 57       	subi	r24, 0x7F	; 127
    2d8e:	90 40       	sbci	r25, 0x00	; 0
    2d90:	93 83       	std	Z+3, r25	; 0x03
    2d92:	82 83       	std	Z+2, r24	; 0x02
    2d94:	83 e0       	ldi	r24, 0x03	; 3
    2d96:	80 83       	st	Z, r24
    2d98:	87 e0       	ldi	r24, 0x07	; 7
    2d9a:	22 0f       	add	r18, r18
    2d9c:	33 1f       	adc	r19, r19
    2d9e:	44 1f       	adc	r20, r20
    2da0:	55 1f       	adc	r21, r21
    2da2:	8a 95       	dec	r24
    2da4:	d1 f7       	brne	.-12     	; 0x2d9a <__unpack_f+0xba>
    2da6:	50 64       	ori	r21, 0x40	; 64
    2da8:	24 83       	std	Z+4, r18	; 0x04
    2daa:	35 83       	std	Z+5, r19	; 0x05
    2dac:	46 83       	std	Z+6, r20	; 0x06
    2dae:	57 83       	std	Z+7, r21	; 0x07
    2db0:	08 95       	ret

00002db2 <__fpcmp_parts_f>:
    2db2:	fc 01       	movw	r30, r24
    2db4:	db 01       	movw	r26, r22
    2db6:	90 81       	ld	r25, Z
    2db8:	92 30       	cpi	r25, 0x02	; 2
    2dba:	08 f4       	brcc	.+2      	; 0x2dbe <__fpcmp_parts_f+0xc>
    2dbc:	49 c0       	rjmp	.+146    	; 0x2e50 <__fpcmp_parts_f+0x9e>
    2dbe:	8c 91       	ld	r24, X
    2dc0:	82 30       	cpi	r24, 0x02	; 2
    2dc2:	08 f4       	brcc	.+2      	; 0x2dc6 <__fpcmp_parts_f+0x14>
    2dc4:	45 c0       	rjmp	.+138    	; 0x2e50 <__fpcmp_parts_f+0x9e>
    2dc6:	94 30       	cpi	r25, 0x04	; 4
    2dc8:	51 f4       	brne	.+20     	; 0x2dde <__fpcmp_parts_f+0x2c>
    2dca:	61 81       	ldd	r22, Z+1	; 0x01
    2dcc:	84 30       	cpi	r24, 0x04	; 4
    2dce:	b1 f5       	brne	.+108    	; 0x2e3c <__fpcmp_parts_f+0x8a>
    2dd0:	11 96       	adiw	r26, 0x01	; 1
    2dd2:	2c 91       	ld	r18, X
    2dd4:	11 97       	sbiw	r26, 0x01	; 1
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	26 1b       	sub	r18, r22
    2dda:	31 09       	sbc	r19, r1
    2ddc:	41 c0       	rjmp	.+130    	; 0x2e60 <__fpcmp_parts_f+0xae>
    2dde:	84 30       	cpi	r24, 0x04	; 4
    2de0:	21 f0       	breq	.+8      	; 0x2dea <__fpcmp_parts_f+0x38>
    2de2:	92 30       	cpi	r25, 0x02	; 2
    2de4:	41 f4       	brne	.+16     	; 0x2df6 <__fpcmp_parts_f+0x44>
    2de6:	82 30       	cpi	r24, 0x02	; 2
    2de8:	b1 f1       	breq	.+108    	; 0x2e56 <__fpcmp_parts_f+0xa4>
    2dea:	11 96       	adiw	r26, 0x01	; 1
    2dec:	8c 91       	ld	r24, X
    2dee:	11 97       	sbiw	r26, 0x01	; 1
    2df0:	88 23       	and	r24, r24
    2df2:	a1 f1       	breq	.+104    	; 0x2e5c <__fpcmp_parts_f+0xaa>
    2df4:	2d c0       	rjmp	.+90     	; 0x2e50 <__fpcmp_parts_f+0x9e>
    2df6:	61 81       	ldd	r22, Z+1	; 0x01
    2df8:	82 30       	cpi	r24, 0x02	; 2
    2dfa:	01 f1       	breq	.+64     	; 0x2e3c <__fpcmp_parts_f+0x8a>
    2dfc:	11 96       	adiw	r26, 0x01	; 1
    2dfe:	8c 91       	ld	r24, X
    2e00:	11 97       	sbiw	r26, 0x01	; 1
    2e02:	68 17       	cp	r22, r24
    2e04:	d9 f4       	brne	.+54     	; 0x2e3c <__fpcmp_parts_f+0x8a>
    2e06:	22 81       	ldd	r18, Z+2	; 0x02
    2e08:	33 81       	ldd	r19, Z+3	; 0x03
    2e0a:	12 96       	adiw	r26, 0x02	; 2
    2e0c:	8d 91       	ld	r24, X+
    2e0e:	9c 91       	ld	r25, X
    2e10:	13 97       	sbiw	r26, 0x03	; 3
    2e12:	82 17       	cp	r24, r18
    2e14:	93 07       	cpc	r25, r19
    2e16:	94 f0       	brlt	.+36     	; 0x2e3c <__fpcmp_parts_f+0x8a>
    2e18:	28 17       	cp	r18, r24
    2e1a:	39 07       	cpc	r19, r25
    2e1c:	bc f0       	brlt	.+46     	; 0x2e4c <__fpcmp_parts_f+0x9a>
    2e1e:	24 81       	ldd	r18, Z+4	; 0x04
    2e20:	35 81       	ldd	r19, Z+5	; 0x05
    2e22:	46 81       	ldd	r20, Z+6	; 0x06
    2e24:	57 81       	ldd	r21, Z+7	; 0x07
    2e26:	14 96       	adiw	r26, 0x04	; 4
    2e28:	8d 91       	ld	r24, X+
    2e2a:	9d 91       	ld	r25, X+
    2e2c:	0d 90       	ld	r0, X+
    2e2e:	bc 91       	ld	r27, X
    2e30:	a0 2d       	mov	r26, r0
    2e32:	82 17       	cp	r24, r18
    2e34:	93 07       	cpc	r25, r19
    2e36:	a4 07       	cpc	r26, r20
    2e38:	b5 07       	cpc	r27, r21
    2e3a:	18 f4       	brcc	.+6      	; 0x2e42 <__fpcmp_parts_f+0x90>
    2e3c:	66 23       	and	r22, r22
    2e3e:	41 f0       	breq	.+16     	; 0x2e50 <__fpcmp_parts_f+0x9e>
    2e40:	0d c0       	rjmp	.+26     	; 0x2e5c <__fpcmp_parts_f+0xaa>
    2e42:	28 17       	cp	r18, r24
    2e44:	39 07       	cpc	r19, r25
    2e46:	4a 07       	cpc	r20, r26
    2e48:	5b 07       	cpc	r21, r27
    2e4a:	28 f4       	brcc	.+10     	; 0x2e56 <__fpcmp_parts_f+0xa4>
    2e4c:	66 23       	and	r22, r22
    2e4e:	31 f0       	breq	.+12     	; 0x2e5c <__fpcmp_parts_f+0xaa>
    2e50:	21 e0       	ldi	r18, 0x01	; 1
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	05 c0       	rjmp	.+10     	; 0x2e60 <__fpcmp_parts_f+0xae>
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	02 c0       	rjmp	.+4      	; 0x2e60 <__fpcmp_parts_f+0xae>
    2e5c:	2f ef       	ldi	r18, 0xFF	; 255
    2e5e:	3f ef       	ldi	r19, 0xFF	; 255
    2e60:	c9 01       	movw	r24, r18
    2e62:	08 95       	ret

00002e64 <__prologue_saves__>:
    2e64:	2f 92       	push	r2
    2e66:	3f 92       	push	r3
    2e68:	4f 92       	push	r4
    2e6a:	5f 92       	push	r5
    2e6c:	6f 92       	push	r6
    2e6e:	7f 92       	push	r7
    2e70:	8f 92       	push	r8
    2e72:	9f 92       	push	r9
    2e74:	af 92       	push	r10
    2e76:	bf 92       	push	r11
    2e78:	cf 92       	push	r12
    2e7a:	df 92       	push	r13
    2e7c:	ef 92       	push	r14
    2e7e:	ff 92       	push	r15
    2e80:	0f 93       	push	r16
    2e82:	1f 93       	push	r17
    2e84:	cf 93       	push	r28
    2e86:	df 93       	push	r29
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	ca 1b       	sub	r28, r26
    2e8e:	db 0b       	sbc	r29, r27
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	09 94       	ijmp

00002e9c <__epilogue_restores__>:
    2e9c:	2a 88       	ldd	r2, Y+18	; 0x12
    2e9e:	39 88       	ldd	r3, Y+17	; 0x11
    2ea0:	48 88       	ldd	r4, Y+16	; 0x10
    2ea2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ea4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ea6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ea8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eaa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2eac:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eae:	b9 84       	ldd	r11, Y+9	; 0x09
    2eb0:	c8 84       	ldd	r12, Y+8	; 0x08
    2eb2:	df 80       	ldd	r13, Y+7	; 0x07
    2eb4:	ee 80       	ldd	r14, Y+6	; 0x06
    2eb6:	fd 80       	ldd	r15, Y+5	; 0x05
    2eb8:	0c 81       	ldd	r16, Y+4	; 0x04
    2eba:	1b 81       	ldd	r17, Y+3	; 0x03
    2ebc:	aa 81       	ldd	r26, Y+2	; 0x02
    2ebe:	b9 81       	ldd	r27, Y+1	; 0x01
    2ec0:	ce 0f       	add	r28, r30
    2ec2:	d1 1d       	adc	r29, r1
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
    2ece:	ed 01       	movw	r28, r26
    2ed0:	08 95       	ret

00002ed2 <malloc>:
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	82 30       	cpi	r24, 0x02	; 2
    2ed8:	91 05       	cpc	r25, r1
    2eda:	10 f4       	brcc	.+4      	; 0x2ee0 <malloc+0xe>
    2edc:	82 e0       	ldi	r24, 0x02	; 2
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	e0 91 04 01 	lds	r30, 0x0104
    2ee4:	f0 91 05 01 	lds	r31, 0x0105
    2ee8:	40 e0       	ldi	r20, 0x00	; 0
    2eea:	50 e0       	ldi	r21, 0x00	; 0
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	26 c0       	rjmp	.+76     	; 0x2f3e <malloc+0x6c>
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	68 17       	cp	r22, r24
    2ef8:	79 07       	cpc	r23, r25
    2efa:	e0 f0       	brcs	.+56     	; 0x2f34 <malloc+0x62>
    2efc:	68 17       	cp	r22, r24
    2efe:	79 07       	cpc	r23, r25
    2f00:	81 f4       	brne	.+32     	; 0x2f22 <malloc+0x50>
    2f02:	82 81       	ldd	r24, Z+2	; 0x02
    2f04:	93 81       	ldd	r25, Z+3	; 0x03
    2f06:	21 15       	cp	r18, r1
    2f08:	31 05       	cpc	r19, r1
    2f0a:	31 f0       	breq	.+12     	; 0x2f18 <malloc+0x46>
    2f0c:	d9 01       	movw	r26, r18
    2f0e:	13 96       	adiw	r26, 0x03	; 3
    2f10:	9c 93       	st	X, r25
    2f12:	8e 93       	st	-X, r24
    2f14:	12 97       	sbiw	r26, 0x02	; 2
    2f16:	2b c0       	rjmp	.+86     	; 0x2f6e <malloc+0x9c>
    2f18:	90 93 05 01 	sts	0x0105, r25
    2f1c:	80 93 04 01 	sts	0x0104, r24
    2f20:	26 c0       	rjmp	.+76     	; 0x2f6e <malloc+0x9c>
    2f22:	41 15       	cp	r20, r1
    2f24:	51 05       	cpc	r21, r1
    2f26:	19 f0       	breq	.+6      	; 0x2f2e <malloc+0x5c>
    2f28:	64 17       	cp	r22, r20
    2f2a:	75 07       	cpc	r23, r21
    2f2c:	18 f4       	brcc	.+6      	; 0x2f34 <malloc+0x62>
    2f2e:	ab 01       	movw	r20, r22
    2f30:	e9 01       	movw	r28, r18
    2f32:	df 01       	movw	r26, r30
    2f34:	9f 01       	movw	r18, r30
    2f36:	72 81       	ldd	r23, Z+2	; 0x02
    2f38:	63 81       	ldd	r22, Z+3	; 0x03
    2f3a:	e7 2f       	mov	r30, r23
    2f3c:	f6 2f       	mov	r31, r22
    2f3e:	30 97       	sbiw	r30, 0x00	; 0
    2f40:	c1 f6       	brne	.-80     	; 0x2ef2 <malloc+0x20>
    2f42:	41 15       	cp	r20, r1
    2f44:	51 05       	cpc	r21, r1
    2f46:	01 f1       	breq	.+64     	; 0x2f88 <malloc+0xb6>
    2f48:	48 1b       	sub	r20, r24
    2f4a:	59 0b       	sbc	r21, r25
    2f4c:	44 30       	cpi	r20, 0x04	; 4
    2f4e:	51 05       	cpc	r21, r1
    2f50:	80 f4       	brcc	.+32     	; 0x2f72 <malloc+0xa0>
    2f52:	12 96       	adiw	r26, 0x02	; 2
    2f54:	8d 91       	ld	r24, X+
    2f56:	9c 91       	ld	r25, X
    2f58:	13 97       	sbiw	r26, 0x03	; 3
    2f5a:	20 97       	sbiw	r28, 0x00	; 0
    2f5c:	19 f0       	breq	.+6      	; 0x2f64 <malloc+0x92>
    2f5e:	9b 83       	std	Y+3, r25	; 0x03
    2f60:	8a 83       	std	Y+2, r24	; 0x02
    2f62:	04 c0       	rjmp	.+8      	; 0x2f6c <malloc+0x9a>
    2f64:	90 93 05 01 	sts	0x0105, r25
    2f68:	80 93 04 01 	sts	0x0104, r24
    2f6c:	fd 01       	movw	r30, r26
    2f6e:	32 96       	adiw	r30, 0x02	; 2
    2f70:	46 c0       	rjmp	.+140    	; 0x2ffe <malloc+0x12c>
    2f72:	fd 01       	movw	r30, r26
    2f74:	e4 0f       	add	r30, r20
    2f76:	f5 1f       	adc	r31, r21
    2f78:	81 93       	st	Z+, r24
    2f7a:	91 93       	st	Z+, r25
    2f7c:	42 50       	subi	r20, 0x02	; 2
    2f7e:	50 40       	sbci	r21, 0x00	; 0
    2f80:	11 96       	adiw	r26, 0x01	; 1
    2f82:	5c 93       	st	X, r21
    2f84:	4e 93       	st	-X, r20
    2f86:	3b c0       	rjmp	.+118    	; 0x2ffe <malloc+0x12c>
    2f88:	20 91 02 01 	lds	r18, 0x0102
    2f8c:	30 91 03 01 	lds	r19, 0x0103
    2f90:	21 15       	cp	r18, r1
    2f92:	31 05       	cpc	r19, r1
    2f94:	41 f4       	brne	.+16     	; 0x2fa6 <malloc+0xd4>
    2f96:	20 91 97 00 	lds	r18, 0x0097
    2f9a:	30 91 98 00 	lds	r19, 0x0098
    2f9e:	30 93 03 01 	sts	0x0103, r19
    2fa2:	20 93 02 01 	sts	0x0102, r18
    2fa6:	20 91 99 00 	lds	r18, 0x0099
    2faa:	30 91 9a 00 	lds	r19, 0x009A
    2fae:	21 15       	cp	r18, r1
    2fb0:	31 05       	cpc	r19, r1
    2fb2:	41 f4       	brne	.+16     	; 0x2fc4 <malloc+0xf2>
    2fb4:	2d b7       	in	r18, 0x3d	; 61
    2fb6:	3e b7       	in	r19, 0x3e	; 62
    2fb8:	40 91 95 00 	lds	r20, 0x0095
    2fbc:	50 91 96 00 	lds	r21, 0x0096
    2fc0:	24 1b       	sub	r18, r20
    2fc2:	35 0b       	sbc	r19, r21
    2fc4:	e0 91 02 01 	lds	r30, 0x0102
    2fc8:	f0 91 03 01 	lds	r31, 0x0103
    2fcc:	e2 17       	cp	r30, r18
    2fce:	f3 07       	cpc	r31, r19
    2fd0:	a0 f4       	brcc	.+40     	; 0x2ffa <malloc+0x128>
    2fd2:	2e 1b       	sub	r18, r30
    2fd4:	3f 0b       	sbc	r19, r31
    2fd6:	28 17       	cp	r18, r24
    2fd8:	39 07       	cpc	r19, r25
    2fda:	78 f0       	brcs	.+30     	; 0x2ffa <malloc+0x128>
    2fdc:	ac 01       	movw	r20, r24
    2fde:	4e 5f       	subi	r20, 0xFE	; 254
    2fe0:	5f 4f       	sbci	r21, 0xFF	; 255
    2fe2:	24 17       	cp	r18, r20
    2fe4:	35 07       	cpc	r19, r21
    2fe6:	48 f0       	brcs	.+18     	; 0x2ffa <malloc+0x128>
    2fe8:	4e 0f       	add	r20, r30
    2fea:	5f 1f       	adc	r21, r31
    2fec:	50 93 03 01 	sts	0x0103, r21
    2ff0:	40 93 02 01 	sts	0x0102, r20
    2ff4:	81 93       	st	Z+, r24
    2ff6:	91 93       	st	Z+, r25
    2ff8:	02 c0       	rjmp	.+4      	; 0x2ffe <malloc+0x12c>
    2ffa:	e0 e0       	ldi	r30, 0x00	; 0
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	cf 01       	movw	r24, r30
    3000:	df 91       	pop	r29
    3002:	cf 91       	pop	r28
    3004:	08 95       	ret

00003006 <free>:
    3006:	cf 93       	push	r28
    3008:	df 93       	push	r29
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	09 f4       	brne	.+2      	; 0x3010 <free+0xa>
    300e:	91 c0       	rjmp	.+290    	; 0x3132 <free+0x12c>
    3010:	fc 01       	movw	r30, r24
    3012:	32 97       	sbiw	r30, 0x02	; 2
    3014:	13 82       	std	Z+3, r1	; 0x03
    3016:	12 82       	std	Z+2, r1	; 0x02
    3018:	60 91 04 01 	lds	r22, 0x0104
    301c:	70 91 05 01 	lds	r23, 0x0105
    3020:	61 15       	cp	r22, r1
    3022:	71 05       	cpc	r23, r1
    3024:	81 f4       	brne	.+32     	; 0x3046 <free+0x40>
    3026:	20 81       	ld	r18, Z
    3028:	31 81       	ldd	r19, Z+1	; 0x01
    302a:	28 0f       	add	r18, r24
    302c:	39 1f       	adc	r19, r25
    302e:	80 91 02 01 	lds	r24, 0x0102
    3032:	90 91 03 01 	lds	r25, 0x0103
    3036:	82 17       	cp	r24, r18
    3038:	93 07       	cpc	r25, r19
    303a:	99 f5       	brne	.+102    	; 0x30a2 <free+0x9c>
    303c:	f0 93 03 01 	sts	0x0103, r31
    3040:	e0 93 02 01 	sts	0x0102, r30
    3044:	76 c0       	rjmp	.+236    	; 0x3132 <free+0x12c>
    3046:	db 01       	movw	r26, r22
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <free+0x4c>
    304e:	cd 01       	movw	r24, r26
    3050:	d9 01       	movw	r26, r18
    3052:	ae 17       	cp	r26, r30
    3054:	bf 07       	cpc	r27, r31
    3056:	48 f4       	brcc	.+18     	; 0x306a <free+0x64>
    3058:	12 96       	adiw	r26, 0x02	; 2
    305a:	2d 91       	ld	r18, X+
    305c:	3c 91       	ld	r19, X
    305e:	13 97       	sbiw	r26, 0x03	; 3
    3060:	21 15       	cp	r18, r1
    3062:	31 05       	cpc	r19, r1
    3064:	a1 f7       	brne	.-24     	; 0x304e <free+0x48>
    3066:	cd 01       	movw	r24, r26
    3068:	21 c0       	rjmp	.+66     	; 0x30ac <free+0xa6>
    306a:	b3 83       	std	Z+3, r27	; 0x03
    306c:	a2 83       	std	Z+2, r26	; 0x02
    306e:	ef 01       	movw	r28, r30
    3070:	49 91       	ld	r20, Y+
    3072:	59 91       	ld	r21, Y+
    3074:	9e 01       	movw	r18, r28
    3076:	24 0f       	add	r18, r20
    3078:	35 1f       	adc	r19, r21
    307a:	a2 17       	cp	r26, r18
    307c:	b3 07       	cpc	r27, r19
    307e:	79 f4       	brne	.+30     	; 0x309e <free+0x98>
    3080:	2d 91       	ld	r18, X+
    3082:	3c 91       	ld	r19, X
    3084:	11 97       	sbiw	r26, 0x01	; 1
    3086:	24 0f       	add	r18, r20
    3088:	35 1f       	adc	r19, r21
    308a:	2e 5f       	subi	r18, 0xFE	; 254
    308c:	3f 4f       	sbci	r19, 0xFF	; 255
    308e:	31 83       	std	Z+1, r19	; 0x01
    3090:	20 83       	st	Z, r18
    3092:	12 96       	adiw	r26, 0x02	; 2
    3094:	2d 91       	ld	r18, X+
    3096:	3c 91       	ld	r19, X
    3098:	13 97       	sbiw	r26, 0x03	; 3
    309a:	33 83       	std	Z+3, r19	; 0x03
    309c:	22 83       	std	Z+2, r18	; 0x02
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	29 f4       	brne	.+10     	; 0x30ac <free+0xa6>
    30a2:	f0 93 05 01 	sts	0x0105, r31
    30a6:	e0 93 04 01 	sts	0x0104, r30
    30aa:	43 c0       	rjmp	.+134    	; 0x3132 <free+0x12c>
    30ac:	dc 01       	movw	r26, r24
    30ae:	13 96       	adiw	r26, 0x03	; 3
    30b0:	fc 93       	st	X, r31
    30b2:	ee 93       	st	-X, r30
    30b4:	12 97       	sbiw	r26, 0x02	; 2
    30b6:	4d 91       	ld	r20, X+
    30b8:	5d 91       	ld	r21, X+
    30ba:	a4 0f       	add	r26, r20
    30bc:	b5 1f       	adc	r27, r21
    30be:	ea 17       	cp	r30, r26
    30c0:	fb 07       	cpc	r31, r27
    30c2:	69 f4       	brne	.+26     	; 0x30de <free+0xd8>
    30c4:	20 81       	ld	r18, Z
    30c6:	31 81       	ldd	r19, Z+1	; 0x01
    30c8:	24 0f       	add	r18, r20
    30ca:	35 1f       	adc	r19, r21
    30cc:	2e 5f       	subi	r18, 0xFE	; 254
    30ce:	3f 4f       	sbci	r19, 0xFF	; 255
    30d0:	ec 01       	movw	r28, r24
    30d2:	39 83       	std	Y+1, r19	; 0x01
    30d4:	28 83       	st	Y, r18
    30d6:	22 81       	ldd	r18, Z+2	; 0x02
    30d8:	33 81       	ldd	r19, Z+3	; 0x03
    30da:	3b 83       	std	Y+3, r19	; 0x03
    30dc:	2a 83       	std	Y+2, r18	; 0x02
    30de:	e0 e0       	ldi	r30, 0x00	; 0
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	02 c0       	rjmp	.+4      	; 0x30e8 <free+0xe2>
    30e4:	fb 01       	movw	r30, r22
    30e6:	bc 01       	movw	r22, r24
    30e8:	db 01       	movw	r26, r22
    30ea:	12 96       	adiw	r26, 0x02	; 2
    30ec:	8d 91       	ld	r24, X+
    30ee:	9c 91       	ld	r25, X
    30f0:	13 97       	sbiw	r26, 0x03	; 3
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	b9 f7       	brne	.-18     	; 0x30e4 <free+0xde>
    30f6:	9b 01       	movw	r18, r22
    30f8:	2e 5f       	subi	r18, 0xFE	; 254
    30fa:	3f 4f       	sbci	r19, 0xFF	; 255
    30fc:	8d 91       	ld	r24, X+
    30fe:	9c 91       	ld	r25, X
    3100:	11 97       	sbiw	r26, 0x01	; 1
    3102:	82 0f       	add	r24, r18
    3104:	93 1f       	adc	r25, r19
    3106:	40 91 02 01 	lds	r20, 0x0102
    310a:	50 91 03 01 	lds	r21, 0x0103
    310e:	48 17       	cp	r20, r24
    3110:	59 07       	cpc	r21, r25
    3112:	79 f4       	brne	.+30     	; 0x3132 <free+0x12c>
    3114:	30 97       	sbiw	r30, 0x00	; 0
    3116:	29 f4       	brne	.+10     	; 0x3122 <free+0x11c>
    3118:	10 92 05 01 	sts	0x0105, r1
    311c:	10 92 04 01 	sts	0x0104, r1
    3120:	02 c0       	rjmp	.+4      	; 0x3126 <free+0x120>
    3122:	13 82       	std	Z+3, r1	; 0x03
    3124:	12 82       	std	Z+2, r1	; 0x02
    3126:	22 50       	subi	r18, 0x02	; 2
    3128:	30 40       	sbci	r19, 0x00	; 0
    312a:	30 93 03 01 	sts	0x0103, r19
    312e:	20 93 02 01 	sts	0x0102, r18
    3132:	df 91       	pop	r29
    3134:	cf 91       	pop	r28
    3136:	08 95       	ret

00003138 <realloc>:
    3138:	a0 e0       	ldi	r26, 0x00	; 0
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	e2 ea       	ldi	r30, 0xA2	; 162
    313e:	f8 e1       	ldi	r31, 0x18	; 24
    3140:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__prologue_saves__+0xc>
    3144:	8c 01       	movw	r16, r24
    3146:	cb 01       	movw	r24, r22
    3148:	01 15       	cp	r16, r1
    314a:	11 05       	cpc	r17, r1
    314c:	29 f4       	brne	.+10     	; 0x3158 <realloc+0x20>
    314e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <malloc>
    3152:	08 2f       	mov	r16, r24
    3154:	19 2f       	mov	r17, r25
    3156:	b5 c0       	rjmp	.+362    	; 0x32c2 <realloc+0x18a>
    3158:	d8 01       	movw	r26, r16
    315a:	12 97       	sbiw	r26, 0x02	; 2
    315c:	98 01       	movw	r18, r16
    315e:	26 0f       	add	r18, r22
    3160:	37 1f       	adc	r19, r23
    3162:	2a 17       	cp	r18, r26
    3164:	3b 07       	cpc	r19, r27
    3166:	08 f4       	brcc	.+2      	; 0x316a <realloc+0x32>
    3168:	aa c0       	rjmp	.+340    	; 0x32be <realloc+0x186>
    316a:	ed 90       	ld	r14, X+
    316c:	fc 90       	ld	r15, X
    316e:	11 97       	sbiw	r26, 0x01	; 1
    3170:	e6 16       	cp	r14, r22
    3172:	f7 06       	cpc	r15, r23
    3174:	d0 f0       	brcs	.+52     	; 0x31aa <realloc+0x72>
    3176:	45 e0       	ldi	r20, 0x05	; 5
    3178:	e4 16       	cp	r14, r20
    317a:	f1 04       	cpc	r15, r1
    317c:	08 f4       	brcc	.+2      	; 0x3180 <realloc+0x48>
    317e:	a1 c0       	rjmp	.+322    	; 0x32c2 <realloc+0x18a>
    3180:	a7 01       	movw	r20, r14
    3182:	44 50       	subi	r20, 0x04	; 4
    3184:	50 40       	sbci	r21, 0x00	; 0
    3186:	46 17       	cp	r20, r22
    3188:	57 07       	cpc	r21, r23
    318a:	08 f4       	brcc	.+2      	; 0x318e <realloc+0x56>
    318c:	9a c0       	rjmp	.+308    	; 0x32c2 <realloc+0x18a>
    318e:	a7 01       	movw	r20, r14
    3190:	42 50       	subi	r20, 0x02	; 2
    3192:	50 40       	sbci	r21, 0x00	; 0
    3194:	46 1b       	sub	r20, r22
    3196:	57 0b       	sbc	r21, r23
    3198:	f9 01       	movw	r30, r18
    319a:	41 93       	st	Z+, r20
    319c:	51 93       	st	Z+, r21
    319e:	6d 93       	st	X+, r22
    31a0:	7c 93       	st	X, r23
    31a2:	cf 01       	movw	r24, r30
    31a4:	0e 94 03 18 	call	0x3006	; 0x3006 <free>
    31a8:	8c c0       	rjmp	.+280    	; 0x32c2 <realloc+0x18a>
    31aa:	5b 01       	movw	r10, r22
    31ac:	ae 18       	sub	r10, r14
    31ae:	bf 08       	sbc	r11, r15
    31b0:	48 01       	movw	r8, r16
    31b2:	8e 0c       	add	r8, r14
    31b4:	9f 1c       	adc	r9, r15
    31b6:	e0 91 04 01 	lds	r30, 0x0104
    31ba:	f0 91 05 01 	lds	r31, 0x0105
    31be:	cc 24       	eor	r12, r12
    31c0:	dd 24       	eor	r13, r13
    31c2:	c0 e0       	ldi	r28, 0x00	; 0
    31c4:	d0 e0       	ldi	r29, 0x00	; 0
    31c6:	41 c0       	rjmp	.+130    	; 0x324a <realloc+0x112>
    31c8:	e8 15       	cp	r30, r8
    31ca:	f9 05       	cpc	r31, r9
    31cc:	99 f5       	brne	.+102    	; 0x3234 <realloc+0xfc>
    31ce:	60 81       	ld	r22, Z
    31d0:	71 81       	ldd	r23, Z+1	; 0x01
    31d2:	ab 01       	movw	r20, r22
    31d4:	4e 5f       	subi	r20, 0xFE	; 254
    31d6:	5f 4f       	sbci	r21, 0xFF	; 255
    31d8:	4a 15       	cp	r20, r10
    31da:	5b 05       	cpc	r21, r11
    31dc:	58 f1       	brcs	.+86     	; 0x3234 <realloc+0xfc>
    31de:	ab 01       	movw	r20, r22
    31e0:	4a 19       	sub	r20, r10
    31e2:	5b 09       	sbc	r21, r11
    31e4:	cc 24       	eor	r12, r12
    31e6:	dd 24       	eor	r13, r13
    31e8:	68 94       	set
    31ea:	c1 f8       	bld	r12, 1
    31ec:	c4 0e       	add	r12, r20
    31ee:	d5 1e       	adc	r13, r21
    31f0:	82 80       	ldd	r8, Z+2	; 0x02
    31f2:	a3 80       	ldd	r10, Z+3	; 0x03
    31f4:	e5 e0       	ldi	r30, 0x05	; 5
    31f6:	ce 16       	cp	r12, r30
    31f8:	d1 04       	cpc	r13, r1
    31fa:	48 f0       	brcs	.+18     	; 0x320e <realloc+0xd6>
    31fc:	f9 01       	movw	r30, r18
    31fe:	82 82       	std	Z+2, r8	; 0x02
    3200:	a3 82       	std	Z+3, r10	; 0x03
    3202:	51 83       	std	Z+1, r21	; 0x01
    3204:	40 83       	st	Z, r20
    3206:	11 96       	adiw	r26, 0x01	; 1
    3208:	9c 93       	st	X, r25
    320a:	8e 93       	st	-X, r24
    320c:	09 c0       	rjmp	.+18     	; 0x3220 <realloc+0xe8>
    320e:	c7 01       	movw	r24, r14
    3210:	02 96       	adiw	r24, 0x02	; 2
    3212:	86 0f       	add	r24, r22
    3214:	97 1f       	adc	r25, r23
    3216:	11 96       	adiw	r26, 0x01	; 1
    3218:	9c 93       	st	X, r25
    321a:	8e 93       	st	-X, r24
    321c:	e8 2d       	mov	r30, r8
    321e:	fa 2d       	mov	r31, r10
    3220:	20 97       	sbiw	r28, 0x00	; 0
    3222:	19 f0       	breq	.+6      	; 0x322a <realloc+0xf2>
    3224:	fb 83       	std	Y+3, r31	; 0x03
    3226:	ea 83       	std	Y+2, r30	; 0x02
    3228:	4c c0       	rjmp	.+152    	; 0x32c2 <realloc+0x18a>
    322a:	f0 93 05 01 	sts	0x0105, r31
    322e:	e0 93 04 01 	sts	0x0104, r30
    3232:	47 c0       	rjmp	.+142    	; 0x32c2 <realloc+0x18a>
    3234:	40 81       	ld	r20, Z
    3236:	51 81       	ldd	r21, Z+1	; 0x01
    3238:	c4 16       	cp	r12, r20
    323a:	d5 06       	cpc	r13, r21
    323c:	08 f4       	brcc	.+2      	; 0x3240 <realloc+0x108>
    323e:	6a 01       	movw	r12, r20
    3240:	ef 01       	movw	r28, r30
    3242:	52 81       	ldd	r21, Z+2	; 0x02
    3244:	43 81       	ldd	r20, Z+3	; 0x03
    3246:	e5 2f       	mov	r30, r21
    3248:	f4 2f       	mov	r31, r20
    324a:	30 97       	sbiw	r30, 0x00	; 0
    324c:	09 f0       	breq	.+2      	; 0x3250 <realloc+0x118>
    324e:	bc cf       	rjmp	.-136    	; 0x31c8 <realloc+0x90>
    3250:	40 91 02 01 	lds	r20, 0x0102
    3254:	50 91 03 01 	lds	r21, 0x0103
    3258:	48 15       	cp	r20, r8
    325a:	59 05       	cpc	r21, r9
    325c:	e9 f4       	brne	.+58     	; 0x3298 <realloc+0x160>
    325e:	c8 16       	cp	r12, r24
    3260:	d9 06       	cpc	r13, r25
    3262:	d0 f4       	brcc	.+52     	; 0x3298 <realloc+0x160>
    3264:	40 91 99 00 	lds	r20, 0x0099
    3268:	50 91 9a 00 	lds	r21, 0x009A
    326c:	41 15       	cp	r20, r1
    326e:	51 05       	cpc	r21, r1
    3270:	41 f4       	brne	.+16     	; 0x3282 <realloc+0x14a>
    3272:	4d b7       	in	r20, 0x3d	; 61
    3274:	5e b7       	in	r21, 0x3e	; 62
    3276:	60 91 95 00 	lds	r22, 0x0095
    327a:	70 91 96 00 	lds	r23, 0x0096
    327e:	46 1b       	sub	r20, r22
    3280:	57 0b       	sbc	r21, r23
    3282:	24 17       	cp	r18, r20
    3284:	35 07       	cpc	r19, r21
    3286:	d8 f4       	brcc	.+54     	; 0x32be <realloc+0x186>
    3288:	30 93 03 01 	sts	0x0103, r19
    328c:	20 93 02 01 	sts	0x0102, r18
    3290:	11 96       	adiw	r26, 0x01	; 1
    3292:	9c 93       	st	X, r25
    3294:	8e 93       	st	-X, r24
    3296:	15 c0       	rjmp	.+42     	; 0x32c2 <realloc+0x18a>
    3298:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <malloc>
    329c:	c8 2e       	mov	r12, r24
    329e:	e6 01       	movw	r28, r12
    32a0:	6e 01       	movw	r12, r28
    32a2:	d9 2e       	mov	r13, r25
    32a4:	e6 01       	movw	r28, r12
    32a6:	20 97       	sbiw	r28, 0x00	; 0
    32a8:	51 f0       	breq	.+20     	; 0x32be <realloc+0x186>
    32aa:	8c 2d       	mov	r24, r12
    32ac:	b8 01       	movw	r22, r16
    32ae:	a7 01       	movw	r20, r14
    32b0:	0e 94 6e 19 	call	0x32dc	; 0x32dc <memcpy>
    32b4:	c8 01       	movw	r24, r16
    32b6:	0e 94 03 18 	call	0x3006	; 0x3006 <free>
    32ba:	86 01       	movw	r16, r12
    32bc:	02 c0       	rjmp	.+4      	; 0x32c2 <realloc+0x18a>
    32be:	00 e0       	ldi	r16, 0x00	; 0
    32c0:	10 e0       	ldi	r17, 0x00	; 0
    32c2:	c8 01       	movw	r24, r16
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
    32c8:	ec e0       	ldi	r30, 0x0C	; 12
    32ca:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__epilogue_restores__+0xc>

000032ce <strcpy_P>:
    32ce:	fb 01       	movw	r30, r22
    32d0:	dc 01       	movw	r26, r24
    32d2:	05 90       	lpm	r0, Z+
    32d4:	0d 92       	st	X+, r0
    32d6:	00 20       	and	r0, r0
    32d8:	e1 f7       	brne	.-8      	; 0x32d2 <strcpy_P+0x4>
    32da:	08 95       	ret

000032dc <memcpy>:
    32dc:	fb 01       	movw	r30, r22
    32de:	dc 01       	movw	r26, r24
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <memcpy+0xa>
    32e2:	01 90       	ld	r0, Z+
    32e4:	0d 92       	st	X+, r0
    32e6:	41 50       	subi	r20, 0x01	; 1
    32e8:	50 40       	sbci	r21, 0x00	; 0
    32ea:	d8 f7       	brcc	.-10     	; 0x32e2 <memcpy+0x6>
    32ec:	08 95       	ret

000032ee <strcpy>:
    32ee:	fb 01       	movw	r30, r22
    32f0:	dc 01       	movw	r26, r24
    32f2:	01 90       	ld	r0, Z+
    32f4:	0d 92       	st	X+, r0
    32f6:	00 20       	and	r0, r0
    32f8:	e1 f7       	brne	.-8      	; 0x32f2 <strcpy+0x4>
    32fa:	08 95       	ret

000032fc <__eerd_byte_m16>:
    32fc:	e1 99       	sbic	0x1c, 1	; 28
    32fe:	fe cf       	rjmp	.-4      	; 0x32fc <__eerd_byte_m16>
    3300:	9f bb       	out	0x1f, r25	; 31
    3302:	8e bb       	out	0x1e, r24	; 30
    3304:	e0 9a       	sbi	0x1c, 0	; 28
    3306:	99 27       	eor	r25, r25
    3308:	8d b3       	in	r24, 0x1d	; 29
    330a:	08 95       	ret

0000330c <__eewr_byte_m16>:
    330c:	26 2f       	mov	r18, r22

0000330e <__eewr_r18_m16>:
    330e:	e1 99       	sbic	0x1c, 1	; 28
    3310:	fe cf       	rjmp	.-4      	; 0x330e <__eewr_r18_m16>
    3312:	9f bb       	out	0x1f, r25	; 31
    3314:	8e bb       	out	0x1e, r24	; 30
    3316:	2d bb       	out	0x1d, r18	; 29
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	e2 9a       	sbi	0x1c, 2	; 28
    331e:	e1 9a       	sbi	0x1c, 1	; 28
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	01 96       	adiw	r24, 0x01	; 1
    3324:	08 95       	ret

00003326 <_exit>:
    3326:	f8 94       	cli

00003328 <__stop_program>:
    3328:	ff cf       	rjmp	.-2      	; 0x3328 <__stop_program>
